  03:04:57.947  > -- ALL UNIQUE SCRIPTS ANALYZER - CHUNKED OUTPUT
local function getScriptContent(script)
    local success, content = pcall(function()
        return script.Source
    end)
    return success and content or "[Unable to read script content]"
end

local output = {}
local printedScriptNames = {} -- Track which script names we've already printed
local chunkSize = 50 -- Print every 50 lines
local chunkCount = 1

local function addToOutput(text)
    table.insert(output, text)
    
    -- Print and clear every chunkSize lines
    if #output >= chunkSize then
        print("=== CHUNK " .. chunkCount .. " ===")
        print(table.concat(output, "\n"))
        print("=== END CHUNK " .. chunkCount .. " ===")
        print("")
        
        output = {} -- Clear for next chunk
        chunkCount = chunkCount + 1
        wait(0.1) -- Small delay
    end
end

local function exploreScriptsNoDuplicates(parent, serviceName)
    local scripts = {}
    for _, obj in pairs(parent:GetDescendants()) do
        if obj:IsA("Script") or obj:IsA("LocalScript") or obj:IsA("ModuleScript") then
            -- Only add if we haven't seen this script name before
            if not printedScriptNames[obj.Name] then
                printedScriptNames[obj.Name] = true
                table.insert(scripts, {
                    Name = obj.Name,
                    Type = obj.ClassName,
                    Parent = obj.Parent.Name,
                    FullPath = obj:GetFullName(),
                    Content = getScriptContent(obj),
                    Service = serviceName
                })
            end
        end
    end
    
    -- Add scripts to output
    for _, script in pairs(scripts) do
        addToOutput(script.Type .. ": " .. script.Name .. " (in " .. script.Parent .. ") [" .. script.Service .. "]")
        addToOutput("Path: " .. script.FullPath)
        addToOutput("Content:")
        local lines = string.split(script.Content, "\n")
        for i, line in pairs(lines) do
            addToOutput("  " .. line)
        end
        addToOutput("--- END " .. script.Name .. " ---")
        addToOutput("")
    end
end

-- Main execution
addToOutput("üìú ALL UNIQUE SCRIPTS IN GAME - CHUNKED OUTPUT üìú")
addToOutput("=" .. string.rep("=", 60))
addToOutput("")

-- All services that might contain scripts
local services = {
    {"ServerScriptService", game:GetService("ServerScriptService")},
    {"StarterPlayer.StarterPlayerScripts", game:GetService("StarterPlayer").StarterPlayerScripts},
    {"StarterPlayer.StarterCharacterScripts", game:GetService("StarterPlayer").StarterCharacterScripts},
    {"StarterGui", game:GetService("StarterGui")},
    {"ReplicatedStorage", game:GetService("ReplicatedStorage")},
    {"Workspace", game.Workspace},
    {"Lighting", game:GetService("Lighting")},
    {"SoundService", game:GetService("SoundService")},
    {"ServerStorage", game:GetService("ServerStorage")}
}

-- Scan each service for unique scripts
for _, serviceInfo in pairs(services) do
    exploreScriptsNoDuplicates(serviceInfo[2], serviceInfo[1])
end

-- Print any remaining output
if #output > 0 then
    print("=== FINAL CHUNK " .. chunkCount .. " ===")
    print(table.concat(output, "\n"))
    print("=== END FINAL CHUNK ===")
end

-- Count unique scripts
local scriptCount = 0
for _ in pairs(printedScriptNames) do
    scriptCount = scriptCount + 1
end

print("")
print("üîç ANALYSIS COMPLETE! üîç")
print("Total unique scripts found: " .. scriptCount)
print("Check all chunks above for complete script contents.")  -  Studio
  03:04:57.950  === CHUNK 1 ===  -  Edit
  03:04:57.950  üìú ALL UNIQUE SCRIPTS IN GAME - CHUNKED OUTPUT üìú
=============================================================

Script: leaderstats (in ServerScriptService) [ServerScriptService]
Path: ServerScriptService.leaderstats
Content:
  -- LeaderstatsManager (ServerScriptService) - FIXED WITH ANTI-CHEAT REMOVED
  local Players = game:GetService("Players")
  local ReplicatedStorage = game:GetService("ReplicatedStorage")
  local DataStoreService = game:GetService("DataStoreService")
  local RunService = game:GetService("RunService")
  
  -- Get ShopConfig
  local ShopConfig = require(ReplicatedStorage:WaitForChild("ShopConfig"))
  
  -- Debug system
  local function debugPrint(message)
  	if ShopConfig.Debug.Enabled and ShopConfig.Debug.ShowLeaderstatsDebug then
  		print("[LEADERSTATS]: " .. message)
  	end
  end
  
  -- DataStore Configuration
  local LeaderstatsDataStore = DataStoreService:GetDataStore("LeaderstatsData_v2")
  local BackupDataStore = DataStoreService:GetDataStore("LeaderstatsBackup_v2")
  
  -- Configuration
  local Config = {
  	BASE_POOBUCKS_PER_POOP = 1,
  	STARTING_POOBUCKS = ShopConfig.StartingPooBucks or 100,
  	STARTING_POOPS_POOPED = ShopConfig.StartingPoopsPooped or 0,
  	STARTING_REBIRTHS = ShopConfig.StartingRebirths or 0,
  	AUTO_SAVE_INTERVAL = 30,
  	MAX_RETRIES = 3
  }
  
  -- Player data storage
  local PlayerData = {}
  
  -- MEMORY MANAGEMENT
  local connections = {}
  
  local function cleanupConnections()
  	for _, connection in pairs(connections) do
  		if connection then
  			connection:Disconnect()
  		end
  	end
  	connections = {}
  end  -  Edit
  03:04:57.950  === END CHUNK 1 ===  -  Edit
  03:04:57.951    -  Edit
  03:04:58.054  === CHUNK 2 ===  -  Edit
  03:04:58.054    
  -- Custom table.filter function since it doesn't exist in Lua
  local function filterTable(tbl, filterFunc)
  	local result = {}
  	for i, v in ipairs(tbl) do
  		if filterFunc(v) then
  			table.insert(result, v)
  		end
  	end
  	return result
  end
  
  -- Default player data structure
  local function createDefaultPlayerData()
  	return {
  		PooBucks = Config.STARTING_POOBUCKS,
  		TotalPoopsSpawned = Config.STARTING_POOPS_POOPED,
  		Rebirths = Config.STARTING_REBIRTHS,
  		LastLogin = tick(),
  		PlayTime = 0,
  		Stats = {
  			TotalEarned = 0,
  			TotalSpent = 0,
  			HighestAmount = Config.STARTING_POOBUCKS,
  			LifetimePoops = Config.STARTING_POOPS_POOPED
  		}
  	}
  end
  
  -- DATA VALIDATION
  local function validatePlayerData(data)
  	local isValid = true
  	local errors = {}
  
  	-- Validate PooBucks
  	if type(data.PooBucks) ~= "number" or data.PooBucks < 0 or data.PooBucks > 1e15 then
  		data.PooBucks = math.max(0, math.min(data.PooBucks or 0, 1e15))
  		table.insert(errors, "Invalid PooBucks")
  		isValid = false
  	end
  
  	-- Validate TotalPoopsSpawned
  	if type(data.TotalPoopsSpawned) ~= "number" or data.TotalPoopsSpawned < 0 then
  		data.TotalPoopsSpawned = math.max(0, data.TotalPoopsSpawned or 0)
  		table.insert(errors, "Invalid TotalPoopsSpawned")
  		isValid = false
  	end
  
  	-- Validate Rebirths
  	if type(data.Rebirths) ~= "number" or data.Rebirths < 0 then  -  Edit
  03:04:58.054  === END CHUNK 2 ===  -  Edit
  03:04:58.054    -  Edit
  03:04:58.155  === CHUNK 3 ===  -  Edit
  03:04:58.155    		data.Rebirths = math.max(0, data.Rebirths or 0)
  		table.insert(errors, "Invalid Rebirths")
  		isValid = false
  	end
  
  	-- Validate Stats table
  	if type(data.Stats) ~= "table" then
  		data.Stats = {
  			TotalEarned = 0,
  			TotalSpent = 0,
  			HighestAmount = data.PooBucks,
  			LifetimePoops = data.TotalPoopsSpawned
  		}
  		table.insert(errors, "Invalid Stats")
  		isValid = false
  	end
  
  	if not isValid then
  		debugPrint("Data validation errors for player: " .. table.concat(errors, ", "))
  	end
  
  	return data
  end
  
  -- Function to get rebirth multiplier
  local function getRebirthMultiplier(player)
  	local data = PlayerData[player]
  	if not data then return 1 end
  
  	local rebirths = data.Rebirths or 0
  	local multiplierPerRebirth = ShopConfig.Rebirth.MultiplierPerRebirth or 0.1
  
  	return 1 + (rebirths * multiplierPerRebirth)
  end
  
  -- Function to get zone multiplier
  local function getZoneMultiplier(player)
  	if _G.ZoneSystem and _G.ZoneSystem.GetPlayerZoneMultiplier then
  		return _G.ZoneSystem.GetPlayerZoneMultiplier(player)
  	end
  	return 1
  end
  
  -- Function to get equipped poop gain with all multipliers
  local function getEquippedPoopGain(player)
  	local baseGain = Config.BASE_POOBUCKS_PER_POOP
  
  	-- Get base poop gain
  	if _G.ShopPlayerData and _G.ShopPlayerData[player] then
  		local equippedPoop = _G.ShopPlayerData[player].EquippedPoop  -  Edit
  03:04:58.155  === END CHUNK 3 ===  -  Edit
  03:04:58.155    -  Edit
  03:04:58.259  === CHUNK 4 ===  -  Edit
  03:04:58.259    		if equippedPoop and ShopConfig.Poops[equippedPoop] then
  			baseGain = ShopConfig.Poops[equippedPoop].Gain or Config.BASE_POOBUCKS_PER_POOP
  		end
  	end
  
  	local totalMultiplier = 1
  
  	-- Apply boost multipliers
  	if _G.BoostSystem and _G.BoostSystem.GetEffectMultiplier then
  		totalMultiplier = totalMultiplier * _G.BoostSystem.GetEffectMultiplier(player, "CurrencyMultiplier")
  	end
  
  	-- Apply gamepass multipliers
  	if _G.ShopPlayerData and _G.ShopPlayerData[player] and _G.ShopPlayerData[player].OwnedGamepasses then
  		for _, gamepassKey in pairs(_G.ShopPlayerData[player].OwnedGamepasses) do
  			local gamepassConfig = ShopConfig.Gamepasses[gamepassKey]
  			if gamepassConfig and gamepassConfig.Effect == "CurrencyMultiplier" then
  				totalMultiplier = totalMultiplier * gamepassConfig.Value
  			end
  		end
  	end
  
  	-- Apply rebirth multiplier
  	totalMultiplier = totalMultiplier * getRebirthMultiplier(player)
  
  	-- Apply zone multiplier
  	totalMultiplier = totalMultiplier * getZoneMultiplier(player)
  
  	local finalGain = baseGain * totalMultiplier
  
  	return math.floor(finalGain)
  end
  
  -- Enhanced sync function
  local function syncWithShopSystem(player)
  	if _G.ShopPlayerData and _G.ShopPlayerData[player] then
  		local shopData = _G.ShopPlayerData[player]
  		local leaderstatsData = PlayerData[player]
  
  		if shopData and leaderstatsData and shopData.PooBucks and leaderstatsData.PooBucks then
  			if math.abs(shopData.PooBucks - leaderstatsData.PooBucks) > 0.01 then
  				debugPrint("SYNC: Updating leaderstats data from " .. leaderstatsData.PooBucks .. " to " .. shopData.PooBucks)
  				leaderstatsData.PooBucks = shopData.PooBucks
  				updateLeaderstats(player)
  			end
  		end
  	end
  end
  
  -- Enhanced database functions with retry logic  -  Edit
  03:04:58.259  === END CHUNK 4 ===  -  Edit
  03:04:58.259    -  Edit
  03:04:58.363  === CHUNK 5 ===  -  Edit
  03:04:58.363    local function savePlayerData(player, isBackup, retries)
  	retries = retries or Config.MAX_RETRIES
  	syncWithShopSystem(player)
  
  	local data = PlayerData[player]
  	if not data then return false end
  
  	-- Validate before saving
  	data = validatePlayerData(data)
  
  	local playerKey = "Leaderstats_" .. player.UserId
  	local dataStore = isBackup and BackupDataStore or LeaderstatsDataStore
  
  	for attempt = 1, retries do
  		local success, err = pcall(function()
  			dataStore:SetAsync(playerKey, data)
  		end)
  
  		if success then
  			if not isBackup then
  				debugPrint("Saved leaderstats for " .. player.Name)
  			end
  
  			-- Save backup if this was the main save
  			if not isBackup then
  				spawn(function()
  					savePlayerData(player, true, 1) -- Single retry for backup
  				end)
  			end
  
  			return true
  		else
  			warn("Failed to save leaderstats for " .. player.Name .. " (Attempt " .. attempt .. "): " .. err)
  			if attempt < retries then
  				wait(1)
  			end
  		end
  	end
  
  	return false
  end
  
  local function loadPlayerData(player)
  	local playerKey = "Leaderstats_" .. player.UserId
  	local attempts = 0
  	local data = nil
  
  	while attempts < Config.MAX_RETRIES do
  		attempts = attempts + 1
    -  Edit
  03:04:58.363  === END CHUNK 5 ===  -  Edit
  03:04:58.363    -  Edit
  03:04:58.466  === CHUNK 6 ===  -  Edit
  03:04:58.466    		local s, result = pcall(function()
  			return LeaderstatsDataStore:GetAsync(playerKey)
  		end)
  
  		if s then
  			data = result
  			break
  		else
  			warn("Failed to load leaderstats for " .. player.Name .. " (Attempt " .. attempts .. "): " .. result)
  			if attempts < Config.MAX_RETRIES then
  				wait(1)
  			end
  		end
  	end
  
  	if not data then
  		warn("Attempting to load backup leaderstats for " .. player.Name)
  		local s, result = pcall(function()
  			return BackupDataStore:GetAsync(playerKey)
  		end)
  
  		if s and result then
  			data = result
  			warn("Loaded backup leaderstats for " .. player.Name)
  		end
  	end
  
  	if not data then
  		data = createDefaultPlayerData()
  		warn("Using default leaderstats for " .. player.Name)
  	else
  		data = validatePlayerData(data)
  		local defaultData = createDefaultPlayerData()
  		for key, value in pairs(defaultData) do
  			if data[key] == nil then
  				data[key] = value
  			elseif type(data[key]) == "table" and type(value) == "table" then
  				for subKey, subValue in pairs(value) do
  					if data[key][subKey] == nil then
  						data[key][subKey] = subValue
  					end
  				end
  			end
  		end
  	end
  
  	if data.PooBucks < 0 then
  		data.PooBucks = 0
  	end
    -  Edit
  03:04:58.466  === END CHUNK 6 ===  -  Edit
  03:04:58.466    -  Edit
  03:04:58.569  === CHUNK 7 ===  -  Edit
  03:04:58.569    	return data
  end
  
  -- Leaderstats Functions
  function updateLeaderstats(player)
  	local leaderstats = player:FindFirstChild("leaderstats")
  	local data = PlayerData[player]
  
  	if leaderstats and data then
  		local pooBucks = leaderstats:FindFirstChild("PooBucks")
  		if pooBucks then
  			pooBucks.Value = data.PooBucks
  		end
  
  		local poopsPooped = leaderstats:FindFirstChild("Pooped")
  		if poopsPooped then
  			poopsPooped.Value = data.TotalPoopsSpawned
  		end
  
  		local rebirths = leaderstats:FindFirstChild("Rebirths")
  		if rebirths then
  			rebirths.Value = data.Rebirths
  		end
  	end
  end
  
  local function createLeaderstats(player)
  	PlayerData[player] = loadPlayerData(player)
  
  	local leaderstats = Instance.new("Folder")
  	leaderstats.Name = "leaderstats"
  	leaderstats.Parent = player
  
  	local pooBucks = Instance.new("IntValue")
  	pooBucks.Name = "PooBucks"
  	pooBucks.Value = PlayerData[player].PooBucks
  	pooBucks.Parent = leaderstats
  
  	local poopsPooped = Instance.new("IntValue")
  	poopsPooped.Name = "Pooped"
  	poopsPooped.Value = PlayerData[player].TotalPoopsSpawned
  	poopsPooped.Parent = leaderstats
  
  	local rebirths = Instance.new("IntValue")
  	rebirths.Name = "Rebirths"
  	rebirths.Value = PlayerData[player].Rebirths
  	rebirths.Parent = leaderstats
  
  	debugPrint("Created leaderstats for " .. player.Name)
  end  -  Edit
  03:04:58.569  === END CHUNK 7 ===  -  Edit
  03:04:58.569    -  Edit
  03:04:58.671  === CHUNK 8 ===  -  Edit
  03:04:58.671    
  -- Simple givePooBucks function
  local function givePooBucks(player, customAmount, reason)
  	syncWithShopSystem(player)
  
  	local data = PlayerData[player]
  	if not data then return false end
  
  	local amount = customAmount or getEquippedPoopGain(player)
  	reason = reason or "Poop spawned"
  
  	if amount <= 0 then return false end
  
  	data.PooBucks = data.PooBucks + amount
  	data.Stats.TotalEarned = data.Stats.TotalEarned + amount
  
  	if data.PooBucks > data.Stats.HighestAmount then
  		data.Stats.HighestAmount = data.PooBucks
  	end
  
  	-- Update shop system too
  	if _G.ShopPlayerData and _G.ShopPlayerData[player] then
  		_G.ShopPlayerData[player].PooBucks = data.PooBucks
  	end
  
  	updateLeaderstats(player)
  
  	return true, amount
  end
  
  local function spendPooBucks(player, amount, reason)
  	syncWithShopSystem(player)
  
  	local data = PlayerData[player]
  	if not data then return false, "Player data not found" end
  
  	reason = reason or "Purchase"
  
  	if data.PooBucks < amount then
  		return false, "Insufficient PooBucks"
  	end
  
  	data.PooBucks = data.PooBucks - amount
  	data.Stats.TotalSpent = data.Stats.TotalSpent + amount
  
  	-- Update shop system too
  	if _G.ShopPlayerData and _G.ShopPlayerData[player] then
  		_G.ShopPlayerData[player].PooBucks = data.PooBucks
  	end
    -  Edit
  03:04:58.671  === END CHUNK 8 ===  -  Edit
  03:04:58.671    -  Edit
  03:04:58.773  === CHUNK 9 ===  -  Edit
  03:04:58.773    	updateLeaderstats(player)
  
  	debugPrint("Spent " .. amount .. " PooBucks for " .. player.Name .. " (" .. reason .. ")")
  	return true, "Purchase successful"
  end
  
  local function getPlayerCurrency(player)
  	syncWithShopSystem(player)
  	local data = PlayerData[player]
  	return data and data.PooBucks or 0
  end
  
  -- Rebirth functions
  local function getRebirthCost(player)
  	local data = PlayerData[player]
  	if not data then return math.huge end
  
  	local rebirths = data.Rebirths or 0
  	local baseCost = ShopConfig.Rebirth.BaseCost
  	local multiplier = ShopConfig.Rebirth.CostMultiplier
  
  	return math.floor(baseCost * (multiplier ^ rebirths))
  end
  
  local function canRebirth(player)
  	local data = PlayerData[player]
  	if not data then return false, "No player data" end
  
  	local cost = getRebirthCost(player)
  
  	if ShopConfig.Rebirth.Requirements.MinPooBucks and data.PooBucks < cost then
  		return false, "Insufficient PooBucks (Need " .. cost .. ")"
  	end
  
  	if ShopConfig.Rebirth.MaxRebirths > 0 and data.Rebirths >= ShopConfig.Rebirth.MaxRebirths then
  		return false, "Maximum rebirths reached"
  	end
  
  	return true, "Can rebirth"
  end
  
  local function performRebirth(player)
  	local data = PlayerData[player]
  	if not data then return false, "No player data" end
  
  	local canDo, reason = canRebirth(player)
  	if not canDo then
  		return false, reason
  	end
    -  Edit
  03:04:58.773  === END CHUNK 9 ===  -  Edit
  03:04:58.773    -  Edit
  03:04:58.877  === CHUNK 10 ===  -  Edit
  03:04:58.877    	-- Reset data based on config
  	if ShopConfig.Rebirth.ResetData.PooBucks then
  		data.PooBucks = Config.STARTING_POOBUCKS
  	end
  
  	-- Increment rebirths
  	data.Rebirths = data.Rebirths + 1
  
  	-- Update leaderstats and shop system
  	if _G.ShopPlayerData and _G.ShopPlayerData[player] then
  		_G.ShopPlayerData[player].PooBucks = data.PooBucks
  
  		-- Reset shop data if needed
  		if ShopConfig.Rebirth.ResetData.OwnedPoops then
  			_G.ShopPlayerData[player].OwnedPoops = {ShopConfig.DefaultPoop}
  			_G.ShopPlayerData[player].EquippedPoop = ShopConfig.DefaultPoop
  		end
  
  		if ShopConfig.Rebirth.ResetData.OwnedUpgrades then
  			_G.ShopPlayerData[player].OwnedUpgrades = {}
  		end
  	end
  
  	updateLeaderstats(player)
  	savePlayerData(player)
  
  	debugPrint(player.Name .. " rebirthed! New rebirth count: " .. data.Rebirths)
  	return true, "Rebirth successful! New multiplier: " .. string.format("%.1f", getRebirthMultiplier(player)) .. "x"
  end
  
  -- Create RemoteEvents
  local poopSpawnedEvent = Instance.new("RemoteEvent")
  poopSpawnedEvent.Name = "PoopSpawnedEvent"
  poopSpawnedEvent.Parent = ReplicatedStorage
  
  local poopGainPopupEvent = Instance.new("RemoteEvent")
  poopGainPopupEvent.Name = "PoopGainPopupEvent"
  poopGainPopupEvent.Parent = ReplicatedStorage
  
  local getCurrencyRemote = Instance.new("RemoteFunction")
  getCurrencyRemote.Name = "GetPlayerCurrency"
  getCurrencyRemote.Parent = ReplicatedStorage
  
  local spendCurrencyRemote = Instance.new("RemoteFunction")
  spendCurrencyRemote.Name = "SpendPlayerCurrency"
  spendCurrencyRemote.Parent = ReplicatedStorage
  
  local rebirthRequestRemote = Instance.new("RemoteFunction")
  rebirthRequestRemote.Name = "RebirthRequest"
  rebirthRequestRemote.Parent = ReplicatedStorage  -  Edit
  03:04:58.877  === END CHUNK 10 ===  -  Edit
  03:04:58.877    -  Edit
  03:04:58.979  === CHUNK 11 ===  -  Edit
  03:04:58.979    
  local getRebirthInfoRemote = Instance.new("RemoteFunction")
  getRebirthInfoRemote.Name = "GetRebirthInfo"
  getRebirthInfoRemote.Parent = ReplicatedStorage
  
  -- Enhanced poop spawned event handler
  table.insert(connections, poopSpawnedEvent.OnServerEvent:Connect(function(player)
  	if player and player.Character then
  		local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
  		if humanoid and humanoid.Health > 0 then
  			local data = PlayerData[player]
  			if data then
  				-- Get production multiplier
  				local productionMultiplier = 1
  
  				-- Check for production boosts
  				if _G.BoostSystem and _G.BoostSystem.GetEffectMultiplier then
  					productionMultiplier = productionMultiplier * _G.BoostSystem.GetEffectMultiplier(player, "ProductionMultiplier")
  				end
  
  				-- Check for production upgrades
  				if _G.ShopPlayerData and _G.ShopPlayerData[player] and _G.ShopPlayerData[player].OwnedUpgrades then
  					for _, upgradeKey in pairs(_G.ShopPlayerData[player].OwnedUpgrades) do
  						local upgradeConfig = ShopConfig.Upgrades[upgradeKey]
  						if upgradeConfig and upgradeConfig.Effect == "ProductionMultiplier" then
  							productionMultiplier = productionMultiplier * upgradeConfig.Value
  						end
  					end
  				end
  
  				local poopsToSpawn = math.floor(productionMultiplier)
  				local totalAmountGained = 0
  
  				for i = 1, poopsToSpawn do
  					-- Increment poops pooped count
  					data.TotalPoopsSpawned = data.TotalPoopsSpawned + 1
  					data.Stats.LifetimePoops = data.Stats.LifetimePoops + 1
  
  					local success, amountGained = givePooBucks(player, nil, "Poop spawned")
  
  					if success and amountGained then
  						totalAmountGained = totalAmountGained + amountGained
  					end
  				end
  
  				-- Update leaderstats to reflect new poops pooped count
  				updateLeaderstats(player)
  
  				-- Fire popup event
  				if totalAmountGained > 0 then  -  Edit
  03:04:58.979  === END CHUNK 11 ===  -  Edit
  03:04:58.979    -  Edit
  03:04:59.082  === CHUNK 12 ===  -  Edit
  03:04:59.082    					poopGainPopupEvent:FireClient(player, totalAmountGained)
  				end
  
  				-- Check for zone unlock notifications
  				if _G.ZoneSystem and _G.ZoneSystem.CheckZoneUnlocks then
  					_G.ZoneSystem.CheckZoneUnlocks(player)
  				end
  			end
  		end
  	end
  end))
  
  getCurrencyRemote.OnServerInvoke = function(player)
  	return getPlayerCurrency(player)
  end
  
  spendCurrencyRemote.OnServerInvoke = function(player, amount, reason)
  	return spendPooBucks(player, amount, reason)
  end
  
  rebirthRequestRemote.OnServerInvoke = function(player)
  	return performRebirth(player)
  end
  
  getRebirthInfoRemote.OnServerInvoke = function(player)
  	local data = PlayerData[player]
  	if not data then return nil end
  
  	local cost = getRebirthCost(player)
  	local currentMultiplier = getRebirthMultiplier(player)
  	local nextMultiplier = 1 + ((data.Rebirths + 1) * ShopConfig.Rebirth.MultiplierPerRebirth)
  	local canDo, reason = canRebirth(player)
  
  	return {
  		currentRebirths = data.Rebirths,
  		rebirthCost = cost,
  		currentMultiplier = currentMultiplier,
  		nextMultiplier = nextMultiplier,
  		canRebirth = canDo,
  		reason = reason,
  		currentPooBucks = data.PooBucks,
  		percentage = math.min(100, (data.PooBucks / cost) * 100)
  	}
  end
  
  -- Player Events
  table.insert(connections, Players.PlayerAdded:Connect(function(player)
  	createLeaderstats(player)
  
  	spawn(function()  -  Edit
  03:04:59.082  === END CHUNK 12 ===  -  Edit
  03:04:59.082    -  Edit
  03:04:59.183  === CHUNK 13 ===  -  Edit
  03:04:59.183    		while player.Parent do
  			wait(Config.AUTO_SAVE_INTERVAL)
  			if PlayerData[player] then
  				savePlayerData(player)
  			end
  		end
  	end)
  end))
  
  table.insert(connections, Players.PlayerRemoving:Connect(function(player)
  	if PlayerData[player] then
  		savePlayerData(player)
  		PlayerData[player] = nil
  	end
  end))
  
  for _, player in pairs(Players:GetPlayers()) do
  	createLeaderstats(player)
  end
  
  spawn(function()
  	while true do
  		wait(Config.AUTO_SAVE_INTERVAL * 2)
  		for player, _ in pairs(PlayerData) do
  			if player.Parent then
  				savePlayerData(player)
  			end
  		end
  	end
  end)
  
  game:BindToClose(function()
  	debugPrint("Server shutting down - saving all leaderstats...")
  	for player, _ in pairs(PlayerData) do
  		savePlayerData(player)
  	end
  	cleanupConnections()
  	wait(3)
  	debugPrint("All leaderstats saved!")
  end)
  
  _G.LeaderstatsManager = {
  	GetPlayerCurrency = getPlayerCurrency,
  	SpendCurrency = spendPooBucks,
  	GiveCurrency = givePooBucks,
  	GetPlayerData = function(player)
  		syncWithShopSystem(player)
  		return PlayerData[player]
  	end,
  	UpdateLeaderstats = updateLeaderstats,  -  Edit
  03:04:59.183  === END CHUNK 13 ===  -  Edit
  03:04:59.183    -  Edit
  03:04:59.285  === CHUNK 14 ===  -  Edit
  03:04:59.285    	SyncWithShopSystem = syncWithShopSystem,
  	GetRebirthMultiplier = getRebirthMultiplier,
  	GetRebirthCost = getRebirthCost,
  	CanRebirth = canRebirth,
  	PerformRebirth = performRebirth
  }
  
  debugPrint("LeaderstatsManager initialized!")
--- END leaderstats ---

Script: ShopServer (in ServerScriptService) [ServerScriptService]
Path: ServerScriptService.ShopServer
Content:
  -- ShopServer (ServerScript in ServerScriptService) - FIXED WITH CROSS-SERVER BOOST GIFTING
  local Players = game:GetService("Players")
  local ReplicatedStorage = game:GetService("ReplicatedStorage")
  local DataStoreService = game:GetService("DataStoreService")
  local MarketplaceService = game:GetService("MarketplaceService")
  
  -- Get ShopConfig
  local ShopConfig = require(ReplicatedStorage:WaitForChild("ShopConfig"))
  
  -- Debug system
  local function debugPrint(message)
  	if ShopConfig.Debug.Enabled and ShopConfig.Debug.ShowServerDebug then
  		print("[SHOP SERVER]: " .. message)
  	end
  end
  
  -- Create RemoteEvents
  local RemoteEvent_OpenShop = Instance.new("RemoteEvent")
  RemoteEvent_OpenShop.Name = "RemoteEvent_OpenShop"
  RemoteEvent_OpenShop.Parent = ReplicatedStorage
  
  local PurchaseRequest = Instance.new("RemoteEvent")
  PurchaseRequest.Name = "PurchaseRequest"
  PurchaseRequest.Parent = ReplicatedStorage
  
  local EquipPoopClientEvent = Instance.new("RemoteEvent")
  EquipPoopClientEvent.Name = "EquipPoopClientEvent"
  EquipPoopClientEvent.Parent = ReplicatedStorage
  
  local GetPlayerDataRemote = Instance.new("RemoteFunction")
  GetPlayerDataRemote.Name = "GetPlayerDataRemote"
  GetPlayerDataRemote.Parent = ReplicatedStorage
  
  local PurchaseResultEvent = Instance.new("RemoteEvent")
  PurchaseResultEvent.Name = "PurchaseResultEvent"
  PurchaseResultEvent.Parent = ReplicatedStorage
    -  Edit
  03:04:59.285  === END CHUNK 14 ===  -  Edit
  03:04:59.285    -  Edit
  03:04:59.385  === CHUNK 15 ===  -  Edit
  03:04:59.385    -- Gift System RemoteEvents
  local GiftPurchaseRequest = Instance.new("RemoteEvent")
  GiftPurchaseRequest.Name = "GiftPurchaseRequest"
  GiftPurchaseRequest.Parent = ReplicatedStorage
  
  local ValidateUsernameRemote = Instance.new("RemoteFunction")
  ValidateUsernameRemote.Name = "ValidateUsernameRemote"
  ValidateUsernameRemote.Parent = ReplicatedStorage
  
  local GiftValidationRequest = Instance.new("RemoteFunction")
  GiftValidationRequest.Name = "GiftValidationRequest" 
  GiftValidationRequest.Parent = ReplicatedStorage
  
  -- Gift Notification System
  local GiftNotificationEvent = Instance.new("RemoteEvent")
  GiftNotificationEvent.Name = "GiftNotificationEvent"
  GiftNotificationEvent.Parent = ReplicatedStorage
  
  local CheckOfflineGifts = Instance.new("RemoteFunction")
  CheckOfflineGifts.Name = "CheckOfflineGifts"
  CheckOfflineGifts.Parent = ReplicatedStorage
  
  -- DataStores
  local PlayerDataStore = DataStoreService:GetDataStore("ShopPlayerData_v3")
  local OfflineGiftsStore = DataStoreService:GetDataStore("OfflineGifts_v1")
  local GiftTrackingStore = DataStoreService:GetDataStore("GiftTracking_v1")
  local BoostGiftStore = DataStoreService:GetDataStore("BoostGifts_v1") -- NEW: For cross-server boost gifts
  
  -- Player Data Storage
  local PlayerData = {}
  
  -- Gift tracking for purchase validation
  local PendingGifts = {} -- [giftId] = {gifteeUserId, itemType, itemKey, gifterUserId, devProductId}
  
  -- Expose player data globally
  _G.ShopPlayerData = PlayerData
  
  debugPrint("ShopServer initializing with cross-server boost gifting...")
  
  -- Default player data structure
  local function createDefaultPlayerData()
  	return {
  		PooBucks = ShopConfig.StartingPooBucks or 100,
  		OwnedPoops = { ShopConfig.DefaultPoop },
  		EquippedPoop = ShopConfig.DefaultPoop,
  		OwnedUpgrades = {},
  		OwnedGamepasses = {}
  	}
  end
    -  Edit
  03:04:59.385  === END CHUNK 15 ===  -  Edit
  03:04:59.385    -  Edit
  03:04:59.486  === CHUNK 16 ===  -  Edit
  03:04:59.486    -- MEMORY MANAGEMENT
  local connections = {}
  
  local function cleanupConnections()
  	for _, connection in pairs(connections) do
  		if connection then
  			connection:Disconnect()
  		end
  	end
  	connections = {}
  end
  
  -- DATA VALIDATION
  local function validatePlayerData(data)
  	local isValid = true
  	local errors = {}
  
  	-- Validate PooBucks
  	if type(data.PooBucks) ~= "number" or data.PooBucks < 0 or data.PooBucks > 1e15 then
  		data.PooBucks = math.max(0, math.min(data.PooBucks or 0, 1e15))
  		table.insert(errors, "Invalid PooBucks")
  		isValid = false
  	end
  
  	-- Validate arrays
  	if type(data.OwnedPoops) ~= "table" then
  		data.OwnedPoops = {ShopConfig.DefaultPoop}
  		table.insert(errors, "Invalid OwnedPoops")
  		isValid = false
  	end
  
  	if type(data.OwnedUpgrades) ~= "table" then
  		data.OwnedUpgrades = {}
  		table.insert(errors, "Invalid OwnedUpgrades")
  		isValid = false
  	end
  
  	if type(data.OwnedGamepasses) ~= "table" then
  		data.OwnedGamepasses = {}
  		table.insert(errors, "Invalid OwnedGamepasses")
  		isValid = false
  	end
  
  	-- Validate equipped poop exists in owned poops
  	if not table.find(data.OwnedPoops, data.EquippedPoop) then
  		data.EquippedPoop = data.OwnedPoops[1] or ShopConfig.DefaultPoop
  		table.insert(errors, "Invalid EquippedPoop")
  		isValid = false
  	end
    -  Edit
  03:04:59.486  === END CHUNK 16 ===  -  Edit
  03:04:59.486    -  Edit
  03:04:59.591  === CHUNK 17 ===  -  Edit
  03:04:59.591    	if not isValid then
  		debugPrint("Data validation errors for player: " .. table.concat(errors, ", "))
  	end
  
  	return data
  end
  
  -- Enhanced database functions with retry logic
  local function savePlayerData(player, retries)
  	retries = retries or 3
  	local data = PlayerData[player]
  	if not data then return false end
  
  	-- Validate before saving
  	data = validatePlayerData(data)
  
  	for attempt = 1, retries do
  		local success, error = pcall(function()
  			PlayerDataStore:SetAsync(player.UserId, data)
  		end)
  
  		if success then
  			debugPrint("Saved data for " .. player.Name)
  			return true
  		else
  			debugPrint("Failed to save data for " .. player.Name .. " (Attempt " .. attempt .. "): " .. error)
  			if attempt < retries then
  				wait(1) -- Wait before retry
  			end
  		end
  	end
  
  	return false
  end
  
  local function loadPlayerData(player)
  	local success, data = pcall(function()
  		return PlayerDataStore:GetAsync(player.UserId)
  	end)
  
  	if success and data then
  		data = validatePlayerData(data)
  		local defaultData = createDefaultPlayerData()
  		for key, value in pairs(defaultData) do
  			if data[key] == nil then
  				data[key] = value
  			end
  		end
  		debugPrint("Loaded data for " .. player.Name)
  		return data  -  Edit
  03:04:59.591  === END CHUNK 17 ===  -  Edit
  03:04:59.591    -  Edit
  03:04:59.691  === CHUNK 18 ===  -  Edit
  03:04:59.691    	else
  		debugPrint("Using default data for " .. player.Name)
  		return createDefaultPlayerData()
  	end
  end
  
  -- FIXED: Cross-server boost gift management
  local function saveBoostGift(userId, gifterName, itemName, itemKey, duration)
  	local giftKey = "boost_" .. userId
  	local success, existingGifts = pcall(function()
  		return BoostGiftStore:GetAsync(giftKey) or {}
  	end)
  
  	if success then
  		table.insert(existingGifts, {
  			gifterName = gifterName,
  			itemName = itemName,
  			itemKey = itemKey,
  			duration = duration,
  			timestamp = tick()
  		})
  
  		local saveSuccess = pcall(function()
  			BoostGiftStore:SetAsync(giftKey, existingGifts)
  		end)
  
  		if saveSuccess then
  			debugPrint("Saved boost gift for user " .. userId)
  			return true
  		end
  	end
  
  	return false
  end
  
  local function getAndClearBoostGifts(userId)
  	local giftKey = "boost_" .. userId
  	local success, gifts = pcall(function()
  		return BoostGiftStore:GetAsync(giftKey) or {}
  	end)
  
  	if success and #gifts > 0 then
  		pcall(function()
  			BoostGiftStore:RemoveAsync(giftKey)
  		end)
  		return gifts
  	end
  
  	return {}
  end  -  Edit
  03:04:59.691  === END CHUNK 18 ===  -  Edit
  03:04:59.691    -  Edit
  03:04:59.797  === CHUNK 19 ===  -  Edit
  03:04:59.797    
  -- Offline gift management
  local function saveOfflineGift(userId, gifterName, itemName, itemType, itemKey)
  	local success, existingGifts = pcall(function()
  		return OfflineGiftsStore:GetAsync(userId) or {}
  	end)
  
  	if success then
  		table.insert(existingGifts, {
  			gifterName = gifterName,
  			itemName = itemName,
  			itemType = itemType,
  			itemKey = itemKey,
  			timestamp = tick()
  		})
  
  		local saveSuccess = pcall(function()
  			OfflineGiftsStore:SetAsync(userId, existingGifts)
  		end)
  
  		if saveSuccess then
  			debugPrint("Saved offline gift for user " .. userId)
  			return true
  		end
  	end
  
  	return false
  end
  
  local function getAndClearOfflineGifts(userId)
  	local success, gifts = pcall(function()
  		return OfflineGiftsStore:GetAsync(userId) or {}
  	end)
  
  	if success and #gifts > 0 then
  		pcall(function()
  			OfflineGiftsStore:RemoveAsync(userId)
  		end)
  		return gifts
  	end
  
  	return {}
  end
  
  -- Gift tracking functions
  local function hasReceivedGamepassGift(userId, gamepassKey)
  	local success, received = pcall(function()
  		return GiftTrackingStore:GetAsync("gamepass_" .. userId .. "_" .. gamepassKey)
  	end)
    -  Edit
  03:04:59.797  === END CHUNK 19 ===  -  Edit
  03:04:59.797    -  Edit
  03:04:59.897  === CHUNK 20 ===  -  Edit
  03:04:59.897    	return success and received == true
  end
  
  local function markGamepassGiftReceived(userId, gamepassKey)
  	pcall(function()
  		GiftTrackingStore:SetAsync("gamepass_" .. userId .. "_" .. gamepassKey, true)
  	end)
  end
  
  -- Sync functions
  local function syncWithLeaderstats(player)
  	local leaderstats = player:FindFirstChild("leaderstats")
  	if leaderstats then
  		local pooBucks = leaderstats:FindFirstChild("PooBucks")
  		if pooBucks and PlayerData[player] then
  			if math.abs(PlayerData[player].PooBucks - pooBucks.Value) > 0.01 then
  				debugPrint("Syncing shop data with leaderstats for " .. player.Name)
  				PlayerData[player].PooBucks = pooBucks.Value
  			end
  		end
  	end
  end
  
  local function updateLeaderstats(player)
  	local leaderstats = player:FindFirstChild("leaderstats")
  	if leaderstats and PlayerData[player] then
  		local pooBucks = leaderstats:FindFirstChild("PooBucks")
  		if pooBucks then
  			if math.abs(pooBucks.Value - PlayerData[player].PooBucks) > 0.01 then
  				debugPrint("Updating leaderstats for " .. player.Name)
  				pooBucks.Value = PlayerData[player].PooBucks
  			end
  		end
  	end
  end
  
  -- FIXED: Enhanced username validation with detailed error messages
  local function validateUsername(username, gifterPlayer)
  	debugPrint("Validating username: " .. username)
  
  	if not username or username == "" then
  		return {valid = false, message = "Please enter a username"}
  	end
  
  	if #username < 3 or #username > 20 then
  		return {valid = false, message = "Username must be 3-20 characters"}
  	end
  
  	if not string.match(username, "^[%w_]+$") then
  		return {valid = false, message = "Username contains invalid characters"}  -  Edit
  03:04:59.898  === END CHUNK 20 ===  -  Edit
  03:04:59.898    -  Edit
  03:05:00.001  === CHUNK 21 ===  -  Edit
  03:05:00.001    	end
  
  	local success, result = pcall(function()
  		return Players:GetUserIdFromNameAsync(username)
  	end)
  
  	if success and result then
  		-- Check if trying to gift to self
  		if gifterPlayer and result == gifterPlayer.UserId then
  			return {valid = false, message = "Cannot gift to yourself"}
  		end
  
  		local targetPlayer = Players:GetPlayerByUserId(result)
  		return {
  			valid = true, 
  			message = "Valid username",
  			userId = result,
  			isOnline = targetPlayer ~= nil,
  			targetPlayer = targetPlayer
  		}
  	else
  		return {valid = false, message = "Player not found"}
  	end
  end
  
  -- Purchase validation functions
  local function canAffordItem(player, category, itemKey)
  	local data = PlayerData[player]
  	if not data then return false end
  
  	local config = nil
  	if category == "Poops" then
  		config = ShopConfig.Poops[itemKey]
  	elseif category == "Upgrades" then
  		config = ShopConfig.Upgrades[itemKey]
  	elseif category == "Gamepasses" then
  		config = ShopConfig.Gamepasses[itemKey]
  	elseif category == "Boosts" then
  		config = ShopConfig.Boosts[itemKey]
  	end
  
  	if not config then return false end
  
  	if category == "Gamepasses" or category == "Boosts" then
  		return true
  	else
  		return data.PooBucks >= config.Price
  	end
  end
    -  Edit
  03:05:00.001  === END CHUNK 21 ===  -  Edit
  03:05:00.001    -  Edit
  03:05:00.104  === CHUNK 22 ===  -  Edit
  03:05:00.104    local function isItemOwned(player, category, itemKey)
  	local data = PlayerData[player]
  	if not data then return false end
  
  	if category == "Poops" then
  		return table.find(data.OwnedPoops, itemKey) ~= nil
  	elseif category == "Upgrades" then
  		return table.find(data.OwnedUpgrades, itemKey) ~= nil
  	elseif category == "Gamepasses" then
  		return table.find(data.OwnedGamepasses, itemKey) ~= nil
  	end
  
  	return false
  end
  
  -- FIXED: Grant item to player with cross-server boost support
  local function grantItemToPlayer(userId, category, itemKey, gifterName)
  	debugPrint("Granting " .. category .. " item " .. itemKey .. " to user " .. userId)
  
  	local targetPlayer = Players:GetPlayerByUserId(userId)
  	local config = nil
  
  	if category == "Gamepasses" then
  		config = ShopConfig.Gamepasses[itemKey]
  	elseif category == "Boosts" then
  		config = ShopConfig.Boosts[itemKey]
  	end
  
  	if not config then
  		debugPrint("ERROR: Config not found for " .. itemKey)
  		return false
  	end
  
  	if targetPlayer then
  		debugPrint("Target player " .. targetPlayer.Name .. " is online")
  
  		local data = PlayerData[targetPlayer]
  		if not data then
  			debugPrint("ERROR: No data found for online player " .. targetPlayer.Name)
  			return false
  		end
  
  		if category == "Gamepasses" then
  			if hasReceivedGamepassGift(userId, itemKey) then
  				debugPrint("Player already received " .. itemKey .. " as a gift")
  				return false
  			end
  
  			if not table.find(data.OwnedGamepasses, itemKey) then
  				table.insert(data.OwnedGamepasses, itemKey)  -  Edit
  03:05:00.104  === END CHUNK 22 ===  -  Edit
  03:05:00.104    -  Edit
  03:05:00.204  === CHUNK 23 ===  -  Edit
  03:05:00.204    				markGamepassGiftReceived(userId, itemKey)
  				savePlayerData(targetPlayer)
  
  				GiftNotificationEvent:FireClient(targetPlayer, gifterName or "Someone", config.Name)
  				debugPrint("Granted gamepass " .. itemKey .. " to " .. targetPlayer.Name)
  				return true
  			end
  		elseif category == "Boosts" then
  			if _G.BoostSystem and _G.BoostSystem.ActivateBoost then
  				local success = _G.BoostSystem.ActivateBoost(targetPlayer, itemKey, config.Duration)
  				if success then
  					GiftNotificationEvent:FireClient(targetPlayer, gifterName or "Someone", config.Name)
  					debugPrint("Granted boost " .. itemKey .. " to " .. targetPlayer.Name)
  					return true
  				end
  			else
  				debugPrint("ERROR: BoostSystem.ActivateBoost not available")
  				return false
  			end
  		end
  	else
  		-- FIXED: Player is offline or in different server - handle differently for boosts vs gamepasses
  		debugPrint("Target player is offline or in different server")
  
  		if category == "Boosts" then
  			-- For boosts, save to special boost gift store instead of rejecting
  			debugPrint("Saving boost gift for offline/cross-server player")
  			local success = saveBoostGift(userId, gifterName or "Someone", config.Name, itemKey, config.Duration)
  			if success then
  				debugPrint("Successfully saved boost gift for offline/cross-server player")
  				return true
  			else
  				debugPrint("Failed to save boost gift")
  				return false
  			end
  		end
  
  		if category == "Gamepasses" then
  			if hasReceivedGamepassGift(userId, itemKey) then
  				debugPrint("Player already received " .. itemKey .. " as a gift")
  				return false
  			end
  		end
  
  		local success, data = pcall(function()
  			return PlayerDataStore:GetAsync(userId)
  		end)
  
  		if success and data then
  			data = validatePlayerData(data)  -  Edit
  03:05:00.204  === END CHUNK 23 ===  -  Edit
  03:05:00.204    -  Edit
  03:05:00.308  === CHUNK 24 ===  -  Edit
  03:05:00.309    			local modified = false
  
  			if category == "Gamepasses" then
  				if not table.find(data.OwnedGamepasses or {}, itemKey) then
  					if not data.OwnedGamepasses then data.OwnedGamepasses = {} end
  					table.insert(data.OwnedGamepasses, itemKey)
  					markGamepassGiftReceived(userId, itemKey)
  					modified = true
  				end
  			end
  
  			if modified then
  				local saveSuccess = pcall(function()
  					PlayerDataStore:SetAsync(userId, data)
  				end)
  
  				if saveSuccess then
  					saveOfflineGift(userId, gifterName or "Someone", config.Name, category, itemKey)
  					debugPrint("Successfully saved gift to offline player's data")
  					return true
  				else
  					debugPrint("Failed to save gift to offline player's data")
  					return false
  				end
  			end
  		else
  			debugPrint("Failed to load offline player's data for gift")
  			return false
  		end
  	end
  
  	return false
  end
  
  -- Enhanced purchase handling
  local function processPurchase(player, category, itemKey)
  	syncWithLeaderstats(player)
  
  	local data = PlayerData[player]
  	if not data then return false, "No player data" end
  
  	local config = nil
  	if category == "Poops" then
  		config = ShopConfig.Poops[itemKey]
  	elseif category == "Upgrades" then
  		config = ShopConfig.Upgrades[itemKey]
  	elseif category == "Gamepasses" then
  		config = ShopConfig.Gamepasses[itemKey]
  	elseif category == "Boosts" then
  		config = ShopConfig.Boosts[itemKey]  -  Edit
  03:05:00.309  === END CHUNK 24 ===  -  Edit
  03:05:00.309    -  Edit
  03:05:00.412  === CHUNK 25 ===  -  Edit
  03:05:00.412    	end
  
  	if not config then return false, "Invalid item" end
  
  	debugPrint(player.Name .. " attempting to buy " .. itemKey .. " from " .. category)
  
  	if category ~= "Boosts" and isItemOwned(player, category, itemKey) then
  		debugPrint("Item already owned: " .. itemKey)
  		return false, "Already owned"
  	end
  
  	if not canAffordItem(player, category, itemKey) then
  		debugPrint("Cannot afford item: " .. itemKey)
  		return false, "Insufficient PooBucks"
  	end
  
  	if category == "Gamepasses" then
  		if config.GamepassId then
  			MarketplaceService:PromptGamePassPurchase(player, config.GamepassId)
  			return true, "Gamepass purchase prompted"
  		else
  			return false, "Invalid gamepass configuration"
  		end
  	elseif category == "Boosts" then
  		if config.DevProductId then
  			MarketplaceService:PromptProductPurchase(player, config.DevProductId)
  			return true, "Boost purchase prompted"
  		else
  			return false, "Invalid boost configuration"
  		end
  	end
  
  	-- Process regular purchase
  	data.PooBucks = data.PooBucks - config.Price
  
  	if category == "Poops" then
  		table.insert(data.OwnedPoops, itemKey)
  		debugPrint("Added poop to owned: " .. itemKey)
  	elseif category == "Upgrades" then
  		table.insert(data.OwnedUpgrades, itemKey)
  		debugPrint("Added upgrade to owned: " .. itemKey)
  	end
  
  	updateLeaderstats(player)
  	savePlayerData(player)
  
  	debugPrint("Purchase successful: " .. itemKey .. " for " .. player.Name)
  	return true, "Purchase successful"
  end
    -  Edit
  03:05:00.412  === END CHUNK 25 ===  -  Edit
  03:05:00.412    -  Edit
  03:05:00.516  === CHUNK 26 ===  -  Edit
  03:05:00.516    -- FIXED: New comprehensive gift validation function
  local function validateGiftPurchase(gifter, targetUsername, category, itemKey)
  	debugPrint("Validating gift purchase: " .. gifter.Name .. " gifting " .. category .. " " .. itemKey .. " to " .. targetUsername)
  
  	local validation = validateUsername(targetUsername, gifter)
  	if not validation.valid then
  		debugPrint("Invalid target username: " .. validation.message)
  		return {valid = false, message = validation.message}
  	end
  
  	local config = nil
  	if category == "Gamepasses" then
  		config = ShopConfig.Gamepasses[itemKey]
  	elseif category == "Boosts" then
  		config = ShopConfig.Boosts[itemKey]
  	else
  		debugPrint("Invalid category for gifting: " .. category)
  		return {valid = false, message = "This item cannot be gifted"}
  	end
  
  	if not config then
  		debugPrint("Invalid item config for gifting: " .. itemKey)
  		return {valid = false, message = "Invalid item"}
  	end
  
  	-- Check if target already received this gamepass as a gift
  	if category == "Gamepasses" then
  		if hasReceivedGamepassGift(validation.userId, itemKey) then
  			debugPrint("Target player already received " .. itemKey .. " as a gift")
  			return {valid = false, message = "Player already received this gamepass as a gift"}
  		end
  	end
  
  	-- REMOVED: No longer check for offline boost gifts since we support cross-server now
  
  	-- Check if the required DevProduct IDs exist
  	local requiredDevProductId = nil
  	if category == "Gamepasses" then
  		requiredDevProductId = config.GiftDevProductId
  	elseif category == "Boosts" then
  		requiredDevProductId = config.GiftDevProductId
  	end
  
  	if not requiredDevProductId then
  		debugPrint("No gift DevProduct ID configured for: " .. itemKey)
  		return {valid = false, message = "This item cannot be gifted"}
  	end
  
  	return {
  		valid = true,   -  Edit
  03:05:00.516  === END CHUNK 26 ===  -  Edit
  03:05:00.516    -  Edit
  03:05:00.619  === CHUNK 27 ===  -  Edit
  03:05:00.619    		message = "Gift validation successful",
  		userId = validation.userId,
  		isOnline = validation.isOnline,
  		targetPlayer = validation.targetPlayer,
  		devProductId = requiredDevProductId,
  		config = config
  	}
  end
  
  -- Enhanced gift purchase handling with separate DevProducts
  local function processGiftPurchase(gifter, targetUsername, category, itemKey)
  	debugPrint("Processing gift purchase: " .. gifter.Name .. " gifting " .. category .. " " .. itemKey .. " to " .. targetUsername)
  
  	-- Validate the gift BEFORE prompting purchase
  	local validation = validateGiftPurchase(gifter, targetUsername, category, itemKey)
  	if not validation.valid then
  		debugPrint("Gift validation failed: " .. validation.message)
  		return false, validation.message
  	end
  
  	-- Create gift tracking ID
  	local giftId = "gift_" .. gifter.UserId .. "_" .. tick() .. "_" .. math.random(1000, 9999)
  
  	-- Store pending gift info
  	PendingGifts[giftId] = {
  		gifteeUserId = validation.userId,
  		gifterUserId = gifter.UserId,
  		gifterName = gifter.Name,
  		itemType = category,
  		itemKey = itemKey,
  		devProductId = validation.devProductId,
  		targetIsOnline = validation.isOnline
  	}
  
  	-- Prompt purchase with the GIFT DevProduct ID
  	MarketplaceService:PromptProductPurchase(gifter, validation.devProductId)
  	debugPrint("Prompted gift purchase with DevProduct ID: " .. validation.devProductId)
  
  	return true, "Gift purchase prompted"
  end
  
  local function equipPoop(player, poopKey)
  	local data = PlayerData[player]
  	if not data then return false, "No player data" end
  
  	if not table.find(data.OwnedPoops, poopKey) then
  		debugPrint("Cannot equip unowned poop: " .. poopKey)
  		return false, "Poop not owned"
  	end
    -  Edit
  03:05:00.619  === END CHUNK 27 ===  -  Edit
  03:05:00.619    -  Edit
  03:05:00.723  === CHUNK 28 ===  -  Edit
  03:05:00.723    	data.EquippedPoop = poopKey
  	EquipPoopClientEvent:FireClient(player, poopKey)
  	savePlayerData(player)
  
  	debugPrint("Equipped poop for " .. player.Name .. ": " .. poopKey)
  	return true, "Equipped successfully"
  end
  
  -- FIXED: Process boost gifts when player joins
  local function processBoostGifts(player)
  	local boostGifts = getAndClearBoostGifts(player.UserId)
  
  	if #boostGifts > 0 then
  		debugPrint("Processing " .. #boostGifts .. " boost gifts for " .. player.Name)
  
  		for _, giftData in pairs(boostGifts) do
  			if _G.BoostSystem and _G.BoostSystem.ActivateBoost then
  				local success = _G.BoostSystem.ActivateBoost(player, giftData.itemKey, giftData.duration)
  				if success then
  					GiftNotificationEvent:FireClient(player, giftData.gifterName, giftData.itemName)
  					debugPrint("Applied boost gift: " .. giftData.itemKey .. " from " .. giftData.gifterName)
  				end
  			end
  		end
  	end
  end
  
  -- Player Events
  table.insert(connections, Players.PlayerAdded:Connect(function(player)
  	debugPrint("Player joined: " .. player.Name)
  
  	PlayerData[player] = loadPlayerData(player)
  
  	spawn(function()
  		player:WaitForChild("leaderstats", 10)
  		wait(1)
  		syncWithLeaderstats(player)
  
  		wait(2)
  		if PlayerData[player] and PlayerData[player].EquippedPoop then
  			EquipPoopClientEvent:FireClient(player, PlayerData[player].EquippedPoop)
  		end
  
  		-- Process any pending boost gifts
  		wait(3) -- Wait for boost system to load
  		processBoostGifts(player)
  	end)
  
  	-- Auto-save
  	local saveConnection = spawn(function()  -  Edit
  03:05:00.723  === END CHUNK 28 ===  -  Edit
  03:05:00.724    -  Edit
  03:05:00.828  === CHUNK 29 ===  -  Edit
  03:05:00.828    		while player.Parent do
  			wait(30)
  			if PlayerData[player] then
  				syncWithLeaderstats(player)
  				savePlayerData(player)
  			end
  		end
  	end)
  
  	table.insert(connections, saveConnection)
  end))
  
  table.insert(connections, Players.PlayerRemoving:Connect(function(player)
  	debugPrint("Player leaving: " .. player.Name)
  
  	if PlayerData[player] then
  		syncWithLeaderstats(player)
  		savePlayerData(player)
  		PlayerData[player] = nil
  	end
  end))
  
  -- RemoteEvent Handlers
  table.insert(connections, PurchaseRequest.OnServerEvent:Connect(function(player, action, category, itemKey)
  	debugPrint("Purchase request from " .. player.Name .. ": " .. action .. " " .. category .. " " .. itemKey)
  
  	if action == "Buy" then
  		local success, message = processPurchase(player, category, itemKey)
  		PurchaseResultEvent:FireClient(player, success, message, category, itemKey)
  
  		if success then
  			debugPrint("Purchase successful: " .. player.Name .. " bought " .. itemKey)
  		else
  			debugPrint("Purchase failed: " .. player.Name .. " - " .. message)
  		end
  
  	elseif action == "Equip" and category == "Poops" then
  		local success, message = equipPoop(player, itemKey)
  		PurchaseResultEvent:FireClient(player, success, message, category, itemKey)
  
  		if success then
  			debugPrint("Equip successful: " .. player.Name .. " equipped " .. itemKey)
  		else
  			debugPrint("Equip failed: " .. player.Name .. " - " .. message)
  		end
  	end
  end))
  
  GiftValidationRequest.OnServerInvoke = function(player, targetUsername, category, itemKey)
  	local validation = validateGiftPurchase(player, targetUsername, category, itemKey)  -  Edit
  03:05:00.828  === END CHUNK 29 ===  -  Edit
  03:05:00.828    -  Edit
  03:05:00.946  === CHUNK 30 ===  -  Edit
  03:05:00.946    	return validation
  end
  
  table.insert(connections, GiftPurchaseRequest.OnServerEvent:Connect(function(player, targetUsername, category, itemKey)
  	debugPrint("Gift purchase request from " .. player.Name .. " to " .. targetUsername .. ": " .. category .. " " .. itemKey)
  
  	local success, message = processGiftPurchase(player, targetUsername, category, itemKey)
  
  	if not success then
  		debugPrint("Gift purchase failed: " .. message)
  	end
  end))
  
  ValidateUsernameRemote.OnServerInvoke = function(player, username)
  	return validateUsername(username, player)
  end
  
  GetPlayerDataRemote.OnServerInvoke = function(player)
  	syncWithLeaderstats(player)
  	return PlayerData[player] or createDefaultPlayerData()
  end
  
  CheckOfflineGifts.OnServerInvoke = function(player)
  	return getAndClearOfflineGifts(player.UserId)
  end
  
  -- Gamepass Purchase Handling
  table.insert(connections, MarketplaceService.PromptGamePassPurchaseFinished:Connect(function(player, gamepassId, wasPurchased)
  	if wasPurchased then
  		debugPrint("Gamepass purchased: " .. player.Name .. " - " .. gamepassId)
  
  		for itemKey, config in pairs(ShopConfig.Gamepasses) do
  			if config.GamepassId == gamepassId then
  				local data = PlayerData[player]
  				if data then
  					table.insert(data.OwnedGamepasses, itemKey)
  					savePlayerData(player)
  					debugPrint("Added gamepass to player: " .. itemKey)
  				end
  				break
  			end
  		end
  	end
  end))
  
  -- Enhanced DevProduct Purchase Handling with separate gift DevProducts
  MarketplaceService.ProcessReceipt = function(receiptInfo)
  	local player = Players:GetPlayerByUserId(receiptInfo.PlayerId)
  	if not player then
  		return Enum.ProductPurchaseDecision.NotProcessedYet  -  Edit
  03:05:00.947  === END CHUNK 30 ===  -  Edit
  03:05:00.947    -  Edit
  03:05:01.048  === CHUNK 31 ===  -  Edit
  03:05:01.048    	end
  
  	debugPrint("Processing DevProduct purchase: " .. receiptInfo.ProductId .. " for " .. player.Name)
  
  	-- Check if this was a gift purchase (using gift DevProduct IDs)
  	local giftInfo = nil
  	for giftId, info in pairs(PendingGifts) do
  		if info.gifterUserId == player.UserId and info.devProductId == receiptInfo.ProductId then
  			giftInfo = info
  			PendingGifts[giftId] = nil -- Remove from pending
  			break
  		end
  	end
  
  	if giftInfo then
  		-- This was a GIFT purchase
  		debugPrint("Processing GIFT: " .. giftInfo.itemType .. " " .. giftInfo.itemKey .. " to user " .. giftInfo.gifteeUserId)
  
  		local success = grantItemToPlayer(giftInfo.gifteeUserId, giftInfo.itemType, giftInfo.itemKey, giftInfo.gifterName)
  		if success then
  			debugPrint("Gift successfully granted!")
  			return Enum.ProductPurchaseDecision.PurchaseGranted
  		else
  			debugPrint("Failed to grant gift")
  			return Enum.ProductPurchaseDecision.NotProcessedYet
  		end
  	else
  		-- Check for regular boost self-purchases
  		for boostKey, config in pairs(ShopConfig.Boosts) do
  			if config.DevProductId == receiptInfo.ProductId then
  				debugPrint("Regular boost SELF-purchase - activating for " .. player.Name)
  
  				if _G.BoostSystem and _G.BoostSystem.ActivateBoost then
  					local success = _G.BoostSystem.ActivateBoost(player, boostKey, config.Duration)
  					if success then
  						debugPrint("Boost self-purchase successful: " .. boostKey .. " for " .. player.Name)
  						return Enum.ProductPurchaseDecision.PurchaseGranted
  					else
  						debugPrint("Failed to activate boost: " .. boostKey .. " for " .. player.Name)
  						return Enum.ProductPurchaseDecision.NotProcessedYet
  					end
  				else
  					debugPrint("ERROR: BoostSystem not available")
  					return Enum.ProductPurchaseDecision.NotProcessedYet
  				end
  			end
  		end
  	end
  
  	debugPrint("Unknown DevProduct ID: " .. receiptInfo.ProductId)  -  Edit
  03:05:01.049  === END CHUNK 31 ===  -  Edit
  03:05:01.049    -  Edit
  03:05:01.152  === CHUNK 32 ===  -  Edit
  03:05:01.152    	return Enum.ProductPurchaseDecision.NotProcessedYet
  end
  
  -- Enhanced shutdown handling
  game:BindToClose(function()
  	debugPrint("Server shutting down - saving all shop data...")
  	for player, data in pairs(PlayerData) do
  		if player.Parent then
  			syncWithLeaderstats(player)
  			savePlayerData(player)
  		end
  	end
  	cleanupConnections()
  	wait(3)
  	debugPrint("All shop data saved!")
  end)
  
  debugPrint("ShopServer initialized successfully with cross-server boost gifting!")
--- END ShopServer ---

Script: BoostsServer (in ServerScriptService) [ServerScriptService]
Path: ServerScriptService.BoostsServer
Content:
  -- BoostServer (ServerScript in ServerScriptService) - UPDATED WITH SHOPCONFIG INTEGRATION
  local Players = game:GetService("Players")
  local ReplicatedStorage = game:GetService("ReplicatedStorage")
  local DataStoreService = game:GetService("DataStoreService")
  local MarketplaceService = game:GetService("MarketplaceService")
  local RunService = game:GetService("RunService")
  
  -- Get ShopConfig
  local ShopConfig = require(ReplicatedStorage:WaitForChild("ShopConfig"))
  
  -- Debug system
  local function debugPrint(message)
  	if ShopConfig.Debug.Enabled and ShopConfig.Debug.ShowBoostDebug then
  		print("[BOOST SERVER]: " .. message)
  	end
  end
  
  -- DataStore for boost persistence
  local BoostDataStore = DataStoreService:GetDataStore("PlayerBoosts_v3")
  
  -- Create RemoteEvents for boost system
  local BoostActivatedEvent = Instance.new("RemoteEvent")
  BoostActivatedEvent.Name = "BoostActivatedEvent"
  BoostActivatedEvent.Parent = ReplicatedStorage
  
  local GetActiveBoostsRemote = Instance.new("RemoteFunction")
  GetActiveBoostsRemote.Name = "GetActiveBoostsRemote"  -  Edit
  03:05:01.153  === END CHUNK 32 ===  -  Edit
  03:05:01.153    -  Edit
  03:05:01.256  === CHUNK 33 ===  -  Edit
  03:05:01.257    GetActiveBoostsRemote.Parent = ReplicatedStorage
  
  local BoostUpdatedEvent = Instance.new("RemoteEvent")
  BoostUpdatedEvent.Name = "BoostUpdatedEvent"
  BoostUpdatedEvent.Parent = ReplicatedStorage
  
  local BoostPurchaseRequest = Instance.new("RemoteEvent")
  BoostPurchaseRequest.Name = "BoostPurchaseRequest"
  BoostPurchaseRequest.Parent = ReplicatedStorage
  
  -- Player boost storage with remaining time
  local PlayerBoosts = {}
  
  debugPrint("BoostServer initializing with ShopConfig integration...")
  
  -- Create boost sounds
  local boostActivatedSound = Instance.new("Sound")
  boostActivatedSound.SoundId = ShopConfig.Sounds.PurchaseSuccess
  boostActivatedSound.Volume = ShopConfig.Sounds.Volumes.Purchase
  boostActivatedSound.Parent = workspace
  
  -- BOOST MANAGEMENT FUNCTIONS
  local function savePlayerBoosts(player)
  	local data = PlayerBoosts[player]
  	if not data then return false end
  
  	-- Convert to saveable format
  	local saveData = {}
  	for boostKey, boostInfo in pairs(data) do
  		saveData[boostKey] = {
  			remainingTime = boostInfo.remainingTime,
  			effect = boostInfo.config.Effect,
  			value = boostInfo.config.Value
  		}
  	end
  
  	local success, error = pcall(function()
  		BoostDataStore:SetAsync(player.UserId, saveData)
  	end)
  
  	if success then
  		debugPrint("Saved boosts for " .. player.Name)
  		return true
  	else
  		debugPrint("Failed to save boosts for " .. player.Name .. ": " .. error)
  		return false
  	end
  end
  
  local function loadPlayerBoosts(player)  -  Edit
  03:05:01.257  === END CHUNK 33 ===  -  Edit
  03:05:01.258    -  Edit
  03:05:01.360  === CHUNK 34 ===  -  Edit
  03:05:01.360    	local success, data = pcall(function()
  		return BoostDataStore:GetAsync(player.UserId)
  	end)
  
  	if success and data then
  		debugPrint("Loaded boost data for " .. player.Name)
  
  		local loadedBoosts = {}
  		local currentTime = tick()
  
  		for boostKey, boostInfo in pairs(data) do
  			if boostInfo.remainingTime > 0 and ShopConfig.Boosts[boostKey] then
  				loadedBoosts[boostKey] = {
  					remainingTime = boostInfo.remainingTime,
  					config = ShopConfig.Boosts[boostKey],
  					lastUpdate = currentTime
  				}
  				debugPrint("Restored active boost: " .. boostKey .. " for " .. player.Name .. " (" .. boostInfo.remainingTime .. "s remaining)")
  			else
  				debugPrint("Expired/invalid boost removed: " .. boostKey .. " for " .. player.Name)
  			end
  		end
  
  		return loadedBoosts
  	else
  		debugPrint("No boost data found for " .. player.Name)
  		return {}
  	end
  end
  
  local function activateBoost(player, boostKey, duration)
  	debugPrint("Activating boost " .. boostKey .. " for " .. player.Name .. " (Duration: " .. duration .. "s)")
  
  	local config = ShopConfig.Boosts[boostKey]
  	if not config then
  		debugPrint("ERROR: Boost config not found for " .. boostKey)
  		return false
  	end
  
  	if not PlayerBoosts[player] then
  		PlayerBoosts[player] = {}
  	end
  
  	local currentTime = tick()
  
  	-- Check if boost already exists (stacking)
  	if PlayerBoosts[player][boostKey] then
  		if config.Stackable then
  			debugPrint("Stacking boost " .. boostKey .. " for " .. player.Name)
  			PlayerBoosts[player][boostKey].remainingTime = PlayerBoosts[player][boostKey].remainingTime + duration  -  Edit
  03:05:01.360  === END CHUNK 34 ===  -  Edit
  03:05:01.360    -  Edit
  03:05:01.465  === CHUNK 35 ===  -  Edit
  03:05:01.465    			PlayerBoosts[player][boostKey].lastUpdate = currentTime
  		else
  			debugPrint("Refreshing non-stackable boost " .. boostKey .. " for " .. player.Name)
  			PlayerBoosts[player][boostKey].remainingTime = duration
  			PlayerBoosts[player][boostKey].lastUpdate = currentTime
  		end
  	else
  		debugPrint("Creating new boost " .. boostKey .. " for " .. player.Name)
  		PlayerBoosts[player][boostKey] = {
  			remainingTime = duration,
  			config = config,
  			lastUpdate = currentTime
  		}
  	end
  
  	local remainingTime = PlayerBoosts[player][boostKey].remainingTime
  
  	-- Play sound
  	boostActivatedSound:Play()
  
  	-- Notify client
  	BoostActivatedEvent:FireClient(player, boostKey, remainingTime)
  
  	-- Save to datastore
  	savePlayerBoosts(player)
  
  	-- Apply boost effects
  	applyBoostEffects(player, boostKey, config)
  
  	debugPrint("Boost " .. boostKey .. " activated for " .. player.Name .. " - Remaining: " .. remainingTime .. "s")
  	return true
  end
  
  local function removeBoost(player, boostKey)
  	debugPrint("Removing boost " .. boostKey .. " for " .. player.Name)
  
  	if PlayerBoosts[player] and PlayerBoosts[player][boostKey] then
  		local config = PlayerBoosts[player][boostKey].config
  		PlayerBoosts[player][boostKey] = nil
  
  		-- Remove boost effects
  		removeBoostEffects(player, boostKey, config)
  
  		-- Save changes
  		savePlayerBoosts(player)
  
  		-- Notify client
  		BoostUpdatedEvent:FireClient(player, boostKey, 0)
  
  		debugPrint("Removed boost " .. boostKey .. " for " .. player.Name)  -  Edit
  03:05:01.465  === END CHUNK 35 ===  -  Edit
  03:05:01.465    -  Edit
  03:05:01.569  === CHUNK 36 ===  -  Edit
  03:05:01.569    	end
  end
  
  -- Update boost timers (only decrements when player is online)
  local function updateBoostTimers(player, deltaTime)
  	if not PlayerBoosts[player] then return end
  
  	local currentTime = tick()
  	local boostsToRemove = {}
  
  	for boostKey, boostInfo in pairs(PlayerBoosts[player]) do
  		local timeSinceUpdate = currentTime - boostInfo.lastUpdate
  		boostInfo.remainingTime = boostInfo.remainingTime - timeSinceUpdate
  		boostInfo.lastUpdate = currentTime
  
  		if boostInfo.remainingTime <= 0 then
  			table.insert(boostsToRemove, boostKey)
  		else
  			BoostUpdatedEvent:FireClient(player, boostKey, boostInfo.remainingTime)
  		end
  	end
  
  	for _, boostKey in pairs(boostsToRemove) do
  		removeBoost(player, boostKey)
  	end
  end
  
  local function getActiveBoosts(player)
  	if not PlayerBoosts[player] then return {} end
  
  	local activeBoosts = {}
  
  	for boostKey, boostInfo in pairs(PlayerBoosts[player]) do
  		if boostInfo.remainingTime > 0 then
  			table.insert(activeBoosts, {
  				boostKey = boostKey,
  				timeLeft = boostInfo.remainingTime,
  				config = boostInfo.config
  			})
  		end
  	end
  
  	return activeBoosts
  end
  
  -- BOOST EFFECTS SYSTEM
  function applyBoostEffects(player, boostKey, config)
  	debugPrint("Applying boost effects for " .. boostKey .. ": " .. config.Effect .. " x" .. config.Value)
  
  	if not _G.PlayerBoostEffects then  -  Edit
  03:05:01.569  === END CHUNK 36 ===  -  Edit
  03:05:01.569    -  Edit
  03:05:01.673  === CHUNK 37 ===  -  Edit
  03:05:01.673    		_G.PlayerBoostEffects = {}
  	end
  
  	if not _G.PlayerBoostEffects[player] then
  		_G.PlayerBoostEffects[player] = {}
  	end
  
  	_G.PlayerBoostEffects[player][boostKey] = {
  		effect = config.Effect,
  		value = config.Value
  	}
  
  	if config.Effect == "CurrencyMultiplier" then
  		debugPrint("Currency multiplier applied: x" .. config.Value)
  
  	elseif config.Effect == "ProductionMultiplier" then
  		debugPrint("Production multiplier applied: x" .. config.Value)
  
  	elseif config.Effect == "SpeedMultiplier" then
  		if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
  			local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
  			local baseSpeed = 16
  
  			-- Calculate total speed multiplier
  			local totalMultiplier = 1
  			for _, boost in pairs(_G.PlayerBoostEffects[player]) do
  				if boost.effect == "SpeedMultiplier" then
  					totalMultiplier = totalMultiplier * boost.value
  				end
  			end
  
  			humanoid.WalkSpeed = baseSpeed * totalMultiplier
  			debugPrint("Speed boost applied: " .. humanoid.WalkSpeed)
  		end
  	end
  end
  
  function removeBoostEffects(player, boostKey, config)
  	debugPrint("Removing boost effects for " .. boostKey)
  
  	if _G.PlayerBoostEffects and _G.PlayerBoostEffects[player] then
  		_G.PlayerBoostEffects[player][boostKey] = nil
  	end
  
  	if config.Effect == "SpeedMultiplier" then
  		if player.Character and player.Character:FindFirstChildOfClass("Humanoid") then
  			local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
  
  			local newSpeed = 16
  			if _G.PlayerBoostEffects and _G.PlayerBoostEffects[player] then  -  Edit
  03:05:01.673  === END CHUNK 37 ===  -  Edit
  03:05:01.673    -  Edit
  03:05:01.779  === CHUNK 38 ===  -  Edit
  03:05:01.779    				for _, boost in pairs(_G.PlayerBoostEffects[player]) do
  					if boost.effect == "SpeedMultiplier" then
  						newSpeed = newSpeed * boost.value
  					end
  				end
  			end
  
  			humanoid.WalkSpeed = newSpeed
  			debugPrint("Speed reset to: " .. newSpeed)
  		end
  	end
  end
  
  -- GLOBAL HELPER FUNCTIONS
  _G.BoostSystem = {
  	GetEffectMultiplier = function(player, effectType)
  		local multiplier = 1
  		if _G.PlayerBoostEffects and _G.PlayerBoostEffects[player] then
  			for _, boost in pairs(_G.PlayerBoostEffects[player]) do
  				if boost.effect == effectType then
  					multiplier = multiplier * boost.value
  				end
  			end
  		end
  		return multiplier
  	end,
  
  	HasActiveBoosts = function(player)
  		return _G.PlayerBoostEffects and _G.PlayerBoostEffects[player] and next(_G.PlayerBoostEffects[player]) ~= nil
  	end,
  
  	GetPlayerBoosts = function(player)
  		return _G.PlayerBoostEffects and _G.PlayerBoostEffects[player] or {}
  	end,
  
  	ActivateBoost = activateBoost
  }
  
  -- BOOST TIMER MONITORING
  spawn(function()
  	while true do
  		wait(1)
  
  		for player, _ in pairs(PlayerBoosts) do
  			if player.Parent then
  				updateBoostTimers(player, 1)
  			end
  		end
  	end
  end)  -  Edit
  03:05:01.779  === END CHUNK 38 ===  -  Edit
  03:05:01.780    -  Edit
  03:05:01.881  === CHUNK 39 ===  -  Edit
  03:05:01.881    
  -- REMOTE EVENT HANDLERS
  GetActiveBoostsRemote.OnServerInvoke = function(player)
  	debugPrint("Client requesting active boosts for " .. player.Name)
  	return getActiveBoosts(player)
  end
  
  BoostPurchaseRequest.OnServerEvent:Connect(function(player, boostKey)
  	debugPrint("Boost purchase request: " .. boostKey .. " from " .. player.Name)
  
  	local config = ShopConfig.Boosts[boostKey]
  	if not config then
  		debugPrint("Invalid boost key: " .. boostKey)
  		return
  	end
  
  	if not config.DevProductId then
  		debugPrint("No DevProduct ID configured for boost: " .. boostKey)
  		return
  	end
  
  	MarketplaceService:PromptProductPurchase(player, config.DevProductId)
  end)
  
  -- PLAYER EVENTS
  Players.PlayerAdded:Connect(function(player)
  	debugPrint("Player joined: " .. player.Name)
  
  	PlayerBoosts[player] = loadPlayerBoosts(player)
  
  	if not _G.PlayerBoostEffects then
  		_G.PlayerBoostEffects = {}
  	end
  	_G.PlayerBoostEffects[player] = {}
  
  	-- Apply loaded boosts
  	for boostKey, boostInfo in pairs(PlayerBoosts[player]) do
  		applyBoostEffects(player, boostKey, boostInfo.config)
  		debugPrint("Resumed boost " .. boostKey .. " for " .. player.Name .. " with " .. boostInfo.remainingTime .. "s remaining")
  	end
  
  	-- Auto-save boosts
  	spawn(function()
  		while player.Parent do
  			wait(60)
  			if PlayerBoosts[player] then
  				savePlayerBoosts(player)
  			end
  		end
  	end)  -  Edit
  03:05:01.882  === END CHUNK 39 ===  -  Edit
  03:05:01.882    -  Edit
  03:05:01.985  === CHUNK 40 ===  -  Edit
  03:05:01.985    end)
  
  Players.PlayerRemoving:Connect(function(player)
  	debugPrint("Player leaving: " .. player.Name)
  
  	if PlayerBoosts[player] then
  		savePlayerBoosts(player)
  		PlayerBoosts[player] = nil
  	end
  
  	if _G.PlayerBoostEffects and _G.PlayerBoostEffects[player] then
  		_G.PlayerBoostEffects[player] = nil
  	end
  end)
  
  -- CHARACTER RESPAWN HANDLING
  Players.PlayerAdded:Connect(function(player)
  	player.CharacterAdded:Connect(function(character)
  		wait(1)
  
  		-- Reapply speed boosts
  		if _G.PlayerBoostEffects and _G.PlayerBoostEffects[player] then
  			local speedMultiplier = 1
  			for _, boost in pairs(_G.PlayerBoostEffects[player]) do
  				if boost.effect == "SpeedMultiplier" then
  					speedMultiplier = speedMultiplier * boost.value
  				end
  			end
  
  			if speedMultiplier > 1 then
  				local humanoid = character:FindFirstChildOfClass("Humanoid")
  				if humanoid then
  					humanoid.WalkSpeed = 16 * speedMultiplier
  					debugPrint("Reapplied speed boost for " .. player.Name .. ": " .. humanoid.WalkSpeed)
  				end
  			end
  		end
  	end)
  end)
  
  -- SHUTDOWN HANDLING
  game:BindToClose(function()
  	debugPrint("Server shutting down - saving all boost data...")
  	for player, _ in pairs(PlayerBoosts) do
  		if player.Parent then
  			savePlayerBoosts(player)
  		end
  	end
  	wait(3)
  	debugPrint("All boost data saved!")  -  Edit
  03:05:01.985  === END CHUNK 40 ===  -  Edit
  03:05:01.985    -  Edit
  03:05:02.090  === CHUNK 41 ===  -  Edit
  03:05:02.090    end)
  
  debugPrint("BoostServer initialized successfully!")
--- END BoostsServer ---

Script: R6 Script (in ServerScriptService) [ServerScriptService]
Path: ServerScriptService.R6 Script
Content:
  --Put this inside of 'ServerScriptService'.
  --Workspace works as well, but I'd recommend the above.
  
  --This will change all player's characters into R6 1.0.
  --You can either modify this script or use another script to change the player's 'package'.
  script:WaitForChild("R6 Camera").Parent = game.StarterPlayer.StarterPlayerScripts
  script:WaitForChild("R6").Parent = game:GetService("ReplicatedStorage")
  game.Players.PlayerAdded:connect(function(p)
  	p.CharacterAdded:connect(function(c)
  		if not p.Character:FindFirstChild("R6") then
  			game.Workspace:WaitForChild(p.Name)
  			local r = game:GetService("ReplicatedStorage"):WaitForChild("R6"):Clone()
  			r.Name = p.Name
  			r.Parent = game.Workspace
  			r.HumanoidRootPart.CFrame = CFrame.new(c.HumanoidRootPart.Position)
  			r:WaitForChild("Body Colors")
  			c:WaitForChild("Body Colors")
  			local b1 = r["Body Colors"]
  			local b2 = c["Body Colors"]
  			b1.HeadColor = b2.HeadColor
  			b1.LeftArmColor = b2.LeftArmColor
  			b1.LeftLegColor = b2.LeftLegColor
  			b1.RightArmColor = b2.RightArmColor
  			b1.RightLegColor = b2.RightLegColor
  			b1.TorsoColor = b2.TorsoColor
  			r:WaitForChild("Head"):WaitForChild("face").Texture = c.Head.face.Texture
  			for _,h in pairs(c:GetChildren()) do
  				if h.ClassName == "Accessory" or h.ClassName == "Hat" or h.ClassName == "Shirt" or h.ClassName == "Pants" or h.ClassName == "Shirt Graphic" then
  					h.Parent = game.Workspace
  					h.Parent = r
  				end
  			end
  			c:Destroy()
  			p.Character = r
  			wait()
  			p.Character:WaitForChild("Animate").Disabled = false
  		end
  	end)
  end)
--- END R6 Script ---

LocalScript: R6 Camera (in R6 Script) [ServerScriptService]  -  Edit
  03:05:02.090  === END CHUNK 41 ===  -  Edit
  03:05:02.090    -  Edit
  03:05:02.195  === CHUNK 42 ===  -  Edit
  03:05:02.195  Path: ServerScriptService.R6 Script.R6 Camera
Content:
  repeat wait() until game.Players.LocalPlayer.Character ~= nil
  game.Workspace.CurrentCamera.CameraSubject = game.Players.LocalPlayer.Character.Humanoid
  game.Workspace.CurrentCamera.CameraType = "Custom"
  game.Players.LocalPlayer.Character.Humanoid.DisplayDistanceType = "None"
  game.Players.LocalPlayer.Changed:connect(function (p)
  	repeat wait() until game.Players.LocalPlayer.Character ~= nil
  	game.Workspace.CurrentCamera.CameraSubject = game.Players.LocalPlayer.Character.Humanoid
  	game.Workspace.CurrentCamera.CameraType = "Custom"
  	game.Players.LocalPlayer.Character.Humanoid.DisplayDistanceType = "None"
  end)
--- END R6 Camera ---

LocalScript: Animate (in R6) [ServerScriptService]
Path: ServerScriptService.R6 Script.R6.Animate
Content:
  function   waitForChild(parent, childName)
  	local child = parent:findFirstChild(childName)
  	if child then return child end
  	while true do
  		child = parent.ChildAdded:wait()
  		if child.Name==childName then return child end
  	end
  end
  
  local Figure = script.Parent
  local Torso = waitForChild(Figure, "Torso")
  local RightShoulder = waitForChild(Torso, "Right Shoulder")
  local LeftShoulder = waitForChild(Torso, "Left Shoulder")
  local RightHip = waitForChild(Torso, "Right Hip")
  local LeftHip = waitForChild(Torso, "Left Hip")
  local Neck = waitForChild(Torso, "Neck")
  local Humanoid = waitForChild(Figure, "Humanoid")
  local pose = "Standing"
  
  local currentAnim = ""
  local currentAnimInstance = nil
  local currentAnimTrack = nil
  local currentAnimKeyframeHandler = nil
  local currentAnimSpeed = 1.0
  local animTable = {}
  local animNames = { 
  	idle = 	{	
  				{ id = "http://www.roblox.com/asset/?id=180435571", weight = 9 },
  				{ id = "http://www.roblox.com/asset/?id=180435792", weight = 1 }
  			},
  	walk = 	{ 	
  				{ id = "http://www.roblox.com/asset/?id=180426354", weight = 10 } 
  			},   -  Edit
  03:05:02.195  === END CHUNK 42 ===  -  Edit
  03:05:02.195    -  Edit
  03:05:02.298  === CHUNK 43 ===  -  Edit
  03:05:02.298    	run = 	{
  				{ id = "run.xml", weight = 10 } 
  			}, 
  	jump = 	{
  				{ id = "http://www.roblox.com/asset/?id=125750702", weight = 10 } 
  			}, 
  	fall = 	{
  				{ id = "http://www.roblox.com/asset/?id=180436148", weight = 10 } 
  			}, 
  	climb = {
  				{ id = "http://www.roblox.com/asset/?id=180436334", weight = 10 } 
  			}, 
  	sit = 	{
  				{ id = "http://www.roblox.com/asset/?id=178130996", weight = 10 } 
  			},	
  	toolnone = {
  				{ id = "http://www.roblox.com/asset/?id=182393478", weight = 10 } 
  			},
  	toolslash = {
  				{ id = "http://www.roblox.com/asset/?id=129967390", weight = 10 } 
  --				{ id = "slash.xml", weight = 10 } 
  			},
  	toollunge = {
  				{ id = "http://www.roblox.com/asset/?id=129967478", weight = 10 } 
  			},
  	wave = {
  				{ id = "http://www.roblox.com/asset/?id=128777973", weight = 10 } 
  			},
  	point = {
  				{ id = "http://www.roblox.com/asset/?id=128853357", weight = 10 } 
  			},
  	dance1 = {
  				{ id = "http://www.roblox.com/asset/?id=182435998", weight = 10 }, 
  				{ id = "http://www.roblox.com/asset/?id=182491037", weight = 10 }, 
  				{ id = "http://www.roblox.com/asset/?id=182491065", weight = 10 } 
  			},
  	dance2 = {
  				{ id = "http://www.roblox.com/asset/?id=182436842", weight = 10 }, 
  				{ id = "http://www.roblox.com/asset/?id=182491248", weight = 10 }, 
  				{ id = "http://www.roblox.com/asset/?id=182491277", weight = 10 } 
  			},
  	dance3 = {
  				{ id = "http://www.roblox.com/asset/?id=182436935", weight = 10 }, 
  				{ id = "http://www.roblox.com/asset/?id=182491368", weight = 10 }, 
  				{ id = "http://www.roblox.com/asset/?id=182491423", weight = 10 } 
  			},
  	laugh = {
  				{ id = "http://www.roblox.com/asset/?id=129423131", weight = 10 } 
  			},
  	cheer = {  -  Edit
  03:05:02.299  === END CHUNK 43 ===  -  Edit
  03:05:02.299    -  Edit
  03:05:02.402  === CHUNK 44 ===  -  Edit
  03:05:02.402    				{ id = "http://www.roblox.com/asset/?id=129423030", weight = 10 } 
  			},
  }
  local dances = {"dance1", "dance2", "dance3"}
  
  -- Existance in this list signifies that it is an emote, the value indicates if it is a looping emote
  local emoteNames = { wave = false, point = false, dance1 = true, dance2 = true, dance3 = true, laugh = false, cheer = false}
  
  function configureAnimationSet(name, fileList)
  	if (animTable[name] ~= nil) then
  		for _, connection in pairs(animTable[name].connections) do
  			connection:disconnect()
  		end
  	end
  	animTable[name] = {}
  	animTable[name].count = 0
  	animTable[name].totalWeight = 0	
  	animTable[name].connections = {}
  
  	-- check for config values
  	local config = script:FindFirstChild(name)
  	if (config ~= nil) then
  --		print("Loading anims " .. name)
  		table.insert(animTable[name].connections, config.ChildAdded:connect(function(child) configureAnimationSet(name, fileList) end))
  		table.insert(animTable[name].connections, config.ChildRemoved:connect(function(child) configureAnimationSet(name, fileList) end))
  		local idx = 1
  		for _, childPart in pairs(config:GetChildren()) do
  			if (childPart:IsA("Animation")) then
  				table.insert(animTable[name].connections, childPart.Changed:connect(function(property) configureAnimationSet(name, fileList) end))
  				animTable[name][idx] = {}
  				animTable[name][idx].anim = childPart
  				local weightObject = childPart:FindFirstChild("Weight")
  				if (weightObject == nil) then
  					animTable[name][idx].weight = 1
  				else
  					animTable[name][idx].weight = weightObject.Value
  				end
  				animTable[name].count = animTable[name].count + 1
  				animTable[name].totalWeight = animTable[name].totalWeight + animTable[name][idx].weight
  	--			print(name .. " [" .. idx .. "] " .. animTable[name][idx].anim.AnimationId .. " (" .. animTable[name][idx].weight .. ")")
  				idx = idx + 1
  			end
  		end
  	end
  
  	-- fallback to defaults
  	if (animTable[name].count <= 0) then
  		for idx, anim in pairs(fileList) do
  			animTable[name][idx] = {}
  			animTable[name][idx].anim = Instance.new("Animation")  -  Edit
  03:05:02.402  === END CHUNK 44 ===  -  Edit
  03:05:02.402    -  Edit
  03:05:02.506  === CHUNK 45 ===  -  Edit
  03:05:02.506    			animTable[name][idx].anim.Name = name
  			animTable[name][idx].anim.AnimationId = anim.id
  			animTable[name][idx].weight = anim.weight
  			animTable[name].count = animTable[name].count + 1
  			animTable[name].totalWeight = animTable[name].totalWeight + anim.weight
  --			print(name .. " [" .. idx .. "] " .. anim.id .. " (" .. anim.weight .. ")")
  		end
  	end
  end
  
  -- Setup animation objects
  function scriptChildModified(child)
  	local fileList = animNames[child.Name]
  	if (fileList ~= nil) then
  		configureAnimationSet(child.Name, fileList)
  	end	
  end
  
  script.ChildAdded:connect(scriptChildModified)
  script.ChildRemoved:connect(scriptChildModified)
  
  
  for name, fileList in pairs(animNames) do 
  	configureAnimationSet(name, fileList)
  end	
  
  -- ANIMATION
  
  -- declarations
  local toolAnim = "None"
  local toolAnimTime = 0
  
  local jumpAnimTime = 0
  local jumpAnimDuration = 0.3
  
  local toolTransitionTime = 0.1
  local fallTransitionTime = 0.3
  local jumpMaxLimbVelocity = 0.75
  
  -- functions
  
  function stopAllAnimations()
  	local oldAnim = currentAnim
  
  	-- return to idle if finishing an emote
  	if (emoteNames[oldAnim] ~= nil and emoteNames[oldAnim] == false) then
  		oldAnim = "idle"
  	end
  
  	currentAnim = ""  -  Edit
  03:05:02.506  === END CHUNK 45 ===  -  Edit
  03:05:02.506    -  Edit
  03:05:02.606  === CHUNK 46 ===  -  Edit
  03:05:02.606    	currentAnimInstance = nil
  	if (currentAnimKeyframeHandler ~= nil) then
  		currentAnimKeyframeHandler:disconnect()
  	end
  
  	if (currentAnimTrack ~= nil) then
  		currentAnimTrack:Stop()
  		currentAnimTrack:Destroy()
  		currentAnimTrack = nil
  	end
  	return oldAnim
  end
  
  function setAnimationSpeed(speed)
  	if speed ~= currentAnimSpeed then
  		currentAnimSpeed = speed
  		currentAnimTrack:AdjustSpeed(currentAnimSpeed)
  	end
  end
  
  function keyFrameReachedFunc(frameName)
  	if (frameName == "End") then
  
  		local repeatAnim = currentAnim
  		-- return to idle if finishing an emote
  		if (emoteNames[repeatAnim] ~= nil and emoteNames[repeatAnim] == false) then
  			repeatAnim = "idle"
  		end
  		
  		local animSpeed = currentAnimSpeed
  		playAnimation(repeatAnim, 0.0, Humanoid)
  		setAnimationSpeed(animSpeed)
  	end
  end
  
  -- Preload animations
  function playAnimation(animName, transitionTime, humanoid) 
  		
  	local roll = math.random(1, animTable[animName].totalWeight) 
  	local origRoll = roll
  	local idx = 1
  	while (roll > animTable[animName][idx].weight) do
  		roll = roll - animTable[animName][idx].weight
  		idx = idx + 1
  	end
  --		print(animName .. " " .. idx .. " [" .. origRoll .. "]")
  	local anim = animTable[animName][idx].anim
  
  	-- switch animation		
  	if (anim ~= currentAnimInstance) then  -  Edit
  03:05:02.607  === END CHUNK 46 ===  -  Edit
  03:05:02.607    -  Edit
  03:05:02.711  === CHUNK 47 ===  -  Edit
  03:05:02.711    		
  		if (currentAnimTrack ~= nil) then
  			currentAnimTrack:Stop(transitionTime)
  			currentAnimTrack:Destroy()
  		end
  
  		currentAnimSpeed = 1.0
  	
  		-- load it to the humanoid; get AnimationTrack
  		currentAnimTrack = humanoid:LoadAnimation(anim)
  		 
  		-- play the animation
  		currentAnimTrack:Play(transitionTime)
  		currentAnim = animName
  		currentAnimInstance = anim
  
  		-- set up keyframe name triggers
  		if (currentAnimKeyframeHandler ~= nil) then
  			currentAnimKeyframeHandler:disconnect()
  		end
  		currentAnimKeyframeHandler = currentAnimTrack.KeyframeReached:connect(keyFrameReachedFunc)
  		
  	end
  
  end
  
  -------------------------------------------------------------------------------------------
  -------------------------------------------------------------------------------------------
  
  local toolAnimName = ""
  local toolAnimTrack = nil
  local toolAnimInstance = nil
  local currentToolAnimKeyframeHandler = nil
  
  function toolKeyFrameReachedFunc(frameName)
  	if (frameName == "End") then
  --		print("Keyframe : ".. frameName)	
  		playToolAnimation(toolAnimName, 0.0, Humanoid)
  	end
  end
  
  
  function playToolAnimation(animName, transitionTime, humanoid)	 
  		
  		local roll = math.random(1, animTable[animName].totalWeight) 
  		local origRoll = roll
  		local idx = 1
  		while (roll > animTable[animName][idx].weight) do
  			roll = roll - animTable[animName][idx].weight
  			idx = idx + 1  -  Edit
  03:05:02.711  === END CHUNK 47 ===  -  Edit
  03:05:02.711    -  Edit
  03:05:02.815  === CHUNK 48 ===  -  Edit
  03:05:02.815    		end
  --		print(animName .. " * " .. idx .. " [" .. origRoll .. "]")
  		local anim = animTable[animName][idx].anim
  
  		if (toolAnimInstance ~= anim) then
  			
  			if (toolAnimTrack ~= nil) then
  				toolAnimTrack:Stop()
  				toolAnimTrack:Destroy()
  				transitionTime = 0
  			end
  					
  			-- load it to the humanoid; get AnimationTrack
  			toolAnimTrack = humanoid:LoadAnimation(anim)
  			 
  			-- play the animation
  			toolAnimTrack:Play(transitionTime)
  			toolAnimName = animName
  			toolAnimInstance = anim
  
  			currentToolAnimKeyframeHandler = toolAnimTrack.KeyframeReached:connect(toolKeyFrameReachedFunc)
  		end
  end
  
  function stopToolAnimations()
  	local oldAnim = toolAnimName
  
  	if (currentToolAnimKeyframeHandler ~= nil) then
  		currentToolAnimKeyframeHandler:disconnect()
  	end
  
  	toolAnimName = ""
  	toolAnimInstance = nil
  	if (toolAnimTrack ~= nil) then
  		toolAnimTrack:Stop()
  		toolAnimTrack:Destroy()
  		toolAnimTrack = nil
  	end
  
  
  	return oldAnim
  end
  
  -------------------------------------------------------------------------------------------
  -------------------------------------------------------------------------------------------
  
  
  function onRunning(speed)
  	if speed>0.01 then
  		playAnimation("walk", 0.1, Humanoid)  -  Edit
  03:05:02.815  === END CHUNK 48 ===  -  Edit
  03:05:02.815    -  Edit
  03:05:02.919  === CHUNK 49 ===  -  Edit
  03:05:02.919    		if currentAnimInstance and currentAnimInstance.AnimationId == "http://www.roblox.com/asset/?id=180426354" then
  			setAnimationSpeed(speed / 14.5)
  		end
  		pose = "Running"
  	else
  		if emoteNames[currentAnim] == nil then
  			playAnimation("idle", 0.1, Humanoid)
  			pose = "Standing"
  		end
  	end
  end
  
  function onDied()
  	pose = "Dead"
  end
  
  function onJumping()
  	playAnimation("jump", 0.1, Humanoid)
  	jumpAnimTime = jumpAnimDuration
  	pose = "Jumping"
  end
  
  function onClimbing(speed)
  	playAnimation("climb", 0.1, Humanoid)
  	setAnimationSpeed(speed / 12.0)
  	pose = "Climbing"
  end
  
  function onGettingUp()
  	pose = "GettingUp"
  end
  
  function onFreeFall()
  	if (jumpAnimTime <= 0) then
  		playAnimation("fall", fallTransitionTime, Humanoid)
  	end
  	pose = "FreeFall"
  end
  
  function onFallingDown()
  	pose = "FallingDown"
  end
  
  function onSeated()
  	pose = "Seated"
  end
  
  function onPlatformStanding()
  	pose = "PlatformStanding"
  end  -  Edit
  03:05:02.919  === END CHUNK 49 ===  -  Edit
  03:05:02.919    -  Edit
  03:05:03.022  === CHUNK 50 ===  -  Edit
  03:05:03.023    
  function onSwimming(speed)
  	if speed>0 then
  		pose = "Running"
  	else
  		pose = "Standing"
  	end
  end
  
  function getTool()	
  	for _, kid in ipairs(Figure:GetChildren()) do
  		if kid.className == "Tool" then return kid end
  	end
  	return nil
  end
  
  function getToolAnim(tool)
  	for _, c in ipairs(tool:GetChildren()) do
  		if c.Name == "toolanim" and c.className == "StringValue" then
  			return c
  		end
  	end
  	return nil
  end
  
  function animateTool()
  	
  	if (toolAnim == "None") then
  		playToolAnimation("toolnone", toolTransitionTime, Humanoid)
  		return
  	end
  
  	if (toolAnim == "Slash") then
  		playToolAnimation("toolslash", 0, Humanoid)
  		return
  	end
  
  	if (toolAnim == "Lunge") then
  		playToolAnimation("toollunge", 0, Humanoid)
  		return
  	end
  end
  
  function moveSit()
  	RightShoulder.MaxVelocity = 0.15
  	LeftShoulder.MaxVelocity = 0.15
  	RightShoulder:SetDesiredAngle(3.14 /2)
  	LeftShoulder:SetDesiredAngle(-3.14 /2)
  	RightHip:SetDesiredAngle(3.14 /2)
  	LeftHip:SetDesiredAngle(-3.14 /2)  -  Edit
  03:05:03.023  === END CHUNK 50 ===  -  Edit
  03:05:03.023    -  Edit
  03:05:03.123  === CHUNK 51 ===  -  Edit
  03:05:03.123    end
  
  local lastTick = 0
  
  function move(time)
  	local amplitude = 1
  	local frequency = 1
    	local deltaTime = time - lastTick
    	lastTick = time
  
  	local climbFudge = 0
  	local setAngles = false
  
    	if (jumpAnimTime > 0) then
    		jumpAnimTime = jumpAnimTime - deltaTime
    	end
  
  	if (pose == "FreeFall" and jumpAnimTime <= 0) then
  		playAnimation("fall", fallTransitionTime, Humanoid)
  	elseif (pose == "Seated") then
  		playAnimation("sit", 0.5, Humanoid)
  		return
  	elseif (pose == "Running") then
  		playAnimation("walk", 0.1, Humanoid)
  	elseif (pose == "Dead" or pose == "GettingUp" or pose == "FallingDown" or pose == "Seated" or pose == "PlatformStanding") then
  --		print("Wha " .. pose)
  		stopAllAnimations()
  		amplitude = 0.1
  		frequency = 1
  		setAngles = true
  	end
  
  	if (setAngles) then
  		desiredAngle = amplitude * math.sin(time * frequency)
  
  		RightShoulder:SetDesiredAngle(desiredAngle + climbFudge)
  		LeftShoulder:SetDesiredAngle(desiredAngle - climbFudge)
  		RightHip:SetDesiredAngle(-desiredAngle)
  		LeftHip:SetDesiredAngle(-desiredAngle)
  	end
  
  	-- Tool Animation handling
  	local tool = getTool()
  	if tool and tool:FindFirstChild("Handle") then
  	
  		animStringValueObject = getToolAnim(tool)
  
  		if animStringValueObject then
  			toolAnim = animStringValueObject.Value
  			-- message recieved, delete StringValue  -  Edit
  03:05:03.123  === END CHUNK 51 ===  -  Edit
  03:05:03.123    -  Edit
  03:05:03.224  === CHUNK 52 ===  -  Edit
  03:05:03.224    			animStringValueObject.Parent = nil
  			toolAnimTime = time + .3
  		end
  
  		if time > toolAnimTime then
  			toolAnimTime = 0
  			toolAnim = "None"
  		end
  
  		animateTool()		
  	else
  		stopToolAnimations()
  		toolAnim = "None"
  		toolAnimInstance = nil
  		toolAnimTime = 0
  	end
  end
  
  -- connect events
  Humanoid.Died:connect(onDied)
  Humanoid.Running:connect(onRunning)
  Humanoid.Jumping:connect(onJumping)
  Humanoid.Climbing:connect(onClimbing)
  Humanoid.GettingUp:connect(onGettingUp)
  Humanoid.FreeFalling:connect(onFreeFall)
  Humanoid.FallingDown:connect(onFallingDown)
  Humanoid.Seated:connect(onSeated)
  Humanoid.PlatformStanding:connect(onPlatformStanding)
  Humanoid.Swimming:connect(onSwimming)
  
  -- setup emote chat hook
  game.Players.LocalPlayer.Chatted:connect(function(msg)
  	local emote = ""
  	if msg == "/e dance" then
  		emote = dances[math.random(1, #dances)]
  	elseif (string.sub(msg, 1, 3) == "/e ") then
  		emote = string.sub(msg, 4)
  	elseif (string.sub(msg, 1, 7) == "/emote ") then
  		emote = string.sub(msg, 8)
  	end
  	
  	if (pose == "Standing" and emoteNames[emote] ~= nil) then
  		playAnimation(emote, 0.1, Humanoid)
  	end
  
  end)
  
  
  -- main program
    -  Edit
  03:05:03.224  === END CHUNK 52 ===  -  Edit
  03:05:03.224    -  Edit
  03:05:03.328  === CHUNK 53 ===  -  Edit
  03:05:03.328    local runService = game:service("RunService");
  
  -- initialize to idle
  playAnimation("idle", 0.1, Humanoid)
  pose = "Standing"
  
  while Figure.Parent~=nil do
  	local _, time = wait(0.1)
  	move(time)
  end
  
  
  
--- END Animate ---

Script: Health (in R6) [ServerScriptService]
Path: ServerScriptService.R6 Script.R6.Health
Content:
  --Responsible for regening a player's humanoid's health
  
  -- declarations
  local Figure = script.Parent
  local Head = Figure:WaitForChild("Head")
  local Humanoid = Figure:WaitForChild("Humanoid")
  local regening = false
  
  -- regeneration
  function regenHealth()
  	if regening then return end
  	regening = true
  	
  	while Humanoid.Health < Humanoid.MaxHealth do
  		local s = wait(1)
  		local health = Humanoid.Health
  		if health > 0 and health < Humanoid.MaxHealth then
  			local newHealthDelta = 0.01 * s * Humanoid.MaxHealth
  			health = health + newHealthDelta
  			Humanoid.Health = math.min(health,Humanoid.MaxHealth)
  		end
  	end
  	
  	if Humanoid.Health > Humanoid.MaxHealth then
  		Humanoid.Health = Humanoid.MaxHealth
  	end
  	
  	regening = false
  end
  
  Humanoid.HealthChanged:connect(regenHealth)
      -  Edit
  03:05:03.328  === END CHUNK 53 ===  -  Edit
  03:05:03.328    -  Edit
  03:05:03.431  === CHUNK 54 ===  -  Edit
  03:05:03.431  --- END Health ---

Script: ZoneSystem (in ServerScriptService) [ServerScriptService]
Path: ServerScriptService.ZoneSystem
Content:
  -- ZoneSystem (ServerScript in ServerScriptService)
  local Players = game:GetService("Players")
  local ReplicatedStorage = game:GetService("ReplicatedStorage")
  local RunService = game:GetService("RunService")
  
  -- Get ShopConfig
  local ShopConfig = require(ReplicatedStorage:WaitForChild("ShopConfig"))
  
  -- Debug system
  local function debugPrint(message)
  	if ShopConfig.Debug.Enabled and ShopConfig.Debug.ShowZoneDebug then
  		print("[ZONE SYSTEM]: " .. message)
  	end
  end
  
  -- Create RemoteEvents
  local ZoneEnteredEvent = Instance.new("RemoteEvent")
  ZoneEnteredEvent.Name = "ZoneEnteredEvent"
  ZoneEnteredEvent.Parent = ReplicatedStorage
  
  local ZoneExitedEvent = Instance.new("RemoteEvent")
  ZoneExitedEvent.Name = "ZoneExitedEvent"
  ZoneExitedEvent.Parent = ReplicatedStorage
  
  local ZoneUnlockedEvent = Instance.new("RemoteEvent")
  ZoneUnlockedEvent.Name = "ZoneUnlockedEvent"
  ZoneUnlockedEvent.Parent = ReplicatedStorage
  
  local GetPlayerZoneRemote = Instance.new("RemoteFunction")
  GetPlayerZoneRemote.Name = "GetPlayerZone"
  GetPlayerZoneRemote.Parent = ReplicatedStorage
  
  -- Player zone tracking
  local PlayerZones = {} -- [player] = zoneKey or nil
  
  -- Wait for zones folder
  local zonesFolder = workspace:WaitForChild("Zones")
  
  debugPrint("ZoneSystem initializing...")
  
  -- Function to get player's poops pooped count
  local function getPlayerPoopsPooped(player)
  	if _G.LeaderstatsManager and _G.LeaderstatsManager.GetPlayerData then
  		local data = _G.LeaderstatsManager.GetPlayerData(player)
  		return data and data.TotalPoopsSpawned or 0  -  Edit
  03:05:03.431  === END CHUNK 54 ===  -  Edit
  03:05:03.431    -  Edit
  03:05:03.531  === CHUNK 55 ===  -  Edit
  03:05:03.531    	end
  
  	-- Fallback to leaderstats
  	local leaderstats = player:FindFirstChild("leaderstats")
  	if leaderstats then
  		local pooped = leaderstats:FindFirstChild("Pooped")
  		if pooped then
  			return pooped.Value
  		end
  	end
  
  	return 0
  end
  
  -- Function to check if player can enter zone
  local function canEnterZone(player, zoneKey)
  	local zoneConfig = ShopConfig.Zones[zoneKey]
  	if not zoneConfig then return false, "Zone not found" end
  
  	local playerPooped = getPlayerPoopsPooped(player)
  	local required = zoneConfig.RequiredPoopsPooped
  
  	if playerPooped < required then
  		return false, "You need " .. required .. " poops pooped to enter this zone! (You have " .. playerPooped .. ")"
  	end
  
  	return true, "Access granted"
  end
  
  -- Function to enter zone
  local function enterZone(player, zoneKey)
  	local canEnter, reason = canEnterZone(player, zoneKey)
  
  	if not canEnter then
  		debugPrint(player.Name .. " cannot enter " .. zoneKey .. ": " .. reason)
  		ZoneEnteredEvent:FireClient(player, nil, reason, false) -- Send failure
  		return false
  	end
  
  	local previousZone = PlayerZones[player]
  	PlayerZones[player] = zoneKey
  
  	local zoneConfig = ShopConfig.Zones[zoneKey]
  	debugPrint(player.Name .. " entered " .. zoneKey .. " (Multiplier: " .. zoneConfig.Multiplier .. "x)")
  
  	-- Notify client of zone entry
  	ZoneEnteredEvent:FireClient(player, zoneKey, zoneConfig.Multiplier, true)
  
  	return true
  end  -  Edit
  03:05:03.531  === END CHUNK 55 ===  -  Edit
  03:05:03.531    -  Edit
  03:05:03.636  === CHUNK 56 ===  -  Edit
  03:05:03.636    
  -- Function to exit zone
  local function exitZone(player)
  	local previousZone = PlayerZones[player]
  	PlayerZones[player] = nil
  
  	if previousZone then
  		debugPrint(player.Name .. " exited " .. previousZone)
  		ZoneExitedEvent:FireClient(player)
  	end
  end
  
  -- Function to get player's zone multiplier
  local function getPlayerZoneMultiplier(player)
  	local zoneKey = PlayerZones[player]
  	if not zoneKey then return 1 end
  
  	local zoneConfig = ShopConfig.Zones[zoneKey]
  	return zoneConfig and zoneConfig.Multiplier or 1
  end
  
  -- Function to check for zone unlocks
  local function checkZoneUnlocks(player)
  	local playerPooped = getPlayerPoopsPooped(player)
  
  	for zoneKey, zoneConfig in pairs(ShopConfig.Zones) do
  		if playerPooped >= zoneConfig.RequiredPoopsPooped then
  			-- Check if player just unlocked this zone
  			local hasSeenUnlock = player:GetAttribute("UnlockedZone_" .. zoneKey)
  			if not hasSeenUnlock then
  				player:SetAttribute("UnlockedZone_" .. zoneKey, true)
  				debugPrint(player.Name .. " unlocked " .. zoneKey .. "!")
  				ZoneUnlockedEvent:FireClient(player, zoneKey, zoneConfig.Name, zoneConfig.UnlockMessage)
  			end
  		end
  	end
  end
  
  -- Setup zone detection for each zone
  for zoneKey, zoneConfig in pairs(ShopConfig.Zones) do
  	local zonePart = zonesFolder:FindFirstChild(zoneKey)
  	if zonePart then
  		debugPrint("Setting up zone detection for " .. zoneKey)
  
  		-- Zone entered
  		zonePart.Touched:Connect(function(hit)
  			local player = Players:GetPlayerFromCharacter(hit.Parent)
  			if player and PlayerZones[player] ~= zoneKey then
  				enterZone(player, zoneKey)
  			end  -  Edit
  03:05:03.636  === END CHUNK 56 ===  -  Edit
  03:05:03.636    -  Edit
  03:05:03.739  === CHUNK 57 ===  -  Edit
  03:05:03.739    		end)
  
  		-- Zone exited (we'll use a different method for this)
  	else
  		warn("Zone part not found: " .. zoneKey)
  	end
  end
  
  -- Monitor players leaving zones (distance-based)
  spawn(function()
  	while true do
  		wait(1) -- Check every second
  
  		for player, currentZone in pairs(PlayerZones) do
  			if player.Parent and player.Character then
  				local humanoidRootPart = player.Character:FindFirstChild("HumanoidRootPart")
  				if humanoidRootPart then
  					local zonePart = zonesFolder:FindFirstChild(currentZone)
  					if zonePart then
  						local distance = (humanoidRootPart.Position - zonePart.Position).Magnitude
  						local maxDistance = math.max(zonePart.Size.X, zonePart.Size.Y, zonePart.Size.Z) / 2 + 10
  
  						if distance > maxDistance then
  							exitZone(player)
  						end
  					end
  				end
  			end
  		end
  	end
  end)
  
  -- Remote handlers
  GetPlayerZoneRemote.OnServerInvoke = function(player)
  	local zoneKey = PlayerZones[player]
  	if zoneKey then
  		local zoneConfig = ShopConfig.Zones[zoneKey]
  		return {
  			zoneKey = zoneKey,
  			zoneName = zoneConfig.Name,
  			multiplier = zoneConfig.Multiplier
  		}
  	end
  	return nil
  end
  
  -- Player events
  Players.PlayerAdded:Connect(function(player)
  	PlayerZones[player] = nil
    -  Edit
  03:05:03.740  === END CHUNK 57 ===  -  Edit
  03:05:03.740    -  Edit
  03:05:03.843  === CHUNK 58 ===  -  Edit
  03:05:03.843    	-- Check for unlocks when player joins
  	spawn(function()
  		wait(3) -- Wait for leaderstats to load
  		checkZoneUnlocks(player)
  	end)
  end)
  
  Players.PlayerRemoving:Connect(function(player)
  	PlayerZones[player] = nil
  end)
  
  -- Global functions
  _G.ZoneSystem = {
  	GetPlayerZoneMultiplier = getPlayerZoneMultiplier,
  	GetPlayerZone = function(player) return PlayerZones[player] end,
  	CanEnterZone = canEnterZone,
  	CheckZoneUnlocks = checkZoneUnlocks,
  	EnterZone = enterZone,
  	ExitZone = exitZone
  }
  
  debugPrint("ZoneSystem initialized successfully!")
--- END ZoneSystem ---

Script: PortalSystem (in ServerScriptService) [ServerScriptService]
Path: ServerScriptService.PortalSystem
Content:
  -- PortalSystem (ServerScript in ServerScriptService)
  local Players = game:GetService("Players")
  local ReplicatedStorage = game:GetService("ReplicatedStorage")
  local TweenService = game:GetService("TweenService")
  
  -- Get ShopConfig
  local ShopConfig = require(ReplicatedStorage:WaitForChild("ShopConfig"))
  
  -- Debug system
  local function debugPrint(message)
  	if ShopConfig.Debug.Enabled and ShopConfig.Debug.ShowZoneDebug then
  		print("[PORTAL SYSTEM]: " .. message)
  	end
  end
  
  -- Create RemoteEvents for client effects only
  local PortalTeleportClient = Instance.new("RemoteEvent")
  PortalTeleportClient.Name = "PortalTeleportClient"
  PortalTeleportClient.Parent = ReplicatedStorage
  
  -- Player tracking
  local PlayerCooldowns = {} -- [player] = tick()
    -  Edit
  03:05:03.843  === END CHUNK 58 ===  -  Edit
  03:05:03.843    -  Edit
  03:05:03.944  === CHUNK 59 ===  -  Edit
  03:05:03.945    debugPrint("PortalSystem initializing...")
  
  -- Function to get player requirement value
  local function getPlayerRequirementValue(player, requirementType)
  	if requirementType == "None" then
  		return math.huge
  	end
  
  	if _G.LeaderstatsManager and _G.LeaderstatsManager.GetPlayerData then
  		local data = _G.LeaderstatsManager.GetPlayerData(player)
  		if data then
  			if requirementType == "PoopsPooped" then
  				return data.TotalPoopsSpawned or 0
  			elseif requirementType == "PooBucks" then
  				return data.PooBucks or 0
  			elseif requirementType == "Rebirths" then
  				return data.Rebirths or 0
  			end
  		end
  	end
  
  	-- Fallback to leaderstats
  	local leaderstats = player:FindFirstChild("leaderstats")
  	if leaderstats then
  		if requirementType == "PoopsPooped" then
  			local pooped = leaderstats:FindFirstChild("Pooped")
  			return pooped and pooped.Value or 0
  		elseif requirementType == "PooBucks" then
  			local pooBucks = leaderstats:FindFirstChild("PooBucks")
  			return pooBucks and pooBucks.Value or 0
  		elseif requirementType == "Rebirths" then
  			local rebirths = leaderstats:FindFirstChild("Rebirths")
  			return rebirths and rebirths.Value or 0
  		end
  	end
  
  	return 0
  end
  
  -- Function to check if player meets portal requirements
  local function canUsePortal(player, portalConfig)
  	if portalConfig.RequirementType == "None" then
  		return true, "Access granted"
  	end
  
  	local playerValue = getPlayerRequirementValue(player, portalConfig.RequirementType)
  	local required = portalConfig.RequirementAmount
  
  	if playerValue >= required then
  		return true, "Access granted"  -  Edit
  03:05:03.945  === END CHUNK 59 ===  -  Edit
  03:05:03.945    -  Edit
  03:05:04.048  === CHUNK 60 ===  -  Edit
  03:05:04.048    	else
  		return false, portalConfig.RequirementMessage or "Requirements not met"
  	end
  end
  
  -- Function to get arrival position
  -- Function to get arrival position - FIXED FOR FLOATING ISLANDS
  function getArrivalPosition(portalConfig)
  	local destinationZone = portalConfig.DestinationZone
  
  	-- Handle MainMap specifically
  	if destinationZone == "MainMap" then
  		local spawnLocations = workspace:FindFirstChild("SpawnLocations")
  		if spawnLocations then
  			local spawns = spawnLocations:GetChildren()
  			if #spawns > 0 then
  				local randomSpawn = spawns[math.random(1, #spawns)]
  				if randomSpawn:FindFirstChild("ImageHolder") then
  					return randomSpawn.ImageHolder.Position + Vector3.new(0, 5, 0)
  				elseif randomSpawn.PrimaryPart then
  					return randomSpawn.PrimaryPart.Position + Vector3.new(0, 5, 0)
  				end
  			end
  		end
  		return Vector3.new(0, 10, 0) -- Default spawn
  	end
  
  	-- For other zones, try to find the arrival portal first
  	local arrivalPortalName = portalConfig.ArrivalPortal
  	if arrivalPortalName then
  		local portalsFolder = workspace:FindFirstChild("Portals")
  		if portalsFolder then
  			local arrivalPortal = portalsFolder:FindFirstChild(arrivalPortalName)
  			if arrivalPortal and arrivalPortal.PrimaryPart then
  				return arrivalPortal.PrimaryPart.Position + Vector3.new(0, 5, 0)
  			end
  		end
  	end
  
  	-- Find the actual zone islands in workspace
  	local zoneFolder = nil
  	if destinationZone == "Zone1" then
  		zoneFolder = workspace:FindFirstChild("FloatingPoopIslandMap")
  	elseif destinationZone == "Zone2" then
  		zoneFolder = workspace:FindFirstChild("FloatingToiletIslandMap")
  	elseif destinationZone == "Zone3" then
  		zoneFolder = workspace:FindFirstChild("TheGreatMountainSkyIslandMap")
  	end
  
  	if zoneFolder then  -  Edit
  03:05:04.048  === END CHUNK 60 ===  -  Edit
  03:05:04.048    -  Edit
  03:05:04.151  === CHUNK 61 ===  -  Edit
  03:05:04.152    		-- Look for "TheIsland" folder first
  		local theIsland = zoneFolder:FindFirstChild("TheIsland")
  		if theIsland then
  			-- Find the main island part
  			for _, child in pairs(theIsland:GetChildren()) do
  				if child:IsA("MeshPart") or child:IsA("Part") then
  					-- Found the island! Spawn on top of it
  					local islandPos = child.Position
  					return Vector3.new(islandPos.X, islandPos.Y + 10, islandPos.Z)
  				end
  			end
  		end
  
  		-- Fallback: find any large part in the zone folder
  		local function findLargestPart(folder)
  			local largestPart = nil
  			local largestSize = 0
  
  			for _, child in pairs(folder:GetDescendants()) do
  				if child:IsA("MeshPart") or child:IsA("Part") then
  					local size = child.Size.Magnitude
  					if size > largestSize then
  						largestSize = size
  						largestPart = child
  					end
  				end
  			end
  
  			return largestPart
  		end
  
  		local largestPart = findLargestPart(zoneFolder)
  		if largestPart then
  			return Vector3.new(largestPart.Position.X, largestPart.Position.Y + 10, largestPart.Position.Z)
  		end
  	end
  
  	-- Ultimate fallback - higher positions for floating islands
  	if destinationZone == "Zone1" then
  		return Vector3.new(50, 100, 50) -- Much higher up
  	elseif destinationZone == "Zone2" then
  		return Vector3.new(-50, 120, 50) -- Higher up
  	elseif destinationZone == "Zone3" then
  		return Vector3.new(0, 150, 100) -- Even higher for mountain
  	end
  
  	return Vector3.new(0, 10, 0) -- Ultimate fallback
  end
  
  	-- For other zones, try to find the arrival portal  -  Edit
  03:05:04.152  === END CHUNK 61 ===  -  Edit
  03:05:04.152    -  Edit
  03:05:04.256  === CHUNK 62 ===  -  Edit
  03:05:04.256    	local arrivalPortalName = portalConfig.ArrivalPortal
  	if arrivalPortalName then
  		local portalsFolder = workspace:FindFirstChild("Portals")
  		if portalsFolder then
  			local arrivalPortal = portalsFolder:FindFirstChild(arrivalPortalName)
  			if arrivalPortal and arrivalPortal.PrimaryPart then
  				return arrivalPortal.PrimaryPart.Position + Vector3.new(0, 5, 0)
  			end
  		end
  	end
  
  	-- Zone-specific fallback positions
  	if destinationZone == "Zone1" then
  		return Vector3.new(50, 20, 50) -- Floating Poop Island
  	elseif destinationZone == "Zone2" then
  		return Vector3.new(-50, 20, 50) -- Floating Toilet Island  
  	elseif destinationZone == "Zone3" then
  		return Vector3.new(0, 50, 100) -- Great Mountain
  	end
  
  	return Vector3.new(0, 10, 0) -- Ultimate fallback
  end)
  
  -- Function to teleport player immediately
  local function teleportPlayer(player, portalConfig)
  	local character = player.Character
  	if not character or not character:FindFirstChild("HumanoidRootPart") then
  		return false, "Character not found"
  	end
  
  	-- Check requirements first
  	local canUse, reason = canUsePortal(player, portalConfig)
  	if not canUse then
  		-- Send failure to client for sound/visual feedback
  		PortalTeleportClient:FireClient(player, "RequirementNotMet", {
  			message = reason
  		})
  		return false, reason
  	end
  
  	local humanoidRootPart = character.HumanoidRootPart
  	local arrivalPosition = getArrivalPosition(portalConfig)
  
  	-- Send teleport start to client for effects
  	PortalTeleportClient:FireClient(player, "TeleportStart", {
  		config = portalConfig
  	})
  
  	-- Small delay for effect
  	wait(0.2)  -  Edit
  03:05:04.256  === END CHUNK 62 ===  -  Edit
  03:05:04.256    -  Edit
  03:05:04.360  === CHUNK 63 ===  -  Edit
  03:05:04.360    
  	-- Check for existing players at destination to avoid overlap
  	local safePosition = arrivalPosition
  	for _, otherPlayer in pairs(Players:GetPlayers()) do
  		if otherPlayer ~= player and otherPlayer.Character and otherPlayer.Character:FindFirstChild("HumanoidRootPart") then
  			local distance = (otherPlayer.Character.HumanoidRootPart.Position - safePosition).Magnitude
  			if distance < 8 then
  				safePosition = arrivalPosition + Vector3.new(
  					math.random(-10, 10),
  					0,
  					math.random(-10, 10)
  				)
  				break
  			end
  		end
  	end
  
  	-- Teleport the player
  	local success, error = pcall(function()
  		humanoidRootPart.CFrame = CFrame.new(safePosition)
  	end)
  
  	if success then
  		debugPrint("Teleported " .. player.Name .. " to " .. portalConfig.DestinationZone)
  
  		-- Update zone system if available
  		if _G.ZoneSystem and _G.ZoneSystem.SetPlayerZone then
  			if portalConfig.DestinationZone ~= "MainMap" then
  				_G.ZoneSystem.SetPlayerZone(player, portalConfig.DestinationZone)
  			else
  				_G.ZoneSystem.SetPlayerZone(player, nil) -- Clear zone for main map
  			end
  		end
  
  		-- Send completion to client
  		PortalTeleportClient:FireClient(player, "TeleportComplete", {
  			config = portalConfig
  		})
  
  		return true, "Teleport successful"
  	else
  		PortalTeleportClient:FireClient(player, "TeleportFailed", {
  			message = "Teleport failed"
  		})
  		return false, "Teleport failed: " .. tostring(error)
  	end
  end
  
  -- Function to setup portal detection
  local function setupPortal(portalModel, portalConfig)  -  Edit
  03:05:04.360  === END CHUNK 63 ===  -  Edit
  03:05:04.360    -  Edit
  03:05:04.464  === CHUNK 64 ===  -  Edit
  03:05:04.464    	if not portalModel or not portalConfig then return end
  
  	-- Find trigger part
  	local triggerPart = portalModel.PrimaryPart
  	if not triggerPart then
  		local largestPart = nil
  		local largestSize = 0
  		for _, part in pairs(portalModel:GetChildren()) do
  			if part:IsA("BasePart") then
  				local size = part.Size.Magnitude
  				if size > largestSize then
  					largestSize = size
  					largestPart = part
  				end
  			end
  		end
  		triggerPart = largestPart
  	end
  
  	if not triggerPart then
  		warn("No trigger part found for portal: " .. portalModel.Name)
  		return
  	end
  
  	-- Create touch detection
  	triggerPart.Touched:Connect(function(hit)
  		local character = hit.Parent
  		local humanoid = character:FindFirstChildOfClass("Humanoid")
  		if not humanoid then return end
  
  		local player = Players:GetPlayerFromCharacter(character)
  		if not player then return end
  
  		-- Check cooldown
  		local now = tick()
  		if PlayerCooldowns[player] and (now - PlayerCooldowns[player]) < (ShopConfig.Portals.Effects.CooldownTime or 2) then
  			return
  		end
  
  		-- Check if portal is enabled
  		if not portalConfig.Enabled then
  			return
  		end
  
  		-- Set cooldown
  		PlayerCooldowns[player] = now
  
  		-- Teleport immediately
  		teleportPlayer(player, portalConfig)
  	end)  -  Edit
  03:05:04.464  === END CHUNK 64 ===  -  Edit
  03:05:04.464    -  Edit
  03:05:04.569  === CHUNK 65 ===  -  Edit
  03:05:04.569    
  	debugPrint("Setup portal: " .. portalModel.Name .. " -> " .. portalConfig.DestinationZone)
  end
  
  -- Initialize all portals
  local function initializePortals()
  	local portalsFolder = workspace:FindFirstChild("Portals")
  	if not portalsFolder then
  		warn("Portals folder not found in workspace!")
  		return
  	end
  
  	local portalCount = 0
  	for portalName, portalConfig in pairs(ShopConfig.Portals.PortalConfigs) do
  		local portalModel = portalsFolder:FindFirstChild(portalName)
  		if portalModel then
  			setupPortal(portalModel, portalConfig)
  			portalCount = portalCount + 1
  		else
  			debugPrint("Portal model not found: " .. portalName)
  		end
  	end
  
  	debugPrint("Initialized " .. portalCount .. " portals")
  end
  
  -- Cleanup on player leaving
  Players.PlayerRemoving:Connect(function(player)
  	PlayerCooldowns[player] = nil
  end)
  
  -- Initialize the system
  initializePortals()
  
  debugPrint("PortalSystem fully initialized!")
--- END PortalSystem ---

LocalScript: PoopScript (in StarterPlayerScripts) [StarterPlayer.StarterPlayerScripts]
Path: StarterPlayer.StarterPlayerScripts.PoopScript
Content:
  -- PoopScript (StarterPlayerScripts)
  local Players = game:GetService("Players")
  local ReplicatedStorage = game:GetService("ReplicatedStorage")
  local UserInputService = game:GetService("UserInputService")
  local TweenService = game:GetService("TweenService")
  local Debris = game:GetService("Debris")
  local SoundService = game:GetService("SoundService")
  
  local player = Players.LocalPlayer
    -  Edit
  03:05:04.569  === END CHUNK 65 ===  -  Edit
  03:05:04.569    -  Edit
  03:05:04.673  === CHUNK 66 ===  -  Edit
  03:05:04.673    -- DEBUG SYSTEM
  local DEBUG = true -- Set to false to disable debug prints
  
  local function debugPrint(message)
  	if DEBUG then
  		print("[POOP DEBUG]: " .. message)
  	end
  end
  
  -- CONFIGURABLE CONSTANTS
  local ANIMATION_TIMEOUT = 0.3
  local POOP_CLEANUP_TIME = 5
  local FADE_DURATION = 1
  local POOP_DISTANCE_BEHIND = 3
  local POOP_Y_OFFSET = -2
  local ANIMATION_ID = "rbxassetid://90164930719674"
  local SOUND_ID = "rbxassetid://98112849852832"
  
  -- Wait for required objects
  local poopFolder = ReplicatedStorage:WaitForChild("PoopFolder")
  local poopSpawnedEvent = ReplicatedStorage:WaitForChild("PoopSpawnedEvent")
  local getPlayerDataRemote = ReplicatedStorage:WaitForChild("GetPlayerDataRemote")
  
  -- Current state
  local currentPoopType = "Poop"
  local isPooping = false
  local playerUpgrades = {}
  
  -- Cache animation and sound
  local cachedAnimationTrack = nil
  local poopSound = Instance.new("Sound")
  poopSound.SoundId = SOUND_ID
  poopSound.Volume = 0.8
  poopSound.Parent = workspace
  
  debugPrint("PoopScript initialized")
  
  -- Function to get player upgrades
  local function updatePlayerUpgrades()
  	local success, data = pcall(function()
  		return getPlayerDataRemote:InvokeServer()
  	end)
  
  	if success and data then
  		playerUpgrades = data.OwnedUpgrades or {}
  		debugPrint("Updated player upgrades: " .. table.concat(playerUpgrades, ", "))
  	else
  		debugPrint("Failed to get player upgrades")
  	end
  end  -  Edit
  03:05:04.673  === END CHUNK 66 ===  -  Edit
  03:05:04.673    -  Edit
  03:05:04.778  === CHUNK 67 ===  -  Edit
  03:05:04.778    
  -- Function to check if player has upgrade
  local function hasUpgrade(upgradeName)
  	return table.find(playerUpgrades, upgradeName) ~= nil
  end
  
  -- Function to get poop spawn count (based on upgrades)
  local function getPoopSpawnCount()
  	local count = 1
  	if hasUpgrade("2PoopsUpgrade") then
  		count = count * 2
  		debugPrint("2PoopsUpgrade active - spawning " .. count .. " poops")
  	end
  	return count
  end
  
  -- Function to notify server of poop spawn
  local function notifyPoopSpawned()
  	local success, _ = pcall(function()
  		poopSpawnedEvent:FireServer()
  	end)
  	if not success then
  		debugPrint("Failed to notify server of poop spawn")
  	end
  end
  
  -- Function to position poop behind player
  local function positionPoop(newPoop, humanoidRootPart, index)
  	local playerPosition = humanoidRootPart.Position
  	local playerLookDirection = humanoidRootPart.CFrame.LookVector
  	local offset = index or 0
  
  	local poopPosition = playerPosition - (playerLookDirection * POOP_DISTANCE_BEHIND) + Vector3.new(
  		math.random(-2, 2) + offset,
  		POOP_Y_OFFSET,
  		math.random(-1, 1)
  	)
  
  	if newPoop.PrimaryPart then
  		newPoop:SetPrimaryPartCFrame(CFrame.new(poopPosition))
  	elseif newPoop:FindFirstChild("Part") then
  		newPoop.Part.Position = poopPosition
  	end
  
  	debugPrint("Positioned poop at " .. tostring(poopPosition))
  end
  
  -- Function to add physics effects to poop
  local function addPhysics(newPoop)
  	local parts = newPoop:GetChildren()  -  Edit
  03:05:04.778  === END CHUNK 67 ===  -  Edit
  03:05:04.778    -  Edit
  03:05:04.881  === CHUNK 68 ===  -  Edit
  03:05:04.881    	for _, part in pairs(parts) do
  		if part:IsA("BasePart") then
  			part.Anchored = false
  			part.AssemblyLinearVelocity = Vector3.new(
  				math.random(-5, 5),
  				math.random(2, 8),
  				math.random(-5, 5)
  			)
  		end
  	end
  end
  
  -- Function to setup poop cleanup and fade
  local function setupCleanup(newPoop)
  	spawn(function()
  		wait(POOP_CLEANUP_TIME)
  
  		local fadeInfo = TweenInfo.new(FADE_DURATION, Enum.EasingStyle.Quart, Enum.EasingDirection.Out)
  
  		for _, part in pairs(newPoop:GetChildren()) do
  			if part:IsA("BasePart") then
  				local success, tween = pcall(function()
  					return TweenService:Create(part, fadeInfo, {Transparency = 1})
  				end)
  				if success then
  					tween:Play()
  				end
  			end
  		end
  
  		Debris:AddItem(newPoop, FADE_DURATION)
  	end)
  end
  
  -- Function to spawn a single poop
  local function spawnSinglePoop(index)
  	local character = player.Character
  	if not character then 
  		debugPrint("No character found")
  		return 
  	end
  
  	local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
  	if not humanoidRootPart then 
  		debugPrint("No HumanoidRootPart found")
  		return 
  	end
  
  	-- Get the current poop model
  	local poopModel = poopFolder:FindFirstChild(currentPoopType)  -  Edit
  03:05:04.881  === END CHUNK 68 ===  -  Edit
  03:05:04.881    -  Edit
  03:05:04.985  === CHUNK 69 ===  -  Edit
  03:05:04.985    	if not poopModel then
  		debugPrint("Poop model '" .. currentPoopType .. "' not found!")
  		return
  	end
  
  	-- Clone the poop model
  	local newPoop = poopModel:Clone()
  
  	-- Position, add physics, and setup cleanup
  	positionPoop(newPoop, humanoidRootPart, index)
  	newPoop.Parent = workspace
  	addPhysics(newPoop)
  	setupCleanup(newPoop)
  
  	debugPrint("Spawned poop: " .. currentPoopType)
  end
  
  -- Function to actually spawn the poop(s)
  local function actuallySpawnPoop()
  	updatePlayerUpgrades() -- Update upgrades before spawning
  
  	local spawnCount = getPoopSpawnCount()
  	debugPrint("Spawning " .. spawnCount .. " poops")
  
  	for i = 1, spawnCount do
  		spawnSinglePoop(i - 1)
  		-- Notify server for each poop
  		notifyPoopSpawned()
  	end
  end
  
  -- Function to load and cache animation
  local function loadAnimation(humanoid)
  	if cachedAnimationTrack then
  		return cachedAnimationTrack
  	end
  
  	local success, result = pcall(function()
  		local animation = Instance.new("Animation")
  		animation.AnimationId = ANIMATION_ID
  		return humanoid:LoadAnimation(animation)
  	end)
  
  	if success then
  		cachedAnimationTrack = result
  		debugPrint("Animation loaded successfully")
  		return cachedAnimationTrack
  	else
  		debugPrint("Failed to load poop animation")
  		return nil  -  Edit
  03:05:04.985  === END CHUNK 69 ===  -  Edit
  03:05:04.986    -  Edit
  03:05:05.152  === CHUNK 70 ===  -  Edit
  03:05:05.152    	end
  end
  
  -- Main spawn poop function with animation
  local function spawnPoop()
  	if isPooping then 
  		debugPrint("Already pooping - ignoring input")
  		return 
  	end
  
  	local character = player.Character
  	if not character then 
  		debugPrint("No character - cannot poop")
  		return 
  	end
  
  	local humanoid = character:FindFirstChild("Humanoid")
  	if not humanoid then 
  		debugPrint("No humanoid - cannot poop")
  		return 
  	end
  
  	debugPrint("Starting poop sequence")
  
  	-- Set cooldown
  	isPooping = true
  
  	-- Store original values
  	local originalWalkSpeed = humanoid.WalkSpeed
  	local originalJumpPower = humanoid.JumpPower
  
  	-- Lock movement
  	humanoid.WalkSpeed = 0
  	humanoid.JumpPower = 0
  
  	-- Load and play poop animation
  	local animationTrack = loadAnimation(humanoid)
  
  	local poopSpawned = false
  	local function spawnOnce()
  		if not poopSpawned then
  			poopSpawned = true
  
  			-- Restore movement
  			humanoid.WalkSpeed = originalWalkSpeed
  			humanoid.JumpPower = originalJumpPower
  
  			-- Spawn the actual poop(s)
  			actuallySpawnPoop()
    -  Edit
  03:05:05.152  === END CHUNK 70 ===  -  Edit
  03:05:05.152    -  Edit
  03:05:05.252  === CHUNK 71 ===  -  Edit
  03:05:05.253    			-- Reset cooldown
  			isPooping = false
  			debugPrint("Poop sequence completed")
  		end
  	end
  
  	if animationTrack then
  		-- Play animation
  		animationTrack:Play()
  		debugPrint("Playing poop animation")
  
  		-- Play poop sound
  		local success, _ = pcall(function()
  			poopSound:Play()
  		end)
  		if not success then
  			debugPrint("Failed to play poop sound")
  		end
  
  		-- Connect to animation end
  		animationTrack.Ended:Connect(spawnOnce)
  	else
  		-- If no animation, play sound immediately
  		local success, _ = pcall(function()
  			poopSound:Play()
  		end)
  		if not success then
  			debugPrint("Failed to play poop sound")
  		end
  	end
  
  	-- Backup timer
  	spawn(function()
  		wait(ANIMATION_TIMEOUT)
  		spawnOnce()
  	end)
  end
  
  -- Function to change poop type
  local function changePoopType(newType)
  	if poopFolder:FindFirstChild(newType) then
  		currentPoopType = newType
  		debugPrint("Changed poop type to: " .. newType)
  	else
  		debugPrint("Poop type '" .. newType .. "' not found in PoopFolder!")
  	end
  end
  
  -- Make functions globally accessible
  _G.spawnPoop = spawnPoop  -  Edit
  03:05:05.253  === END CHUNK 71 ===  -  Edit
  03:05:05.253    -  Edit
  03:05:05.357  === CHUNK 72 ===  -  Edit
  03:05:05.357    _G.changePoopType = changePoopType
  
  -- Key input handling
  UserInputService.InputBegan:Connect(function(input, gameProcessed)
  	if gameProcessed then return end
  
  	if input.KeyCode == Enum.KeyCode.P then
  		debugPrint("P key pressed")
  		spawnPoop()
  	end
  end)
  
  -- Initialize with default poop
  spawn(function()
  	wait(2) -- Wait for everything to load
  	local ShopConfig = require(ReplicatedStorage:WaitForChild("ShopConfig"))
  	currentPoopType = ShopConfig.DefaultPoop
  	debugPrint("Initialized with default poop: " .. currentPoopType)
  end)
  
  debugPrint("PoopScript setup complete")
--- END PoopScript ---

LocalScript: PortalClient (in StarterPlayerScripts) [StarterPlayer.StarterPlayerScripts]
Path: StarterPlayer.StarterPlayerScripts.PortalClient
Content:
  -- PortalClient (LocalScript in StarterPlayer.StarterPlayerScripts) 
  local Players = game:GetService("Players")
  local ReplicatedStorage = game:GetService("ReplicatedStorage")
  local TweenService = game:GetService("TweenService")
  local SoundService = game:GetService("SoundService")
  
  local player = Players.LocalPlayer
  local playerGui = player:WaitForChild("PlayerGui")
  
  -- Get ShopConfig
  local ShopConfig = require(ReplicatedStorage:WaitForChild("ShopConfig"))
  
  -- Debug system
  local function debugPrint(message)
  	if ShopConfig.Debug.Enabled and ShopConfig.Debug.ShowZoneDebug then
  		print("[PORTAL CLIENT]: " .. message)
  	end
  end
  
  -- Wait for RemoteEvent
  local PortalTeleportClient = ReplicatedStorage:WaitForChild("PortalTeleportClient")
  
  -- Create fade frame for teleport effects
  local function createFadeFrame()  -  Edit
  03:05:05.358  === END CHUNK 72 ===  -  Edit
  03:05:05.358    -  Edit
  03:05:05.459  === CHUNK 73 ===  -  Edit
  03:05:05.460    	local screenGui = Instance.new("ScreenGui")
  	screenGui.Name = "PortalFadeGui"
  	screenGui.ResetOnSpawn = false
  	screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
  	screenGui.Parent = playerGui
  
  	local frame = Instance.new("Frame")
  	frame.Name = "FadeFrame"
  	frame.Size = UDim2.new(1, 0, 1, 0)
  	frame.Position = UDim2.new(0, 0, 0, 0)
  	frame.BackgroundColor3 = Color3.new(0, 0, 0)
  	frame.BackgroundTransparency = 1
  	frame.BorderSizePixel = 0
  	frame.ZIndex = 1000
  	frame.Parent = screenGui
  
  	return frame
  end
  
  local fadeFrame = createFadeFrame()
  
  -- Sound setup
  local teleportSound = Instance.new("Sound")
  teleportSound.SoundId = ShopConfig.Portals.Effects.TeleportSoundId
  teleportSound.Volume = ShopConfig.Portals.Effects.Volume
  teleportSound.Parent = workspace
  
  local errorSound = Instance.new("Sound")
  errorSound.SoundId = ShopConfig.Portals.Effects.RequirementNotMetSound
  errorSound.Volume = ShopConfig.Portals.Effects.Volume
  errorSound.Parent = workspace
  
  -- Fade effects
  local function fadeOut(duration, callback)
  	local tween = TweenService:Create(fadeFrame, TweenInfo.new(duration), {BackgroundTransparency = 0})
  	tween:Play()
  	if callback then
  		tween.Completed:Connect(callback)
  	end
  end
  
  local function fadeIn(duration, callback)
  	local tween = TweenService:Create(fadeFrame, TweenInfo.new(duration), {BackgroundTransparency = 1})
  	tween:Play()
  	if callback then
  		tween.Completed:Connect(callback)
  	end
  end
  
  -- Handle teleport events from server  -  Edit
  03:05:05.460  === END CHUNK 73 ===  -  Edit
  03:05:05.460    -  Edit
  03:05:05.565  === CHUNK 74 ===  -  Edit
  03:05:05.565    PortalTeleportClient.OnClientEvent:Connect(function(eventType, data)
  	if eventType == "TeleportStart" then
  		debugPrint("Starting teleport")
  		teleportSound:Play()
  		fadeOut(0.3)
  
  	elseif eventType == "TeleportComplete" then
  		debugPrint("Teleport completed")
  		wait(0.1) -- Small delay before fading back in
  		fadeIn(0.5)
  
  	elseif eventType == "TeleportFailed" then
  		debugPrint("Teleport failed")
  		errorSound:Play()
  		fadeIn(0.3)
  
  	elseif eventType == "RequirementNotMet" then
  		debugPrint("Portal requirement not met: " .. (data.message or "Unknown"))
  		errorSound:Play()
  	end
  end)
  
  debugPrint("PortalClient initialized - effects only!")
--- END PortalClient ---

LocalScript: CurrencyUpdaterScript (in PooBucks) [StarterGui]
Path: StarterGui.CurrencyGui.Background.PooBucks.CurrencyUpdaterScript
Content:
  local Players = game:GetService("Players")
  local TweenService = game:GetService("TweenService")
  local player = Players.LocalPlayer
  
  local label = script.Parent
  local currentDisplayValue = 0
  
  local function formatNumber(num)
  	if num >= 1e9 then
  		return string.format("%.1fB", num / 1e9)
  	elseif num >= 1e6 then
  		return string.format("%.1fM", num / 1e6)
  	elseif num >= 1e3 then
  		return string.format("%.1fk", num / 1e3)
  	else
  		return tostring(math.floor(num))
  	end
  end
  
  local function smoothCountTo(targetValue)
  	local startValue = currentDisplayValue
  	local difference = targetValue - startValue  -  Edit
  03:05:05.565  === END CHUNK 74 ===  -  Edit
  03:05:05.565    -  Edit
  03:05:05.669  === CHUNK 75 ===  -  Edit
  03:05:05.669    
  	-- Don't animate if the difference is too small or if it's the initial load
  	if math.abs(difference) <= 1 or startValue == 0 then
  		currentDisplayValue = targetValue
  		label.Text = formatNumber(targetValue) .. "$"
  		return
  	end
  
  	-- Create scaling effect when value changes
  	local scaleInfo = TweenInfo.new(0.15, Enum.EasingStyle.Quart, Enum.EasingDirection.Out)
  	local scaleUpTween = TweenService:Create(label, scaleInfo, {Size = UDim2.new(label.Size.X.Scale * 1.1, 0, label.Size.Y.Scale * 1.1, 0)})
  	local scaleDownTween = TweenService:Create(label, scaleInfo, {Size = UDim2.new(label.Size.X.Scale, 0, label.Size.Y.Scale, 0)})
  
  	-- Brief color flash for positive changes
  	if difference > 0 then
  		local colorInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quart, Enum.EasingDirection.Out)
  		local colorTween = TweenService:Create(label, colorInfo, {TextColor3 = Color3.fromRGB(85, 255, 127)})
  		local colorBackTween = TweenService:Create(label, colorInfo, {TextColor3 = Color3.fromRGB(255, 255, 255)})
  
  		colorTween:Play()
  		colorTween.Completed:Connect(function()
  			colorBackTween:Play()
  		end)
  	end
  
  	-- Play scale animation
  	scaleUpTween:Play()
  	scaleUpTween.Completed:Connect(function()
  		scaleDownTween:Play()
  	end)
  
  	-- Smooth counting animation
  	local duration = math.min(1, math.max(0.3, math.log(math.abs(difference)) * 0.1))
  	local steps = math.min(60, math.max(10, math.abs(difference)))
  	local stepTime = duration / steps
  
  	local connection
  	local currentStep = 0
  
  	connection = game:GetService("RunService").Heartbeat:Connect(function()
  		currentStep = currentStep + 1
  		local progress = currentStep / steps
  
  		-- Use easing for smooth animation
  		local easedProgress = 1 - math.pow(1 - progress, 3) -- Ease out cubic
  
  		currentDisplayValue = startValue + (difference * easedProgress)
  		label.Text = "PooBucks: " .. formatNumber(currentDisplayValue) .. "$"
  
  		if currentStep >= steps then  -  Edit
  03:05:05.669  === END CHUNK 75 ===  -  Edit
  03:05:05.669    -  Edit
  03:05:05.773  === CHUNK 76 ===  -  Edit
  03:05:05.773    			currentDisplayValue = targetValue
  			label.Text = "PooBucks: " .. formatNumber(targetValue) .. "$"
  			connection:Disconnect()
  		end
  	end)
  end
  
  local function updateLabel()
  	local leaderstats = player:WaitForChild("leaderstats")
  	local pooBucks = leaderstats:WaitForChild("PooBucks")
  
  	-- Set initial value
  	currentDisplayValue = pooBucks.Value
  	label.Text = "PooBucks: " .. formatNumber(pooBucks.Value) .. "$"
  
  	-- Update smoothly every time the value changes
  	pooBucks:GetPropertyChangedSignal("Value"):Connect(function()
  		smoothCountTo(pooBucks.Value)
  	end)
  end
  
  updateLabel()
--- END CurrencyUpdaterScript ---

LocalScript: PoopButtonGuiAnimation (in Button) [StarterGui]
Path: StarterGui.PoopButtonGui.CanvasBackground.Button.PoopButtonGuiAnimation
Content:
  -- GUI Effects Script
  local Players = game:GetService("Players")
  local TweenService = game:GetService("TweenService")
  
  local player = Players.LocalPlayer
  local playerGui = player:WaitForChild("PlayerGui")
  
  -- CONFIGURABLE CONSTANTS
  local SLIDE_OUT_DURATION = 0.3
  local SLIDE_IN_DURATION = 0.2
  local POP_DURATION = 0.1
  local SLIDE_DISTANCE = 30
  local SHRINK_SCALE = 0.58
  local GROW_SCALE = 1.20
  local HOVER_SOUND_ID = "rbxassetid://17208339919"
  local CLICK_SOUND_ID = "rbxassetid://17670953919"
  local HOVER_VOLUME = 1
  local CLICK_VOLUME = 1
  
  -- Wait for GUI elements
  local poopButtonGui = playerGui:WaitForChild("PoopButtonGui")
  local canvasBackground = poopButtonGui:WaitForChild("CanvasBackground")
  local poopButton = script.Parent  -  Edit
  03:05:05.773  === END CHUNK 76 ===  -  Edit
  03:05:05.773    -  Edit
  03:05:05.878  === CHUNK 77 ===  -  Edit
  03:05:05.878    
  -- Get slide frames
  local slideFrame1 = script.Parent.Parent:WaitForChild("SlideFrame1")
  local slideFrame2 = script.Parent.Parent:WaitForChild("SlideFrame2")
  local slideFrame3 = script.Parent.Parent:WaitForChild("SlideFrame3")
  local slideFrame4 = script.Parent.Parent:WaitForChild("SlideFrame4")
  
  -- Store original positions and frames
  local slideFrames = {slideFrame1, slideFrame2, slideFrame3, slideFrame4}
  local originalPositions = {}
  for i, frame in pairs(slideFrames) do
  	originalPositions[i] = frame.Position
  end
  
  -- Store original canvas size
  local originalCanvasSize = canvasBackground.Size
  
  -- Create sounds with error handling
  local hoverSound = Instance.new("Sound")
  local clickSound = Instance.new("Sound")
  
  local function setupSound(sound, soundId, volume, parent)
  	local success, _ = pcall(function()
  		sound.SoundId = soundId
  		sound.Volume = volume
  		sound.Parent = parent
  	end)
  	if not success then
  		warn("Failed to setup sound: " .. soundId)
  	end
  	return sound
  end
  
  setupSound(hoverSound, HOVER_SOUND_ID, HOVER_VOLUME, poopButton)
  setupSound(clickSound, CLICK_SOUND_ID, CLICK_VOLUME, poopButton)
  
  -- Tween settings
  local slideOutInfo = TweenInfo.new(SLIDE_OUT_DURATION, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
  local slideInInfo = TweenInfo.new(SLIDE_IN_DURATION, Enum.EasingStyle.Quart, Enum.EasingDirection.Out)
  local popInfo = TweenInfo.new(POP_DURATION, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
  
  -- Function to slide frames out
  local function slideFramesOut()
  	for i, frame in pairs(slideFrames) do
  		local newPosition = UDim2.new(
  			originalPositions[i].X.Scale,
  			originalPositions[i].X.Offset,
  			originalPositions[i].Y.Scale,
  			originalPositions[i].Y.Offset - SLIDE_DISTANCE
  		)  -  Edit
  03:05:05.878  === END CHUNK 77 ===  -  Edit
  03:05:05.878    -  Edit
  03:05:05.980  === CHUNK 78 ===  -  Edit
  03:05:05.981    		local success, tween = pcall(function()
  			return TweenService:Create(frame, slideOutInfo, {Position = newPosition})
  		end)
  		if success then
  			tween:Play()
  		end
  	end
  end
  
  -- Function to slide frames back to original position
  local function slideFramesIn()
  	for i, frame in pairs(slideFrames) do
  		local success, tween = pcall(function()
  			return TweenService:Create(frame, slideInInfo, {Position = originalPositions[i]})
  		end)
  		if success then
  			tween:Play()
  		end
  	end
  end
  
  -- Function for button pop effect
  local function buttonPop()
  	local success, shrinkTween = pcall(function()
  		return TweenService:Create(canvasBackground, popInfo, {
  			Size = UDim2.new(originalCanvasSize.X.Scale * SHRINK_SCALE, 0, originalCanvasSize.Y.Scale * SHRINK_SCALE, 0)
  		})
  	end)
  
  	if not success then return end
  
  	shrinkTween:Play()
  	shrinkTween.Completed:Connect(function()
  		local growSuccess, growTween = pcall(function()
  			return TweenService:Create(canvasBackground, popInfo, {
  				Size = UDim2.new(originalCanvasSize.X.Scale * GROW_SCALE, 0, originalCanvasSize.Y.Scale * GROW_SCALE, 0)
  			})
  		end)
  
  		if not growSuccess then return end
  
  		growTween:Play()
  		growTween.Completed:Connect(function()
  			local returnSuccess, returnTween = pcall(function()
  				return TweenService:Create(canvasBackground, popInfo, {Size = originalCanvasSize})
  			end)
  			if returnSuccess then
  				returnTween:Play()
  			end
  		end)  -  Edit
  03:05:05.981  === END CHUNK 78 ===  -  Edit
  03:05:05.981    -  Edit
  03:05:06.081  === CHUNK 79 ===  -  Edit
  03:05:06.081    	end)
  end
  
  -- Function to safely play sound
  local function playSound(sound)
  	local success, _ = pcall(function()
  		sound:Play()
  	end)
  	if not success then
  		warn("Failed to play sound")
  	end
  end
  
  -- Connect hover events
  poopButton.MouseEnter:Connect(function()
  	playSound(hoverSound)
  	slideFramesOut()
  end)
  
  poopButton.MouseLeave:Connect(function()
  	slideFramesIn()
  end)
  
  -- Connect button click for effects only
  poopButton.MouseButton1Click:Connect(function()
  	playSound(clickSound)
  	buttonPop()
  
  	-- Signal to poop script that button was clicked
  	if _G.spawnPoop then
  		_G.spawnPoop()
  	end
  end)
--- END PoopButtonGuiAnimation ---

Script: AutoPrimaryScript (in WaterPoop) [StarterGui]
Path: StarterGui.ShopGui.ShopFrame.CanvasBackground.PoopsScrollingFrame.Background.WaterPoopButton.ViewportFrame.WaterPoop.AutoPrimaryScript
Content:
  -- Replace 'YourModelName' with the actual name of your model
  local model = script.Parent
  
  -- Create the new part
  local mainPart = Instance.new("Part")
  mainPart.Name = "Main"
  mainPart.Size = Vector3.new(1, 1, 1)
  mainPart.Transparency = 1  -- Makes it invisible
  mainPart.CanCollide = false  -- Makes it non-collidable
  mainPart.Anchored = true  -- Anchored so it doesn't fall
  
  -- Parent to workspace temporarily  -  Edit
  03:05:06.081  === END CHUNK 79 ===  -  Edit
  03:05:06.082    -  Edit
  03:05:06.185  === CHUNK 80 ===  -  Edit
  03:05:06.185    mainPart.Parent = workspace
  
  -- Get the model's center position
  local modelCFrame = model:GetModelCFrame()
  mainPart.CFrame = modelCFrame
  
  -- Parent the part into the model
  mainPart.Parent = model
  
  -- Set the model's PrimaryPart to this new part
  model.PrimaryPart = mainPart
--- END AutoPrimaryScript ---

Script: SpinScript (in WaterPoop) [StarterGui]
Path: StarterGui.ShopGui.ShopFrame.CanvasBackground.PoopsScrollingFrame.Background.WaterPoopButton.ViewportFrame.WaterPoop.SpinScript
Content:
  local RunService = game:GetService("RunService")
  
  -- Replace 'YourModelName' with your model's name
  local model = script.Parent
  
  local rotationSpeed = 0.5 -- Rotations per second
  local connection
  
  connection = RunService.Heartbeat:Connect(function(deltaTime)
  	local currentCFrame = model:GetPivot()
  	local rotationAmount = math.rad(360 * rotationSpeed * deltaTime)
  	local newCFrame = currentCFrame * CFrame.Angles(0, rotationAmount, 0)
  
  	model:PivotTo(newCFrame)
  end)
  
  -- To stop the rotation, run: connection:Disconnect()
  print("Model is now rotating continuously. Run 'connection:Disconnect()' to stop.")
--- END SpinScript ---

LocalScript: ShopScript (in ShopGui) [StarterGui]
Path: StarterGui.ShopGui.ShopScript
Content:
  -- ShopScript (LocalScript in StarterGui.ShopGUI) - UPDATED WITH FIXED BUTTON EFFECTS
  local Players = game:GetService("Players")
  local ReplicatedStorage = game:GetService("ReplicatedStorage")
  local TweenService = game:GetService("TweenService")
  local SoundService = game:GetService("SoundService")
  local Lighting = game:GetService("Lighting")
  
  local player = Players.LocalPlayer
  local camera = workspace.CurrentCamera
  local shopGUI = script.Parent
  local ShopConfig = require(ReplicatedStorage:WaitForChild("ShopConfig"))  -  Edit
  03:05:06.185  === END CHUNK 80 ===  -  Edit
  03:05:06.185    -  Edit
  03:05:06.285  === CHUNK 81 ===  -  Edit
  03:05:06.285    
  -- Debug system
  local function debugPrint(message)
  	if ShopConfig.Debug.Enabled and ShopConfig.Debug.ShowShopDebug then
  		print("[SHOP CLIENT]: " .. message)
  	end
  end
  
  -- Store original states
  local originalFOV = camera.FieldOfView
  local originalGUIs = {}
  local originalBlurSize = 0
  local blur = nil
  
  -- Animation state management
  local isAnimating = false
  local isShopOpen = false
  
  -- Button original states storage
  local buttonOriginalStates = {}
  
  -- Create or get blur effect
  local function setupBlur()
  	blur = Lighting:FindFirstChild("Blur")
  	if not blur then
  		blur = Instance.new("BlurEffect")
  		blur.Name = "Blur"
  		blur.Size = 0
  		blur.Parent = Lighting
  	end
  	originalBlurSize = blur.Size
  end
  
  -- Sound setup
  local sounds = {}
  for soundName, soundId in pairs(ShopConfig.Sounds) do
  	if type(soundId) == "string" and soundId ~= "" then
  		local sound = Instance.new("Sound")
  		sound.SoundId = soundId
  		sound.Volume = ShopConfig.Sounds.Volumes.UI or 0.5
  		sound.Parent = workspace
  		sounds[soundName] = sound
  	end
  end
  
  -- Wait for RemoteEvents
  local RemoteEvent_OpenShop = ReplicatedStorage:WaitForChild("RemoteEvent_OpenShop")
  local PurchaseRequest = ReplicatedStorage:WaitForChild("PurchaseRequest")
  local EquipPoopClientEvent = ReplicatedStorage:WaitForChild("EquipPoopClientEvent")
  local GetPlayerDataRemote = ReplicatedStorage:WaitForChild("GetPlayerDataRemote")  -  Edit
  03:05:06.286  === END CHUNK 81 ===  -  Edit
  03:05:06.286    -  Edit
  03:05:06.390  === CHUNK 82 ===  -  Edit
  03:05:06.390    local PurchaseResultEvent = ReplicatedStorage:WaitForChild("PurchaseResultEvent")
  local RemoteEvent_CloseShop = ReplicatedStorage:WaitForChild("RemoteEvent_CloseShop")
  local GiftPurchaseRequest = ReplicatedStorage:WaitForChild("GiftPurchaseRequest")
  local ValidateUsernameRemote = ReplicatedStorage:WaitForChild("ValidateUsernameRemote")
  
  -- GUI References
  local shopFrame = shopGUI:WaitForChild("ShopFrame")
  local canvasBackground = shopFrame:WaitForChild("CanvasBackground")
  local buttonsBackground = canvasBackground:WaitForChild("ButtonsBackground")
  local infoBackground = canvasBackground:WaitForChild("InfoBackground")
  
  -- Tab buttons
  local poopsButton = buttonsBackground:WaitForChild("PoopsButton")
  local upgradesButton = buttonsBackground:WaitForChild("UpgradesButton")
  local gamepassesButton = buttonsBackground:WaitForChild("GamepassesButton")
  
  -- Scrolling frames
  local poopsScrollingFrame = canvasBackground:WaitForChild("PoopsScrollingFrame")
  local upgradesScrollingFrame = canvasBackground:WaitForChild("UpgradesScrollingFrame")
  local gamepassesScrollingFrame = canvasBackground:WaitForChild("GamepassesScrollingFrame")
  
  -- Info panel elements
  local poopViewportFrame = infoBackground:WaitForChild("PoopViewportFrame")
  local poopImageLabel = infoBackground:WaitForChild("PoopImageLabel")
  local nameLabel = infoBackground:WaitForChild("NameLabel")
  local descriptionLabel = infoBackground:WaitForChild("DescriptionLabel")
  local gainLabel = infoBackground:WaitForChild("GainLabel")
  local buyButton = infoBackground:WaitForChild("BuyButton")
  
  -- Gift system elements
  local gamepassBuyAndGiftButtons = infoBackground:WaitForChild("GamepassBuyAndGiftButtons")
  local giftAPlayerButton = gamepassBuyAndGiftButtons:WaitForChild("GiftAPlayerButton")
  local buyGamepassButton = gamepassBuyAndGiftButtons:WaitForChild("BuyGamepassButton")
  local giftFrame = canvasBackground:WaitForChild("GiftFrame")
  local gamepassTitleTextLabel = giftFrame:WaitForChild("GamepassTitleTextLabel")
  local gamepassDescription = giftFrame:WaitForChild("GamepassDescription")
  local typePlayerUsernameTextbox = giftFrame:WaitForChild("TypePlayerUsernameTextbox")
  local giftAPlayerButtonInFrame = giftFrame:WaitForChild("GiftAPlayerButton")
  local exitGiftFrameButton = giftFrame:WaitForChild("ExitGiftFrameButton")
  
  -- Exit button
  local exitButton = shopFrame:WaitForChild("ExitButton")
  
  -- State
  local currentTab = "Poops"
  local selectedItem = nil
  local selectedCategory = nil
  local playerData = {}
  local isGiftFrameOpen = false
    -  Edit
  03:05:06.390  === END CHUNK 82 ===  -  Edit
  03:05:06.390    -  Edit
  03:05:06.493  === CHUNK 83 ===  -  Edit
  03:05:06.493    debugPrint("ShopScript initialized")
  
  -- Store original properties
  local originalShopSize = shopFrame.Size
  local originalShopPosition = shopFrame.Position
  local originalGiftFrameSize = giftFrame.Size
  local originalGiftFramePosition = giftFrame.Position
  
  -- Initialize GUI state
  shopGUI.Enabled = false
  setupBlur()
  giftFrame.Visible = false
  gamepassBuyAndGiftButtons.Visible = false
  
  -- FIXED: Button effects that prevent color whitening
  local function storeButtonOriginalState(button)
  	if not buttonOriginalStates[button] then
  		buttonOriginalStates[button] = {
  			Size = button.Size,
  			BackgroundColor3 = button.BackgroundColor3,
  			Rotation = button.Rotation,
  			isHovering = false
  		}
  	end
  end
  
  local function setupButtonEffects(button)
  	storeButtonOriginalState(button)
  	local originalState = buttonOriginalStates[button]
  
  	-- Hover effects
  	button.MouseEnter:Connect(function()
  		if originalState.isHovering then return end
  		originalState.isHovering = true
  
  		playSound("ButtonHover")
  
  		local hoverConfig = ShopConfig.Tweens.ButtonHover
  		local tweenInfo = TweenInfo.new(
  			hoverConfig.Duration,
  			hoverConfig.EasingStyle,
  			hoverConfig.EasingDirection
  		)
  
  		-- FIXED: Use original color, don't lerp towards white repeatedly
  		local targetColor = originalState.BackgroundColor3:lerp(Color3.new(1, 1, 1), hoverConfig.ColorLerp)
  
  		local tween = TweenService:Create(button, tweenInfo, {
  			Size = UDim2.new(
  				originalState.Size.X.Scale * hoverConfig.ScaleMultiplier,   -  Edit
  03:05:06.494  === END CHUNK 83 ===  -  Edit
  03:05:06.494    -  Edit
  03:05:06.594  === CHUNK 84 ===  -  Edit
  03:05:06.594    				0, 
  				originalState.Size.Y.Scale * hoverConfig.ScaleMultiplier, 
  				0
  			),
  			BackgroundColor3 = targetColor
  		})
  		tween:Play()
  	end)
  
  	button.MouseLeave:Connect(function()
  		if not originalState.isHovering then return end
  		originalState.isHovering = false
  
  		local hoverConfig = ShopConfig.Tweens.ButtonHover
  		local tweenInfo = TweenInfo.new(
  			hoverConfig.Duration,
  			hoverConfig.EasingStyle,
  			hoverConfig.EasingDirection
  		)
  
  		-- FIXED: Return to exact original state
  		local tween = TweenService:Create(button, tweenInfo, {
  			Size = originalState.Size,
  			BackgroundColor3 = originalState.BackgroundColor3,
  			Rotation = originalState.Rotation
  		})
  		tween:Play()
  	end)
  
  	-- Click effects
  	button.MouseButton1Down:Connect(function()
  		playSound("ButtonClick")
  
  		local clickConfig = ShopConfig.Tweens.ButtonClick
  		local tweenInfo = TweenInfo.new(
  			clickConfig.Duration,
  			clickConfig.EasingStyle,
  			clickConfig.EasingDirection
  		)
  
  		local tween = TweenService:Create(button, tweenInfo, {
  			Size = UDim2.new(
  				originalState.Size.X.Scale * clickConfig.ScaleMultiplier, 
  				0, 
  				originalState.Size.Y.Scale * clickConfig.ScaleMultiplier, 
  				0
  			),
  			Rotation = originalState.Rotation + math.random(-clickConfig.RotationRange, clickConfig.RotationRange)
  		})
  		tween:Play()  -  Edit
  03:05:06.594  === END CHUNK 84 ===  -  Edit
  03:05:06.594    -  Edit
  03:05:06.697  === CHUNK 85 ===  -  Edit
  03:05:06.698    	end)
  
  	button.MouseButton1Up:Connect(function()
  		local hoverConfig = ShopConfig.Tweens.ButtonHover
  		local tweenInfo = TweenInfo.new(
  			hoverConfig.Duration,
  			Enum.EasingStyle.Back,
  			Enum.EasingDirection.Out
  		)
  
  		-- Return to hover state if still hovering, otherwise to original
  		local targetSize = originalState.isHovering and 
  			UDim2.new(
  				originalState.Size.X.Scale * hoverConfig.ScaleMultiplier, 
  				0, 
  				originalState.Size.Y.Scale * hoverConfig.ScaleMultiplier, 
  				0
  			) or originalState.Size
  
  		local tween = TweenService:Create(button, tweenInfo, {
  			Size = targetSize,
  			Rotation = originalState.Rotation
  		})
  		tween:Play()
  	end)
  end
  
  -- Animation functions
  local function openShopAnimation()
  	if isAnimating or isShopOpen then return end
  
  	isAnimating = true
  	isShopOpen = true
  
  	-- Store original GUI states
  	originalGUIs = {}
  	for _, gui in pairs(player.PlayerGui:GetChildren()) do
  		if gui:IsA("ScreenGui") and gui ~= shopGUI and gui.Enabled then
  			originalGUIs[gui] = true
  			gui.Enabled = false
  		end
  	end
  
  	shopFrame.Size = UDim2.new(0, 0, 0, 0)
  	shopFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
  	shopGUI.Enabled = true
  
  	playSound("ShopOpen")
  
  	local openConfig = ShopConfig.Tweens.ShopOpen  -  Edit
  03:05:06.698  === END CHUNK 85 ===  -  Edit
  03:05:06.698    -  Edit
  03:05:06.802  === CHUNK 86 ===  -  Edit
  03:05:06.802    	local tweenInfo = TweenInfo.new(openConfig.Duration, openConfig.EasingStyle, openConfig.EasingDirection)
  
  	local shopTween = TweenService:Create(shopFrame, tweenInfo, {
  		Size = originalShopSize,
  		Position = originalShopPosition
  	})
  
  	local fovTween = TweenService:Create(camera, tweenInfo, {
  		FieldOfView = openConfig.FOV
  	})
  
  	local blurTween = TweenService:Create(blur, tweenInfo, {
  		Size = openConfig.BlurSize
  	})
  
  	shopTween:Play()
  	fovTween:Play()
  	blurTween:Play()
  
  	shopTween.Completed:Connect(function()
  		isAnimating = false
  	end)
  end
  
  local function closeShopAnimation()
  	if isAnimating or not isShopOpen then return end
  
  	isAnimating = true
  	isShopOpen = false
  
  	playSound("ShopClose")
  
  	local closeConfig = ShopConfig.Tweens.ShopClose
  	local tweenInfo = TweenInfo.new(closeConfig.Duration, closeConfig.EasingStyle, closeConfig.EasingDirection)
  
  	local shopTween = TweenService:Create(shopFrame, tweenInfo, {
  		Size = UDim2.new(0, 0, 0, 0),
  		Position = UDim2.new(0.5, 0, 0.5, 0)
  	})
  
  	local fovTween = TweenService:Create(camera, tweenInfo, {
  		FieldOfView = originalFOV
  	})
  
  	local blurTween = TweenService:Create(blur, tweenInfo, {
  		Size = originalBlurSize
  	})
  
  	shopTween:Play()
  	fovTween:Play()  -  Edit
  03:05:06.802  === END CHUNK 86 ===  -  Edit
  03:05:06.802    -  Edit
  03:05:06.905  === CHUNK 87 ===  -  Edit
  03:05:06.905    	blurTween:Play()
  
  	shopTween.Completed:Connect(function()
  		shopGUI.Enabled = false
  
  		for gui, _ in pairs(originalGUIs) do
  			if gui and gui.Parent then
  				gui.Enabled = true
  			end
  		end
  		originalGUIs = {}
  
  		shopFrame.Size = originalShopSize
  		shopFrame.Position = originalShopPosition
  		isAnimating = false
  	end)
  end
  
  -- Gift frame animations
  local function openGiftFrame()
  	if isGiftFrameOpen then return end
  
  	isGiftFrameOpen = true
  	giftFrame.Size = UDim2.new(0, 0, 0, 0)
  	giftFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
  	giftFrame.Visible = true
  
  	local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
  	local openTween = TweenService:Create(giftFrame, tweenInfo, {
  		Size = originalGiftFrameSize,
  		Position = originalGiftFramePosition
  	})
  
  	openTween:Play()
  	typePlayerUsernameTextbox.Text = ""
  end
  
  local function closeGiftFrame()
  	if not isGiftFrameOpen then return end
  
  	isGiftFrameOpen = false
  
  	local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Back, Enum.EasingDirection.In)
  	local closeTween = TweenService:Create(giftFrame, tweenInfo, {
  		Size = UDim2.new(0, 0, 0, 0),
  		Position = UDim2.new(0.5, 0, 0.5, 0)
  	})
  
  	closeTween:Play()
  	closeTween.Completed:Connect(function()  -  Edit
  03:05:06.905  === END CHUNK 87 ===  -  Edit
  03:05:06.905    -  Edit
  03:05:07.006  === CHUNK 88 ===  -  Edit
  03:05:07.006    		giftFrame.Visible = false
  		giftFrame.Size = originalGiftFrameSize
  		giftFrame.Position = originalGiftFramePosition
  	end)
  end
  
  -- Sound functions
  function playSound(soundName)
  	if sounds[soundName] then
  		sounds[soundName]:Play()
  	end
  end
  
  -- Function to get fresh player data
  local function updatePlayerData()
  	local success, data = pcall(function()
  		return GetPlayerDataRemote:InvokeServer()
  	end)
  
  	if success and data then
  		playerData = data
  		return true
  	else
  		return false
  	end
  end
  
  local function switchTab(tabName)
  	playSound("TabSwitch")
  
  	-- Hide all frames
  	for buttonName, frameName in pairs(ShopConfig.Tabs) do
  		canvasBackground[frameName].Visible = false
  	end
  
  	-- Show selected frame
  	local targetFrame = ShopConfig.Tabs[tabName .. "Button"]
  	if targetFrame then
  		canvasBackground[targetFrame].Visible = true
  		currentTab = tabName
  	end
  
  	if isGiftFrameOpen then
  		closeGiftFrame()
  	end
  end
  
  local function updatePreview(category, itemKey)
  	if category == "Poops" then
  		poopViewportFrame.Visible = true  -  Edit
  03:05:07.006  === END CHUNK 88 ===  -  Edit
  03:05:07.006    -  Edit
  03:05:07.110  === CHUNK 89 ===  -  Edit
  03:05:07.110    		poopImageLabel.Visible = false
  
  		for _, child in pairs(poopViewportFrame:GetChildren()) do
  			if child:IsA("Model") then
  				child:Destroy()
  			end
  		end
  
  		local config = ShopConfig.Poops[itemKey]
  		if config and config.ModelName then
  			local poopFolder = ReplicatedStorage:FindFirstChild("PoopFolder")
  			if poopFolder then
  				local originalModel = poopFolder:FindFirstChild(config.ModelName)
  				if originalModel then
  					local modelClone = originalModel:Clone()
  					modelClone.Parent = poopViewportFrame
  
  					if modelClone.PrimaryPart then
  						modelClone.PrimaryPart.Position = ShopConfig.Preview.ModelOffset
  						modelClone.PrimaryPart.Orientation = ShopConfig.Preview.ModelRotation
  					end
  				end
  			end
  		end
  	else
  		poopViewportFrame.Visible = false
  		poopImageLabel.Visible = true
  
  		local config = nil
  		if category == "Upgrades" then
  			config = ShopConfig.Upgrades[itemKey]
  		elseif category == "Gamepasses" then
  			config = ShopConfig.Gamepasses[itemKey]
  		elseif category == "Boosts" then
  			config = ShopConfig.Boosts[itemKey]
  		end
  
  		if config and config.Image then
  			poopImageLabel.Image = config.Image
  		end
  	end
  end
  
  -- UPDATED: Info panel with gamepass gifting fix
  local function updateInfoPanel(category, itemKey)
  	local config = nil
  
  	if category == "Poops" then
  		config = ShopConfig.Poops[itemKey]
  	elseif category == "Upgrades" then  -  Edit
  03:05:07.110  === END CHUNK 89 ===  -  Edit
  03:05:07.110    -  Edit
  03:05:07.210  === CHUNK 90 ===  -  Edit
  03:05:07.210    		config = ShopConfig.Upgrades[itemKey]
  	elseif category == "Gamepasses" then
  		config = ShopConfig.Gamepasses[itemKey]
  	elseif category == "Boosts" then
  		config = ShopConfig.Boosts[itemKey]
  	end
  
  	if not config then return end
  
  	nameLabel.Text = config.Name or "Unknown"
  
  	local priceText = ""
  	if category == "Gamepasses" or category == "Boosts" then
  		priceText = "Price: " .. (config.Price or 0) .. " Robux"
  	else
  		priceText = "Price: " .. (config.Price or 0) .. " PooBucks"
  	end
  	descriptionLabel.Text = priceText
  
  	if category == "Poops" then
  		gainLabel.Text = "+" .. (config.Gain or 0) .. " PooBucks per poop"
  	else
  		gainLabel.Text = config.Description or ""
  	end
  
  	-- Handle button visibility and gamepass ownership
  	if category == "Gamepasses" or category == "Boosts" then
  		buyButton.Visible = false
  		gamepassBuyAndGiftButtons.Visible = true
  
  		-- FIXED: Check if player owns gamepass and update button text
  		if category == "Gamepasses" then
  			local ownsGamepass = playerData.OwnedGamepasses and table.find(playerData.OwnedGamepasses, itemKey)
  			if ownsGamepass then
  				buyGamepassButton.Text = "You already own this!"
  				buyGamepassButton.BackgroundColor3 = Color3.fromRGB(100, 100, 100) -- Gray
  			else
  				buyGamepassButton.Text = "Buy"
  				buyGamepassButton.BackgroundColor3 = Color3.fromRGB(255, 152, 0) -- Orange
  			end
  		else
  			-- For boosts, always allow purchase
  			buyGamepassButton.Text = "Buy"
  			buyGamepassButton.BackgroundColor3 = Color3.fromRGB(255, 152, 0)
  		end
  	else
  		buyButton.Visible = true
  		gamepassBuyAndGiftButtons.Visible = false
  
  		local isOwned = false  -  Edit
  03:05:07.210  === END CHUNK 90 ===  -  Edit
  03:05:07.211    -  Edit
  03:05:07.314  === CHUNK 91 ===  -  Edit
  03:05:07.314    		local isEquipped = false
  
  		if category == "Poops" then
  			isOwned = playerData.OwnedPoops and table.find(playerData.OwnedPoops, itemKey)
  			isEquipped = playerData.EquippedPoop == itemKey
  
  			if isEquipped then
  				buyButton.Text = "EQUIPPED"
  				buyButton.BackgroundColor3 = Color3.fromRGB(46, 125, 50)
  			elseif isOwned then
  				buyButton.Text = "EQUIP"
  				buyButton.BackgroundColor3 = Color3.fromRGB(25, 118, 210)
  			else
  				buyButton.Text = "BUY"
  				buyButton.BackgroundColor3 = Color3.fromRGB(255, 152, 0)
  			end
  		else
  			isOwned = playerData.OwnedUpgrades and table.find(playerData.OwnedUpgrades, itemKey)
  			if isOwned then
  				buyButton.Text = "OWNED"
  				buyButton.BackgroundColor3 = Color3.fromRGB(46, 125, 50)
  			else
  				buyButton.Text = "BUY"
  				buyButton.BackgroundColor3 = Color3.fromRGB(255, 152, 0)
  			end
  		end
  	end
  
  	selectedItem = itemKey
  	selectedCategory = category
  	updatePreview(category, itemKey)
  end
  
  -- Setup boost buttons
  local function setupBoostButtons()
  	local boostsBackground = gamepassesScrollingFrame:FindFirstChild("BoostsBackground")
  	if not boostsBackground then return end
  
  	for itemKey, config in pairs(ShopConfig.Boosts) do
  		local button = boostsBackground:FindFirstChild(config.ButtonName or (itemKey .. "Button"))
  		if button then
  			setupButtonEffects(button)
  			button.MouseButton1Click:Connect(function()
  				updateInfoPanel("Boosts", itemKey)
  			end)
  		end
  	end
  end
  
  local function setupItemButtons()  -  Edit
  03:05:07.314  === END CHUNK 91 ===  -  Edit
  03:05:07.314    -  Edit
  03:05:07.417  === CHUNK 92 ===  -  Edit
  03:05:07.418    	-- Setup Poop buttons in correct order
  	local correctPoopOrder = {
  		{key = "Poop", buttonName = "PoopButton"},
  		{key = "StinkyPoop", buttonName = "StinkyPoopButton"},
  		{key = "BurntPoop", buttonName = "BurntPoopButton"},
  		{key = "WaterPoop", buttonName = "WaterPoopButton"},
  		{key = "ShockedPoop", buttonName = "ShockedPoopButton"},
  		{key = "HypnosisPoop", buttonName = "HypnosisPoopButton"},
  		{key = "HolyPoop", buttonName = "HolyPoopButton"},
  		{key = "BloodyPoop", buttonName = "BloodyPoopButton"},
  		{key = "DiamondPoop", buttonName = "DiamondPoopButton"},
  		{key = "VoidPoop", buttonName = "VoidPoopButton"},
  		{key = "GalePoop", buttonName = "GalePoopButton"},
  		{key = "BlackHolePoop", buttonName = "BlackHolePoopButton"},
  	}
  
  	for index, poopData in ipairs(correctPoopOrder) do
  		local itemKey = poopData.key
  		local buttonName = poopData.buttonName
  
  		local button = poopsScrollingFrame.Background:FindFirstChild(buttonName)
  
  		if button and ShopConfig.Poops[itemKey] then
  			if not button:GetAttribute("SetupComplete") then
  				button:SetAttribute("SetupComplete", true)
  				setupButtonEffects(button)
  
  				button.MouseButton1Click:Connect(function()
  					updateInfoPanel("Poops", itemKey)
  				end)
  
  				button.LayoutOrder = index
  			end
  		end
  	end
  
  	local layout = poopsScrollingFrame.Background:FindFirstChild("UIListLayout")
  	if layout then
  		layout.SortOrder = Enum.SortOrder.LayoutOrder
  	end
  
  	-- Setup Upgrade buttons
  	for itemKey, config in pairs(ShopConfig.Upgrades) do
  		local button = upgradesScrollingFrame.Background:FindFirstChild(itemKey .. "Button")
  		if button then
  			setupButtonEffects(button)
  			button.MouseButton1Click:Connect(function()
  				updateInfoPanel("Upgrades", itemKey)
  			end)
  		end  -  Edit
  03:05:07.418  === END CHUNK 92 ===  -  Edit
  03:05:07.418    -  Edit
  03:05:07.518  === CHUNK 93 ===  -  Edit
  03:05:07.518    	end
  
  	-- Setup Gamepass buttons
  	for itemKey, config in pairs(ShopConfig.Gamepasses) do
  		local button = gamepassesScrollingFrame.GamepassesBackground:FindFirstChild(itemKey .. "Button")
  		if button then
  			setupButtonEffects(button)
  			button.MouseButton1Click:Connect(function()
  				updateInfoPanel("Gamepasses", itemKey)
  			end)
  		end
  	end
  
  	setupBoostButtons()
  end
  
  -- Username validation
  local function validateUsername(username)
  	if not username or username == "" then
  		return false, "Please enter a username"
  	end
  
  	if #username < 3 or #username > 20 then
  		return false, "Username must be 3-20 characters"
  	end
  
  	local success, result = pcall(function()
  		return ValidateUsernameRemote:InvokeServer(username)
  	end)
  
  	if success then
  		return result.valid, result.message
  	else
  		return false, "Failed to validate username"
  	end
  end
  
  -- Handle gift purchase
  local function handleGiftPurchase()
  	local username = typePlayerUsernameTextbox.Text
  	local isValid, message = validateUsername(username)
  
  	if not isValid then
  		typePlayerUsernameTextbox.Text = ""
  		typePlayerUsernameTextbox.PlaceholderText = message
  		playSound("PurchaseFail")
  		return
  	end
  
  	GiftPurchaseRequest:FireServer(username, selectedCategory, selectedItem)  -  Edit
  03:05:07.519  === END CHUNK 93 ===  -  Edit
  03:05:07.519    -  Edit
  03:05:07.622  === CHUNK 94 ===  -  Edit
  03:05:07.623    	closeGiftFrame()
  end
  
  local function handlePurchase()
  	if not selectedItem or not selectedCategory then return end
  
  	if selectedCategory == "Poops" then
  		local isOwned = playerData.OwnedPoops and table.find(playerData.OwnedPoops, selectedItem)
  		local isEquipped = playerData.EquippedPoop == selectedItem
  
  		if isEquipped then
  			playSound("AlreadyOwned")
  			return
  		elseif isOwned then
  			PurchaseRequest:FireServer("Equip", selectedCategory, selectedItem)
  		else
  			PurchaseRequest:FireServer("Buy", selectedCategory, selectedItem)
  		end
  	else
  		local isOwned = playerData.OwnedUpgrades and table.find(playerData.OwnedUpgrades, selectedItem)
  		if isOwned then
  			playSound("AlreadyOwned")
  			return
  		else
  			PurchaseRequest:FireServer("Buy", selectedCategory, selectedItem)
  		end
  	end
  end
  
  -- UPDATED: Handle gamepass purchases with ownership check
  local function handleGamepassPurchase()
  	if selectedCategory == "Gamepasses" then
  		local ownsGamepass = playerData.OwnedGamepasses and table.find(playerData.OwnedGamepasses, selectedItem)
  		if ownsGamepass then
  			playSound("AlreadyOwned")
  			return
  		end
  	end
  
  	PurchaseRequest:FireServer("Buy", selectedCategory, selectedItem)
  end
  
  -- Event Connections
  RemoteEvent_OpenShop.OnClientEvent:Connect(function()
  	wait(0.1)
  	openShopAnimation()
  	updatePlayerData()
  end)
  
  RemoteEvent_CloseShop.OnClientEvent:Connect(function()  -  Edit
  03:05:07.623  === END CHUNK 94 ===  -  Edit
  03:05:07.623    -  Edit
  03:05:07.726  === CHUNK 95 ===  -  Edit
  03:05:07.726    	closeShopAnimation()
  end)
  
  EquipPoopClientEvent.OnClientEvent:Connect(function(poopName)
  	if _G.changePoopType then
  		_G.changePoopType(poopName)
  	end
  
  	playerData.EquippedPoop = poopName
  
  	if selectedCategory == "Poops" then
  		updateInfoPanel(selectedCategory, selectedItem)
  	end
  end)
  
  PurchaseResultEvent.OnClientEvent:Connect(function(success, message, category, itemKey)
  	if success then
  		playSound("PurchaseSuccess")
  		updatePlayerData()
  
  		if selectedCategory and selectedItem then
  			updateInfoPanel(selectedCategory, selectedItem)
  		end
  	else
  		playSound("PurchaseFail")
  	end
  end)
  
  -- Tab button connections
  poopsButton.MouseButton1Click:Connect(function()
  	switchTab("Poops")
  end)
  
  upgradesButton.MouseButton1Click:Connect(function()
  	switchTab("Upgrades")
  end)
  
  gamepassesButton.MouseButton1Click:Connect(function()
  	switchTab("Gamepasses")
  end)
  
  -- Button connections
  buyButton.MouseButton1Click:Connect(handlePurchase)
  buyGamepassButton.MouseButton1Click:Connect(handleGamepassPurchase)
  giftAPlayerButton.MouseButton1Click:Connect(function()
  	if selectedItem and selectedCategory then
  		local config = nil
  		if selectedCategory == "Gamepasses" then
  			config = ShopConfig.Gamepasses[selectedItem]
  		elseif selectedCategory == "Boosts" then  -  Edit
  03:05:07.726  === END CHUNK 95 ===  -  Edit
  03:05:07.726    -  Edit
  03:05:07.827  === CHUNK 96 ===  -  Edit
  03:05:07.827    			config = ShopConfig.Boosts[selectedItem]
  		end
  
  		if config then
  			gamepassTitleTextLabel.Text = config.Name or "Unknown Item"
  			gamepassDescription.Text = config.GiftDescription or config.Description or ""
  		end
  	end
  
  	openGiftFrame()
  end)
  
  giftAPlayerButtonInFrame.MouseButton1Click:Connect(handleGiftPurchase)
  exitGiftFrameButton.MouseButton1Click:Connect(function()
  	closeGiftFrame()
  end)
  exitButton.MouseButton1Click:Connect(function()
  	closeShopAnimation()
  end)
  
  -- Click outside gift frame to close
  local UserInputService = game:GetService("UserInputService")
  
  UserInputService.InputBegan:Connect(function(input, gameProcessed)
  	if input.UserInputType == Enum.UserInputType.MouseButton1 and not gameProcessed then
  		if isGiftFrameOpen then
  			local mouse = player:GetMouse()
  			local mouseX = mouse.X
  			local mouseY = mouse.Y
  
  			local framePos = giftFrame.AbsolutePosition
  			local frameSize = giftFrame.AbsoluteSize
  
  			local outsideX = mouseX < framePos.X or mouseX > framePos.X + frameSize.X
  			local outsideY = mouseY < framePos.Y or mouseY > framePos.Y + frameSize.Y
  
  			if outsideX or outsideY then
  				closeGiftFrame()
  			end
  		end
  	end
  end)
  
  -- Setup button effects
  setupButtonEffects(poopsButton)
  setupButtonEffects(upgradesButton)
  setupButtonEffects(gamepassesButton)
  setupButtonEffects(buyButton)
  setupButtonEffects(exitButton)
  setupButtonEffects(buyGamepassButton)  -  Edit
  03:05:07.827  === END CHUNK 96 ===  -  Edit
  03:05:07.827    -  Edit
  03:05:07.930  === CHUNK 97 ===  -  Edit
  03:05:07.930    setupButtonEffects(giftAPlayerButton)
  setupButtonEffects(giftAPlayerButtonInFrame)
  setupButtonEffects(exitGiftFrameButton)
  
  -- Initialize
  setupItemButtons()
  switchTab("Poops")
  
  spawn(function()
  	wait(1)
  	updatePlayerData()
  	updateInfoPanel("Poops", ShopConfig.DefaultPoop)
  end)
  
  debugPrint("ShopScript setup complete!")
--- END ShopScript ---

LocalScript: PopupManager (in PopupScreenGui) [StarterGui]
Path: StarterGui.PopupScreenGui.PopupManager
Content:
  -- PopupManager (LocalScript in StarterGui.PopupScreenGui) - SELF-MANAGING VERSION
  local Players = game:GetService("Players")
  local ReplicatedStorage = game:GetService("ReplicatedStorage")
  local TweenService = game:GetService("TweenService")
  
  local player = Players.LocalPlayer
  local playerGui = player:WaitForChild("PlayerGui")
  
  -- Get ShopConfig
  local ShopConfig = require(ReplicatedStorage:WaitForChild("ShopConfig"))
  
  -- Debug system
  local function debugPrint(message)
  	if ShopConfig.Debug.Enabled and ShopConfig.Debug.ShowClientDebug then
  		print("[POPUP]: " .. message)
  	end
  end
  
  -- Create/get popup GUI
  local popupScreenGui = playerGui:FindFirstChild("PopupScreenGui")
  if not popupScreenGui then
  	popupScreenGui = Instance.new("ScreenGui")
  	popupScreenGui.Name = "PopupScreenGui"
  	popupScreenGui.Parent = playerGui
  end
  
  -- Configure popup GUI properties
  popupScreenGui.ResetOnSpawn = false
  popupScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
  popupScreenGui.IgnoreGuiInset = false  -  Edit
  03:05:07.930  === END CHUNK 97 ===  -  Edit
  03:05:07.930    -  Edit
  03:05:08.033  === CHUNK 98 ===  -  Edit
  03:05:08.033    popupScreenGui.Enabled = true
  
  -- Create popup template
  local popupTemplate = popupScreenGui:FindFirstChild("PopupBackgroundTemplate")
  if popupTemplate then
  	popupTemplate:Destroy()
  end
  
  popupTemplate = Instance.new("CanvasGroup")
  popupTemplate.Name = "PopupBackgroundTemplate"
  popupTemplate.Size = UDim2.new(0, 150, 0, 50)
  popupTemplate.Position = UDim2.new(0, 0, 0, 0)
  popupTemplate.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
  popupTemplate.BackgroundTransparency = 0.3
  popupTemplate.BorderColor3 = Color3.fromRGB(255, 255, 255)
  popupTemplate.BorderSizePixel = 2
  popupTemplate.Visible = false
  popupTemplate.GroupTransparency = 0
  popupTemplate.Parent = popupScreenGui
  
  -- Create popup image
  local popupImage = Instance.new("ImageLabel")
  popupImage.Name = "PopupImage"
  popupImage.Size = UDim2.new(0, 40, 0, 40)
  popupImage.Position = UDim2.new(0, 5, 0.5, -20)
  popupImage.BackgroundTransparency = 1
  popupImage.Image = "rbxassetid://93748118707717" -- Default poop icon
  popupImage.ScaleType = Enum.ScaleType.Fit
  popupImage.Parent = popupTemplate
  
  -- Create text label
  local pooBucksLabel = Instance.new("TextLabel")
  pooBucksLabel.Name = "PooBucksGained"
  pooBucksLabel.Size = UDim2.new(1, -50, 1, 0)
  pooBucksLabel.Position = UDim2.new(0, 50, 0, 0)
  pooBucksLabel.BackgroundTransparency = 1
  pooBucksLabel.Text = "+$0"
  pooBucksLabel.TextColor3 = Color3.fromRGB(85, 255, 127) -- Green
  pooBucksLabel.TextSize = 18
  pooBucksLabel.TextStrokeTransparency = 0
  pooBucksLabel.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
  pooBucksLabel.Font = Enum.Font.SourceSansBold
  pooBucksLabel.TextXAlignment = Enum.TextXAlignment.Center
  pooBucksLabel.TextYAlignment = Enum.TextYAlignment.Center
  pooBucksLabel.Parent = popupTemplate
  
  -- Wait for remote event
  local poopGainPopupEvent = ReplicatedStorage:WaitForChild("PoopGainPopupEvent")
  
  debugPrint("PopupManager initialized with self-management")  -  Edit
  03:05:08.033  === END CHUNK 98 ===  -  Edit
  03:05:08.033    -  Edit
  03:05:08.135  === CHUNK 99 ===  -  Edit
  03:05:08.135    
  -- Create popup function
  local function createPoopGainPopup(amount)
  	if not amount or amount <= 0 then 
  		debugPrint("Invalid amount: " .. tostring(amount))
  		return 
  	end
  
  	debugPrint("Creating popup for amount: " .. amount)
  
  	-- Clone the template
  	local popup = popupTemplate:Clone()
  	popup.Visible = true
  	popup.GroupTransparency = 0
  	popup.Parent = popupScreenGui
  
  	-- Set the amount text
  	local amountLabel = popup:FindFirstChild("PooBucksGained")
  	if amountLabel then
  		amountLabel.Text = "+$" .. tostring(amount)
  	end
  
  	-- Random spawn position
  	local screenSize = workspace.CurrentCamera.ViewportSize
  	local randomX = math.random(100, screenSize.X - 200)
  	local randomY = math.random(200, screenSize.Y - 200)
  
  	popup.Position = UDim2.new(0, randomX, 0, randomY)
  
  	-- Animation
  	local popupConfig = ShopConfig.Tweens.PopupMove
  	local tweenInfo = TweenInfo.new(popupConfig.Duration, popupConfig.EasingStyle, popupConfig.EasingDirection)
  
  	-- Move up and fade out
  	local moveTween = TweenService:Create(popup, tweenInfo, {
  		Position = UDim2.new(0, randomX, 0, randomY - popupConfig.MoveDistance),
  		GroupTransparency = 1
  	})
  
  	moveTween:Play()
  
  	-- Clean up after animation
  	moveTween.Completed:Connect(function()
  		popup:Destroy()
  		debugPrint("Popup cleaned up")
  	end)
  end
  
  -- Connect to the remote event
  poopGainPopupEvent.OnClientEvent:Connect(function(amount)  -  Edit
  03:05:08.135  === END CHUNK 99 ===  -  Edit
  03:05:08.135    -  Edit
  03:05:08.236  === CHUNK 100 ===  -  Edit
  03:05:08.236    	createPoopGainPopup(amount)
  end)
  
  debugPrint("PopupManager ready!")
--- END PopupManager ---

LocalScript: BoostsScript (in BoostsGui) [StarterGui]
Path: StarterGui.BoostsGui.BoostsScript
Content:
  -- BoostsGui LocalScript (in StarterGui.BoostsGui) - FIXED VERSION
  local Players = game:GetService("Players")
  local ReplicatedStorage = game:GetService("ReplicatedStorage")
  local TweenService = game:GetService("TweenService")
  local UserInputService = game:GetService("UserInputService")
  local RunService = game:GetService("RunService")
  
  local player = Players.LocalPlayer
  local mouse = player:GetMouse()
  local boostsGui = script.Parent
  
  -- DEBUG SYSTEM
  local DEBUG = true
  local function debugPrint(message)
  	if DEBUG then
  		print("[BOOSTS GUI DEBUG]: " .. message)
  	end
  end
  
  -- Wait for ShopConfig
  local ShopConfig
  spawn(function()
  	ShopConfig = require(ReplicatedStorage:WaitForChild("ShopConfig"))
  	debugPrint("ShopConfig loaded")
  	debugPrint("Available boosts in config:")
  	for boostKey, config in pairs(ShopConfig.Boosts or {}) do
  		debugPrint("  - " .. boostKey .. ": Image = " .. (config.Image or "NONE"))
  	end
  end)
  
  -- GUI References
  local background = boostsGui:WaitForChild("Background")
  local hoverFrame = boostsGui:WaitForChild("HoverFrame")
  local descriptionLabel = hoverFrame:WaitForChild("Description")
  local timeLeftLabel = hoverFrame:WaitForChild("TimeLeft")
  
  -- Boost Templates
  local boostTemplate1 = background:WaitForChild("BoostTemplate1")
  local boostTemplate2 = background:WaitForChild("BoostTemplate2")
  local boostTemplate3 = background:WaitForChild("BoostTemplate3")
  local boostTemplate4 = background:WaitForChild("BoostTemplate4")  -  Edit
  03:05:08.236  === END CHUNK 100 ===  -  Edit
  03:05:08.236    -  Edit
  03:05:08.338  === CHUNK 101 ===  -  Edit
  03:05:08.338    
  local boostTemplates = {boostTemplate1, boostTemplate2, boostTemplate3, boostTemplate4}
  
  -- Setup template properties
  for i, template in pairs(boostTemplates) do
  	template.Visible = false
  	template.Active = true -- ENABLE MOUSE EVENTS
  	template.Image = "" -- Clear default image
  	template.ScaleType = Enum.ScaleType.Fit
  	template.ImageColor3 = Color3.new(1, 1, 1) -- White (no tint)
  	template.BackgroundTransparency = 1
  	template.BorderSizePixel = 2
  	template.BorderColor3 = Color3.new(1, 1, 1)
  	debugPrint("Setup boost template " .. i .. ": " .. template.Name)
  end
  
  -- Wait for RemoteEvents
  local BoostActivatedEvent = ReplicatedStorage:WaitForChild("BoostActivatedEvent")
  local GetActiveBoostsRemote = ReplicatedStorage:WaitForChild("GetActiveBoostsRemote")
  local BoostUpdatedEvent = ReplicatedStorage:WaitForChild("BoostUpdatedEvent")
  
  -- Active boosts storage
  local activeBoosts = {}
  local hoverConnections = {}
  local updateConnections = {}
  
  -- Initialize
  hoverFrame.Visible = false
  
  debugPrint("BoostsGui initialized")
  
  -- HOVER EFFECTS AND ANIMATION FUNCTIONS
  local function createHoverTween(button, isEntering)
  	local targetScale = isEntering and 0.9 or 1.0
  	local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quart, Enum.EasingDirection.Out)
  
  	return TweenService:Create(button, tweenInfo, {
  		Size = UDim2.new(targetScale, 0, targetScale, 0)
  	})
  end
  
  local function updateHoverFramePosition()
  	if hoverFrame.Visible then
  		local mouseX = mouse.X
  		local mouseY = mouse.Y
  		local offsetX = 10
  		local offsetY = -50
  
  		local screenSize = workspace.CurrentCamera.ViewportSize
  		local frameSize = hoverFrame.AbsoluteSize  -  Edit
  03:05:08.338  === END CHUNK 101 ===  -  Edit
  03:05:08.338    -  Edit
  03:05:08.443  === CHUNK 102 ===  -  Edit
  03:05:08.443    
  		if mouseX + frameSize.X + offsetX > screenSize.X then
  			offsetX = -frameSize.X - 10
  		end
  		if mouseY + offsetY < 0 then
  			offsetY = 10
  		end
  
  		hoverFrame.Position = UDim2.new(0, mouseX + offsetX, 0, mouseY + offsetY)
  	end
  end
  
  -- BOOST MANAGEMENT FUNCTIONS
  local function formatTime(seconds)
  	local minutes = math.floor(seconds / 60)
  	local remainingSeconds = seconds % 60
  	return string.format("%d:%02d", minutes, remainingSeconds)
  end
  
  local function findAvailableTemplate()
  	for _, template in pairs(boostTemplates) do
  		if not template.Visible then
  			debugPrint("Found available template: " .. template.Name)
  			return template
  		end
  	end
  	debugPrint("ERROR: No available boost templates!")
  	return nil
  end
  
  local function setupBoostTemplate(template, boostKey, boostData, timeLeft)
  	debugPrint("Setting up boost template for: " .. boostKey)
  
  	-- Get boost config
  	if not ShopConfig then
  		debugPrint("ERROR: ShopConfig not loaded yet!")
  		return
  	end
  
  	local config = ShopConfig.Boosts[boostKey]
  	if not config then
  		debugPrint("ERROR: Boost config not found for " .. boostKey)
  		return
  	end
  
  	-- Set boost image
  	if config.Image and config.Image ~= "" then
  		template.Image = config.Image
  		debugPrint("Set boost image: " .. config.Image)
  	else  -  Edit
  03:05:08.443  === END CHUNK 102 ===  -  Edit
  03:05:08.443    -  Edit
  03:05:08.547  === CHUNK 103 ===  -  Edit
  03:05:08.547    		debugPrint("WARNING: No image configured for boost " .. boostKey)
  		-- Set a default colored background so we can see it
  		template.BackgroundTransparency = 0.5
  		template.BackgroundColor3 = Color3.new(1, 0, 0) -- Red background as fallback
  	end
  
  	-- Store boost data
  	template:SetAttribute("BoostKey", boostKey)
  	template:SetAttribute("TimeLeft", timeLeft)
  
  	-- Make visible
  	template.Visible = true
  	debugPrint("Template " .. template.Name .. " is now visible with boost " .. boostKey)
  
  	-- Clear existing connections
  	if hoverConnections[template] then
  		for _, connection in pairs(hoverConnections[template]) do
  			connection:Disconnect()
  		end
  	end
  	hoverConnections[template] = {}
  
  	-- Setup hover effects
  	table.insert(hoverConnections[template], template.MouseEnter:Connect(function()
  		debugPrint("Mouse entered boost template: " .. boostKey)
  
  		if config then
  			descriptionLabel.Text = config.Description or "Boost Effect"
  			timeLeftLabel.Text = formatTime(template:GetAttribute("TimeLeft") or 0)
  			hoverFrame.Visible = true
  		end
  
  		local hoverTween = createHoverTween(template, true)
  		hoverTween:Play()
  	end))
  
  	table.insert(hoverConnections[template], template.MouseLeave:Connect(function()
  		debugPrint("Mouse left boost template: " .. boostKey)
  		hoverFrame.Visible = false
  
  		local hoverTween = createHoverTween(template, false)
  		hoverTween:Play()
  	end))
  
  	-- Setup click for mobile
  	table.insert(hoverConnections[template], template.MouseButton1Click:Connect(function()
  		debugPrint("Clicked boost template: " .. boostKey)
  
  		if config then
  			descriptionLabel.Text = config.Description or "Boost Effect"  -  Edit
  03:05:08.547  === END CHUNK 103 ===  -  Edit
  03:05:08.548    -  Edit
  03:05:08.651  === CHUNK 104 ===  -  Edit
  03:05:08.651    			timeLeftLabel.Text = formatTime(template:GetAttribute("TimeLeft") or 0)
  
  			local mouseX = mouse.X
  			local mouseY = mouse.Y
  			hoverFrame.Position = UDim2.new(0, mouseX + 10, 0, mouseY - 50)
  			hoverFrame.Visible = true
  
  			spawn(function()
  				wait(3)
  				if hoverFrame.Visible then
  					hoverFrame.Visible = false
  				end
  			end)
  		end
  	end))
  
  	-- Start time update for this template
  	if updateConnections[template] then
  		updateConnections[template]:Disconnect()
  	end
  
  	updateConnections[template] = RunService.Heartbeat:Connect(function(deltaTime)
  		local currentTime = template:GetAttribute("TimeLeft") or 0
  		if currentTime <= 0 then
  			debugPrint("Boost expired: " .. boostKey)
  			template.Visible = false
  			template.BackgroundTransparency = 1 -- Reset background
  			template.BackgroundColor3 = Color3.new(1, 1, 1) -- Reset color
  			if hoverFrame.Visible then
  				hoverFrame.Visible = false
  			end
  			updateConnections[template]:Disconnect()
  			updateConnections[template] = nil
  			activeBoosts[boostKey] = nil
  		else
  			template:SetAttribute("TimeLeft", currentTime - deltaTime)
  
  			if hoverFrame.Visible and template:GetAttribute("BoostKey") == boostKey then
  				timeLeftLabel.Text = formatTime(currentTime)
  			end
  		end
  	end)
  
  	debugPrint("Boost template setup complete for: " .. boostKey)
  end
  
  local function addOrStackBoost(boostKey, duration)
  	debugPrint("Adding/stacking boost: " .. boostKey .. " for " .. duration .. " seconds")
  
  	if not ShopConfig then  -  Edit
  03:05:08.651  === END CHUNK 104 ===  -  Edit
  03:05:08.651    -  Edit
  03:05:08.752  === CHUNK 105 ===  -  Edit
  03:05:08.752    		debugPrint("ERROR: ShopConfig not loaded, waiting...")
  		wait(1)
  		if not ShopConfig then
  			debugPrint("ERROR: ShopConfig still not loaded!")
  			return
  		end
  	end
  
  	local config = ShopConfig.Boosts[boostKey]
  	if not config then
  		debugPrint("ERROR: Boost config not found for " .. boostKey)
  		return
  	end
  
  	-- Check if boost already exists (stacking)
  	if activeBoosts[boostKey] then
  		debugPrint("Stacking boost: " .. boostKey)
  		local existingTemplate = activeBoosts[boostKey].template
  		local currentTime = existingTemplate:GetAttribute("TimeLeft") or 0
  		local newTime = currentTime + duration
  
  		existingTemplate:SetAttribute("TimeLeft", newTime)
  		activeBoosts[boostKey].timeLeft = newTime
  	else
  		debugPrint("Creating new boost: " .. boostKey)
  		local template = findAvailableTemplate()
  		if not template then
  			debugPrint("ERROR: No available boost templates!")
  			return
  		end
  
  		activeBoosts[boostKey] = {
  			template = template,
  			timeLeft = duration,
  			config = config
  		}
  
  		setupBoostTemplate(template, boostKey, config, duration)
  		debugPrint("Created new boost " .. boostKey .. " - Duration: " .. formatTime(duration))
  	end
  end
  
  -- EVENT HANDLERS
  BoostActivatedEvent.OnClientEvent:Connect(function(boostKey, duration)
  	debugPrint("Boost activated event received: " .. boostKey .. " for " .. duration .. " seconds")
  	addOrStackBoost(boostKey, duration)
  end)
  
  BoostUpdatedEvent.OnClientEvent:Connect(function(boostKey, newTimeLeft)
  	debugPrint("Boost updated event received: " .. boostKey .. " - New time: " .. newTimeLeft)  -  Edit
  03:05:08.752  === END CHUNK 105 ===  -  Edit
  03:05:08.752    -  Edit
  03:05:08.856  === CHUNK 106 ===  -  Edit
  03:05:08.856    
  	if activeBoosts[boostKey] and activeBoosts[boostKey].template then
  		activeBoosts[boostKey].template:SetAttribute("TimeLeft", newTimeLeft)
  		activeBoosts[boostKey].timeLeft = newTimeLeft
  	end
  end)
  
  -- MOUSE MOVEMENT FOR HOVER FRAME
  RunService.Heartbeat:Connect(updateHoverFramePosition)
  
  -- INITIALIZATION - Load existing boosts
  spawn(function()
  	wait(3) -- Wait longer for other systems to load
  
  	debugPrint("Loading existing active boosts...")
  	local success, boosts = pcall(function()
  		return GetActiveBoostsRemote:InvokeServer()
  	end)
  
  	if success and boosts then
  		debugPrint("Loaded " .. #boosts .. " active boosts")
  		for _, boostData in pairs(boosts) do
  			if boostData.timeLeft > 0 then
  				debugPrint("Loading boost: " .. boostData.boostKey .. " with " .. boostData.timeLeft .. " seconds")
  				addOrStackBoost(boostData.boostKey, boostData.timeLeft)
  			end
  		end
  	else
  		debugPrint("Failed to load active boosts or no boosts active")
  	end
  end)
  
  -- CLEANUP
  Players.PlayerRemoving:Connect(function(removingPlayer)
  	if removingPlayer == player then
  		for _, connections in pairs(hoverConnections) do
  			for _, connection in pairs(connections) do
  				connection:Disconnect()
  			end
  		end
  
  		for _, connection in pairs(updateConnections) do
  			if connection then
  				connection:Disconnect()
  			end
  		end
  	end
  end)
  
  debugPrint("BoostsGui script loaded and ready!")  -  Edit
  03:05:08.856  === END CHUNK 106 ===  -  Edit
  03:05:08.856    -  Edit
  03:05:08.960  === CHUNK 107 ===  -  Edit
  03:05:08.960  --- END BoostsScript ---

LocalScript: NotificationSystem (in NotificationGui) [StarterGui]
Path: StarterGui.NotificationGui.NotificationSystem
Content:
  -- NotificationSystem (LocalScript in StarterGui.NotificationGui.NotificationSystem) - FIXED TELEPORT
  local Players = game:GetService("Players")
  local ReplicatedStorage = game:GetService("ReplicatedStorage")
  local TweenService = game:GetService("TweenService")
  local RunService = game:GetService("RunService")
  
  local player = Players.LocalPlayer
  local playerGui = player:WaitForChild("PlayerGui")
  
  -- Get ShopConfig
  local ShopConfig = require(ReplicatedStorage:WaitForChild("ShopConfig"))
  
  -- Debug system
  local function debugPrint(message)
  	if ShopConfig.Debug.Enabled and ShopConfig.Debug.ShowNotificationDebug then
  		print("[NOTIFICATION]: " .. message)
  	end
  end
  
  -- Wait for NotificationGui
  local notificationGui = playerGui:WaitForChild("NotificationGui")
  local nextPurchaseNotificationBackground = notificationGui:WaitForChild("NextPurchaseNotificationBackground")
  local recievedGiftNotificationBackground = notificationGui:WaitForChild("RecievedGiftNotificationBackground")
  
  -- Gift notification elements
  local giftNotificationTitle = recievedGiftNotificationBackground:WaitForChild("NotificationTitle")
  local giftNotificationDescription = recievedGiftNotificationBackground:WaitForChild("NotificationDescription")
  local giftExitButton = recievedGiftNotificationBackground:WaitForChild("ExitButton")
  
  -- Purchase notification elements
  local purchaseNotificationTitle = nextPurchaseNotificationBackground:WaitForChild("NotificationTitle")
  local purchaseNotificationDescription = nextPurchaseNotificationBackground:WaitForChild("NotificationDescription")
  local purchaseExitButton = nextPurchaseNotificationBackground:WaitForChild("ExitButton")
  local teleportToShopButton = nextPurchaseNotificationBackground:WaitForChild("TeleportToShopButton")
  
  -- Wait for RemoteEvents
  local GiftNotificationEvent = ReplicatedStorage:WaitForChild("GiftNotificationEvent")
  local GetPlayerDataRemote = ReplicatedStorage:WaitForChild("GetPlayerDataRemote")
  
  -- MEMORY MANAGEMENT
  local connections = {}
  
  local function cleanupConnections()
  	for _, connection in pairs(connections) do
  		if connection then  -  Edit
  03:05:08.960  === END CHUNK 107 ===  -  Edit
  03:05:08.960    -  Edit
  03:05:09.063  === CHUNK 108 ===  -  Edit
  03:05:09.063    			connection:Disconnect()
  		end
  	end
  	connections = {}
  end
  
  local shownNotifications = {}
  
  -- State management
  local isGiftNotificationShowing = false
  local isPurchaseNotificationShowing = false
  local purchaseCheckInterval = nil
  
  -- Store original positions
  local originalGiftPosition = recievedGiftNotificationBackground.Position
  local originalPurchasePosition = nextPurchaseNotificationBackground.Position
  
  -- Calculate off-screen positions for smoother animations
  local offScreenGiftPosition = UDim2.new(
  	originalGiftPosition.X.Scale,
  	originalGiftPosition.X.Offset,
  	-0.3,
  	originalGiftPosition.Y.Offset
  )
  
  local offScreenPurchasePosition = UDim2.new(
  	originalPurchasePosition.X.Scale,
  	originalPurchasePosition.X.Offset,
  	-0.3,
  	originalPurchasePosition.Y.Offset
  )
  
  -- Initialize notification states
  recievedGiftNotificationBackground.Visible = false
  nextPurchaseNotificationBackground.Visible = false
  
  debugPrint("NotificationSystem initialized")
  
  -- Create sounds
  local notificationSound = Instance.new("Sound")
  notificationSound.SoundId = ShopConfig.Sounds.NotificationShow
  notificationSound.Volume = ShopConfig.Sounds.Volumes.Notification
  notificationSound.Parent = workspace
  
  local giftSound = Instance.new("Sound")
  giftSound.SoundId = ShopConfig.Sounds.GiftReceived
  giftSound.Volume = ShopConfig.Sounds.Volumes.Notification
  giftSound.Parent = workspace
  
  -- Enhanced slide-down animation with smoother easing  -  Edit
  03:05:09.063  === END CHUNK 108 ===  -  Edit
  03:05:09.063    -  Edit
  03:05:09.169  === CHUNK 109 ===  -  Edit
  03:05:09.169    local function showGiftNotification(gifterName, itemName)
  	if isGiftNotificationShowing then return end
  
  	isGiftNotificationShowing = true
  	debugPrint("Showing gift notification from " .. gifterName .. " for " .. itemName)
  
  	-- Update text
  	giftNotificationTitle.Text = "You received a gift!"
  	giftNotificationDescription.Text = gifterName .. " has gifted you " .. itemName .. ". Thank them by sending them another gift!"
  
  	-- Setup initial position
  	recievedGiftNotificationBackground.Position = offScreenGiftPosition
  	recievedGiftNotificationBackground.Visible = true
  
  	-- Play sound
  	giftSound:Play()
  
  	-- Smooth slide-down animation
  	local tweenInfo = TweenInfo.new(
  		0.6,
  		Enum.EasingStyle.Quint,
  		Enum.EasingDirection.Out
  	)
  
  	local slideTween = TweenService:Create(recievedGiftNotificationBackground, tweenInfo, {
  		Position = originalGiftPosition
  	})
  
  	slideTween:Play()
  
  	-- Auto close if enabled
  	if ShopConfig.Notifications.GiftNotification.AutoClose then
  		spawn(function()
  			wait(ShopConfig.Notifications.GiftNotification.Duration)
  			hideGiftNotification()
  		end)
  	end
  end
  
  -- Enhanced fade-up animation
  local function hideGiftNotification()
  	if not isGiftNotificationShowing then return end
  
  	isGiftNotificationShowing = false
  	debugPrint("Hiding gift notification")
  
  	local tweenInfo = TweenInfo.new(
  		0.4,
  		Enum.EasingStyle.Quint,
  		Enum.EasingDirection.In  -  Edit
  03:05:09.169  === END CHUNK 109 ===  -  Edit
  03:05:09.169    -  Edit
  03:05:09.273  === CHUNK 110 ===  -  Edit
  03:05:09.273    	)
  
  	local fadeTween = TweenService:Create(recievedGiftNotificationBackground, tweenInfo, {
  		Position = offScreenGiftPosition
  	})
  
  	fadeTween:Play()
  	fadeTween.Completed:Connect(function()
  		recievedGiftNotificationBackground.Visible = false
  		recievedGiftNotificationBackground.Position = originalGiftPosition
  	end)
  end
  
  -- Enhanced purchase notification with smoother animations
  local function showPurchaseNotification(itemName, itemKey)
  	if shownNotifications[itemKey] then
  		return
  	end
  
  	if isPurchaseNotificationShowing then
  		hidePurchaseNotification()
  		wait(0.5)
  	end
  
  	isPurchaseNotificationShowing = true
  	debugPrint("Showing purchase notification for " .. itemName)
  
  	shownNotifications[itemKey] = true
  
  	-- Update text
  	purchaseNotificationTitle.Text = itemName
  	purchaseNotificationDescription.Text = "You have enough money to buy the next poop upgrade which is " .. itemName .. "!"
  
  	-- Setup initial position
  	nextPurchaseNotificationBackground.Position = offScreenPurchasePosition
  	nextPurchaseNotificationBackground.Visible = true
  
  	-- Play sound
  	notificationSound:Play()
  
  	-- Smooth slide-down animation
  	local tweenInfo = TweenInfo.new(
  		0.6,
  		Enum.EasingStyle.Quint,
  		Enum.EasingDirection.Out
  	)
  
  	local slideTween = TweenService:Create(nextPurchaseNotificationBackground, tweenInfo, {
  		Position = originalPurchasePosition
  	})  -  Edit
  03:05:09.273  === END CHUNK 110 ===  -  Edit
  03:05:09.273    -  Edit
  03:05:09.376  === CHUNK 111 ===  -  Edit
  03:05:09.376    
  	slideTween:Play()
  end
  
  -- Enhanced fade-up for purchase notifications
  local function hidePurchaseNotification()
  	if not isPurchaseNotificationShowing then return end
  
  	isPurchaseNotificationShowing = false
  	debugPrint("Hiding purchase notification")
  
  	local tweenInfo = TweenInfo.new(
  		0.4,
  		Enum.EasingStyle.Quint,
  		Enum.EasingDirection.In
  	)
  
  	local fadeTween = TweenService:Create(nextPurchaseNotificationBackground, tweenInfo, {
  		Position = offScreenPurchasePosition
  	})
  
  	fadeTween:Play()
  	fadeTween.Completed:Connect(function()
  		nextPurchaseNotificationBackground.Visible = false
  		nextPurchaseNotificationBackground.Position = originalPurchasePosition
  	end)
  end
  
  -- Function to get next affordable poop
  local function getNextAffordablePoop(playerPooBucks, ownedPoops)
  	local poopOrder = {
  		"Poop", "StinkyPoop", "BurntPoop", "WaterPoop", "ShockedPoop",
  		"HypnosisPoop", "HolyPoop", "BloodyPoop", "DiamondPoop", 
  		"VoidPoop", "GalePoop", "BlackHolePoop"
  	}
  
  	for _, poopKey in ipairs(poopOrder) do
  		local poopConfig = ShopConfig.Poops[poopKey]
  		if poopConfig and not table.find(ownedPoops, poopKey) then
  			if playerPooBucks >= poopConfig.Price then
  				return poopKey, poopConfig
  			end
  		end
  	end
  
  	return nil, nil
  end
  
  -- Function to check for purchase notifications
  local function checkPurchaseNotifications()  -  Edit
  03:05:09.376  === END CHUNK 111 ===  -  Edit
  03:05:09.376    -  Edit
  03:05:09.476  === CHUNK 112 ===  -  Edit
  03:05:09.477    	local success, playerData = pcall(function()
  		return GetPlayerDataRemote:InvokeServer()
  	end)
  
  	if success and playerData then
  		local nextPoopKey, nextPoopConfig = getNextAffordablePoop(playerData.PooBucks, playerData.OwnedPoops or {})
  
  		if nextPoopKey and nextPoopConfig and not shownNotifications[nextPoopKey] then
  			showPurchaseNotification(nextPoopConfig.Name, nextPoopKey)
  		end
  	end
  end
  
  -- Start purchase notification checking
  local function startPurchaseNotificationChecking()
  	if purchaseCheckInterval then return end
  
  	purchaseCheckInterval = spawn(function()
  		while true do
  			wait(ShopConfig.Notifications.PurchaseNotification.CheckInterval)
  			if not isPurchaseNotificationShowing then
  				checkPurchaseNotifications()
  			end
  		end
  	end)
  end
  
  -- FIXED: Teleport to shop function
  local function teleportToShop()
  	hidePurchaseNotification()
  
  	debugPrint("Attempting to teleport to shop...")
  
  	-- Method 1: Look for Shop trigger part
  	local shopTrigger = workspace:FindFirstChild("Shop")
  	if shopTrigger then
  		shopTrigger = shopTrigger:FindFirstChild("Trigger")
  		if shopTrigger and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
  			player.Character.HumanoidRootPart.CFrame = shopTrigger.CFrame * CFrame.new(0, 5, 0)
  			debugPrint("Teleported player to Shop trigger")
  			return
  		end
  	end
  
  	-- Method 2: Look for ShopTPPart
  	local shopTPPart = workspace:FindFirstChild("ShopTPPart")
  	if shopTPPart and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
  		player.Character.HumanoidRootPart.CFrame = shopTPPart.CFrame * CFrame.new(0, 5, 0)
  		debugPrint("Teleported player to ShopTPPart")
  		return  -  Edit
  03:05:09.477  === END CHUNK 112 ===  -  Edit
  03:05:09.477    -  Edit
  03:05:09.581  === CHUNK 113 ===  -  Edit
  03:05:09.581    	end
  
  	-- Method 3: Look for any part with "Shop" in the name
  	for _, obj in pairs(workspace:GetDescendants()) do
  		if obj:IsA("BasePart") and string.find(obj.Name:lower(), "shop") then
  			if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
  				player.Character.HumanoidRootPart.CFrame = obj.CFrame * CFrame.new(0, 5, 0)
  				debugPrint("Teleported player to shop part: " .. obj.Name)
  				return
  			end
  		end
  	end
  
  	-- Method 4: Fallback to opening shop GUI directly
  	debugPrint("No shop teleport location found, opening shop GUI instead")
  	local RemoteEvent_OpenShop = ReplicatedStorage:FindFirstChild("RemoteEvent_OpenShop")
  	if RemoteEvent_OpenShop then
  		RemoteEvent_OpenShop:FireServer()
  	else
  		-- Final fallback: direct GUI opening
  		local shopGui = playerGui:FindFirstChild("ShopGui")
  		if shopGui then
  			local shopScript = shopGui:FindFirstChild("ShopScript")
  			if shopScript and shopScript:IsA("LocalScript") then
  				-- Try to call a global function if it exists
  				if _G.openShop then
  					_G.openShop()
  				else
  					print("Shop GUI found but cannot open automatically. Please press the shop button or go near the shop.")
  				end
  			end
  		end
  	end
  end
  
  -- Event handlers
  table.insert(connections, GiftNotificationEvent.OnClientEvent:Connect(function(gifterName, itemName)
  	showGiftNotification(gifterName, itemName)
  end))
  
  -- Button connections
  table.insert(connections, giftExitButton.MouseButton1Click:Connect(function()
  	hideGiftNotification()
  end))
  
  table.insert(connections, purchaseExitButton.MouseButton1Click:Connect(function()
  	hidePurchaseNotification()
  end))
  
  -- Enhanced teleport button functionality  -  Edit
  03:05:09.581  === END CHUNK 113 ===  -  Edit
  03:05:09.581    -  Edit
  03:05:09.685  === CHUNK 114 ===  -  Edit
  03:05:09.685    table.insert(connections, teleportToShopButton.MouseButton1Click:Connect(teleportToShop))
  
  -- Check for offline gifts when player joins
  spawn(function()
  	wait(3) -- Wait for other systems to load
  
  	local success, result = pcall(function()
  		return game:GetService("ReplicatedStorage"):WaitForChild("CheckOfflineGifts"):InvokeServer()
  	end)
  
  	if success and result then
  		for _, giftData in pairs(result) do
  			showGiftNotification(giftData.gifterName, giftData.itemName)
  			wait(2) -- Space out multiple notifications
  		end
  	end
  end)
  
  -- Start systems
  startPurchaseNotificationChecking()
  
  -- Cleanup on player leaving
  table.insert(connections, Players.PlayerRemoving:Connect(function(removingPlayer)
  	if removingPlayer == player then
  		cleanupConnections()
  	end
  end))
  
  debugPrint("NotificationSystem setup complete!")
--- END NotificationSystem ---

LocalScript: RebirthClient (in RebirthGui) [StarterGui]
Path: StarterGui.RebirthGui.RebirthClient
Content:
  -- RebirthClient (LocalScript in StarterGui.RebirthGui.RebirthClient) - FIXED WITH DEBOUNCE
  local Players = game:GetService("Players")
  local ReplicatedStorage = game:GetService("ReplicatedStorage")
  local TweenService = game:GetService("TweenService")
  local RunService = game:GetService("RunService")
  local Lighting = game:GetService("Lighting")
  
  local player = Players.LocalPlayer
  local camera = workspace.CurrentCamera
  local playerGui = player:WaitForChild("PlayerGui")
  local rebirthGui = script.Parent
  
  -- Get ShopConfig
  local ShopConfig = require(ReplicatedStorage:WaitForChild("ShopConfig"))
  
  -- Debug system  -  Edit
  03:05:09.686  === END CHUNK 114 ===  -  Edit
  03:05:09.686    -  Edit
  03:05:09.789  === CHUNK 115 ===  -  Edit
  03:05:09.789    local function debugPrint(message)
  	if ShopConfig.Debug.Enabled and ShopConfig.Debug.ShowRebirthDebug then
  		print("[REBIRTH CLIENT]: " .. message)
  	end
  end
  
  -- GUI References
  local buttonBackground = rebirthGui:WaitForChild("ButtonBackground")
  local rebirthButtonMain = buttonBackground:WaitForChild("RebirthButton")
  local rebirthBackground = rebirthGui:WaitForChild("Rebirthbackground")
  local rebirthTitle = rebirthBackground:WaitForChild("RebirthTitle")
  local exitButton = rebirthBackground:WaitForChild("ExitButton")
  local rebirthDescription = rebirthBackground:WaitForChild("RebirthDescription")
  local multiplierChange = rebirthBackground:WaitForChild("MultiplierChange")
  local bar = rebirthBackground:WaitForChild("Bar")
  local barFramePercentage = bar:WaitForChild("BarFramePercentage")
  local rebirthCost = rebirthBackground:WaitForChild("RebirthCost")
  local rebirthBarPercentage = rebirthBackground:WaitForChild("RebirthbBarPercentage")
  local cosmeticImageLabel = rebirthBackground:WaitForChild("CosmeticImageLabel")
  local rebirthMultiplierDisplay = rebirthGui:WaitForChild("RebirthMultiplierDisplayOnPooBucksCurrency")
  local multiplierTextLabel = rebirthMultiplierDisplay:WaitForChild("TextLabel")
  local rebirthButton = rebirthBackground:WaitForChild("RebirthButton")
  
  -- Wait for RemoteEvents
  local RebirthRequest = ReplicatedStorage:WaitForChild("RebirthRequest")
  local GetRebirthInfo = ReplicatedStorage:WaitForChild("GetRebirthInfo")
  
  -- State
  local isRebirthFrameOpen = false
  local updateConnection = nil
  local isAnimating = false
  local rebirthDebounce = false -- NEW: Debounce for rebirth button
  local openCloseDebounce = false -- NEW: Debounce for open/close
  
  -- Store original properties
  local originalRebirthSize = rebirthBackground.Size
  local originalRebirthPosition = rebirthBackground.Position
  local originalFOV = camera.FieldOfView
  local originalGUIs = {}
  local originalBlurSize = 0
  local blur = nil
  
  -- Button original states storage
  local buttonOriginalStates = {}
  
  -- MEMORY MANAGEMENT
  local connections = {}
  
  local function cleanupConnections()
  	for _, connection in pairs(connections) do  -  Edit
  03:05:09.789  === END CHUNK 115 ===  -  Edit
  03:05:09.790    -  Edit
  03:05:09.894  === CHUNK 116 ===  -  Edit
  03:05:09.894    		if connection then
  			connection:Disconnect()
  		end
  	end
  	connections = {}
  end
  
  -- Initialize state
  rebirthBackground.Visible = false
  rebirthMultiplierDisplay.Visible = true
  multiplierTextLabel.Text = "1x"
  
  debugPrint("RebirthClient initialized")
  
  -- Create or get blur effect
  local function setupBlur()
  	blur = Lighting:FindFirstChild("Blur")
  	if not blur then
  		blur = Instance.new("BlurEffect")
  		blur.Name = "Blur"
  		blur.Size = 0
  		blur.Parent = Lighting
  	end
  	originalBlurSize = blur.Size
  end
  
  setupBlur()
  
  -- Create sounds
  local rebirthSuccessSound = Instance.new("Sound")
  rebirthSuccessSound.SoundId = ShopConfig.Sounds.RebirthSuccess
  rebirthSuccessSound.Volume = ShopConfig.Sounds.Volumes.Rebirth
  rebirthSuccessSound.Parent = workspace
  
  local rebirthFailSound = Instance.new("Sound")
  rebirthFailSound.SoundId = ShopConfig.Sounds.RebirthFail
  rebirthFailSound.Volume = ShopConfig.Sounds.Volumes.Rebirth
  rebirthFailSound.Parent = workspace
  
  -- FIXED: Button effects system with proper scaling
  local function storeButtonOriginalState(button)
  	if not buttonOriginalStates[button] then
  		buttonOriginalStates[button] = {
  			Size = button.Size,
  			BackgroundColor3 = button.BackgroundColor3,
  			Rotation = button.Rotation,
  			isHovering = false
  		}
  	end
  end  -  Edit
  03:05:09.894  === END CHUNK 116 ===  -  Edit
  03:05:09.894    -  Edit
  03:05:09.996  === CHUNK 117 ===  -  Edit
  03:05:09.997    
  local function setupButtonEffects(button)
  	storeButtonOriginalState(button)
  	local originalState = buttonOriginalStates[button]
  
  	-- Hover effects
  	table.insert(connections, button.MouseEnter:Connect(function()
  		if originalState.isHovering then return end
  		originalState.isHovering = true
  
  		local hoverConfig = ShopConfig.Tweens.ButtonHover
  		local tweenInfo = TweenInfo.new(
  			hoverConfig.Duration,
  			hoverConfig.EasingStyle,
  			hoverConfig.EasingDirection
  		)
  
  		local targetColor = originalState.BackgroundColor3:lerp(Color3.new(1, 1, 1), hoverConfig.ColorLerp)
  
  		local tween = TweenService:Create(button, tweenInfo, {
  			Size = UDim2.new(
  				originalState.Size.X.Scale * hoverConfig.ScaleMultiplier, 
  				0, 
  				originalState.Size.Y.Scale * hoverConfig.ScaleMultiplier, 
  				0
  			),
  			BackgroundColor3 = targetColor
  		})
  		tween:Play()
  	end))
  
  	table.insert(connections, button.MouseLeave:Connect(function()
  		if not originalState.isHovering then return end
  		originalState.isHovering = false
  
  		local hoverConfig = ShopConfig.Tweens.ButtonHover
  		local tweenInfo = TweenInfo.new(
  			hoverConfig.Duration,
  			hoverConfig.EasingStyle,
  			hoverConfig.EasingDirection
  		)
  
  		local tween = TweenService:Create(button, tweenInfo, {
  			Size = originalState.Size,
  			BackgroundColor3 = originalState.BackgroundColor3,
  			Rotation = originalState.Rotation
  		})
  		tween:Play()
  	end))
    -  Edit
  03:05:09.997  === END CHUNK 117 ===  -  Edit
  03:05:09.997    -  Edit
  03:05:10.102  === CHUNK 118 ===  -  Edit
  03:05:10.102    	-- FIXED: Click effects with better scaling
  	table.insert(connections, button.MouseButton1Down:Connect(function()
  		local clickConfig = ShopConfig.Tweens.ButtonClick
  		local tweenInfo = TweenInfo.new(
  			clickConfig.Duration,
  			clickConfig.EasingStyle,
  			clickConfig.EasingDirection
  		)
  
  		-- FIXED: Don't make it too small
  		local scaleMultiplier = math.max(0.98, clickConfig.ScaleMultiplier) -- Minimum 98% size
  
  		local tween = TweenService:Create(button, tweenInfo, {
  			Size = UDim2.new(
  				originalState.Size.X.Scale * scaleMultiplier, 
  				0, 
  				originalState.Size.Y.Scale * scaleMultiplier, 
  				0
  			),
  			Rotation = originalState.Rotation + math.random(-clickConfig.RotationRange, clickConfig.RotationRange)
  		})
  		tween:Play()
  	end))
  
  	table.insert(connections, button.MouseButton1Up:Connect(function()
  		local hoverConfig = ShopConfig.Tweens.ButtonHover
  		local tweenInfo = TweenInfo.new(
  			hoverConfig.Duration,
  			Enum.EasingStyle.Back,
  			Enum.EasingDirection.Out
  		)
  
  		local targetSize = originalState.isHovering and 
  			UDim2.new(
  				originalState.Size.X.Scale * hoverConfig.ScaleMultiplier, 
  				0, 
  				originalState.Size.Y.Scale * hoverConfig.ScaleMultiplier, 
  				0
  			) or originalState.Size
  
  		local tween = TweenService:Create(button, tweenInfo, {
  			Size = targetSize,
  			Rotation = originalState.Rotation
  		})
  		tween:Play()
  	end))
  end
  
  -- Function to format large numbers
  local function formatNumber(num)  -  Edit
  03:05:10.102  === END CHUNK 118 ===  -  Edit
  03:05:10.102    -  Edit
  03:05:10.206  === CHUNK 119 ===  -  Edit
  03:05:10.206    	if num >= 1e12 then
  		return string.format("%.1fT", num / 1e12)
  	elseif num >= 1e9 then
  		return string.format("%.1fB", num / 1e9)
  	elseif num >= 1e6 then
  		return string.format("%.1fM", num / 1e6)
  	elseif num >= 1e3 then
  		return string.format("%.1fK", num / 1e3)
  	else
  		return tostring(math.floor(num))
  	end
  end
  
  -- Function to update rebirth info
  local function updateRebirthInfo()
  	if not isRebirthFrameOpen then return nil end
  
  	local success, rebirthInfo = pcall(function()
  		return GetRebirthInfo:InvokeServer()
  	end)
  
  	if success and rebirthInfo then
  		-- Update multiplier display
  		multiplierTextLabel.Text = string.format("%.1fx", rebirthInfo.currentMultiplier)
  
  		-- Update rebirth frame
  		rebirthCost.Text = "Price: " .. formatNumber(rebirthInfo.rebirthCost)
  		multiplierChange.Text = string.format("%.1fx  ->  %.1fx", rebirthInfo.currentMultiplier, rebirthInfo.nextMultiplier)
  
  		-- Update progress bar percentage text
  		local percentage = math.min(100, rebirthInfo.percentage)
  		rebirthBarPercentage.Text = string.format("%.0f%%", percentage)
  
  		-- Animate bar with exact 439 pixel width at 100%
  		local barPercentage = percentage / 100
  		local maxWidth = 439
  		local targetSize = UDim2.new(0, maxWidth * barPercentage, 0, 20)
  		local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
  		local barTween = TweenService:Create(barFramePercentage, tweenInfo, {Size = targetSize})
  		barTween:Play()
  
  		-- Update button state
  		if rebirthButton:IsA("TextButton") then
  			if rebirthInfo.canRebirth then
  				rebirthButton.Text = "REBIRTH"
  				rebirthButton.BackgroundColor3 = Color3.fromRGB(46, 125, 50) -- Green
  			else
  				rebirthButton.Text = "CAN'T REBIRTH"
  				rebirthButton.BackgroundColor3 = Color3.fromRGB(158, 158, 158) -- Gray
  			end  -  Edit
  03:05:10.206  === END CHUNK 119 ===  -  Edit
  03:05:10.206    -  Edit
  03:05:10.310  === CHUNK 120 ===  -  Edit
  03:05:10.310    		elseif rebirthButton:IsA("ImageButton") then
  			if rebirthInfo.canRebirth then
  				rebirthButton.BackgroundColor3 = Color3.fromRGB(46, 125, 50) -- Green
  			else
  				rebirthButton.BackgroundColor3 = Color3.fromRGB(158, 158, 158) -- Gray
  			end
  		end
  
  		return rebirthInfo
  	else
  		debugPrint("Failed to get rebirth info")
  		return nil
  	end
  end
  
  -- Shop-like effects for rebirth frame
  local function openRebirthFrame()
  	if isRebirthFrameOpen or isAnimating or openCloseDebounce then return end
  
  	openCloseDebounce = true
  	isAnimating = true
  	isRebirthFrameOpen = true
  	debugPrint("Opening rebirth frame")
  
  	-- Store original GUI states and disable them
  	originalGUIs = {}
  	for _, gui in pairs(playerGui:GetChildren()) do
  		if gui:IsA("ScreenGui") and gui ~= rebirthGui and gui.Enabled then
  			originalGUIs[gui] = true
  			gui.Enabled = false
  		end
  	end
  
  	-- Setup initial state
  	rebirthBackground.Size = UDim2.new(0, 0, 0, 0)
  	rebirthBackground.Position = UDim2.new(0.5, 0, 0.5, 0)
  	rebirthBackground.Visible = true
  
  	-- Open animation with shop-like effects
  	local openConfig = ShopConfig.Tweens.RebirthOpen
  	local tweenInfo = TweenInfo.new(openConfig.Duration, openConfig.EasingStyle, openConfig.EasingDirection)
  
  	local rebirthTween = TweenService:Create(rebirthBackground, tweenInfo, {
  		Size = originalRebirthSize,
  		Position = originalRebirthPosition
  	})
  
  	-- FOV and blur effects
  	local fovTween = TweenService:Create(camera, tweenInfo, {
  		FieldOfView = ShopConfig.Tweens.ShopOpen.FOV  -  Edit
  03:05:10.310  === END CHUNK 120 ===  -  Edit
  03:05:10.310    -  Edit
  03:05:10.413  === CHUNK 121 ===  -  Edit
  03:05:10.413    	})
  
  	local blurTween = TweenService:Create(blur, tweenInfo, {
  		Size = ShopConfig.Tweens.ShopOpen.BlurSize
  	})
  
  	rebirthTween:Play()
  	fovTween:Play()
  	blurTween:Play()
  
  	rebirthTween.Completed:Connect(function()
  		isAnimating = false
  		spawn(function()
  			wait(0.5) -- Short debounce
  			openCloseDebounce = false
  		end)
  	end)
  
  	-- Start updating rebirth info
  	updateRebirthInfo()
  	updateConnection = RunService.Heartbeat:Connect(function()
  		updateRebirthInfo()
  	end)
  end
  
  local function closeRebirthFrame()
  	if not isRebirthFrameOpen or isAnimating or openCloseDebounce then return end
  
  	openCloseDebounce = true
  	isAnimating = true
  	isRebirthFrameOpen = false
  	debugPrint("Closing rebirth frame")
  
  	-- Stop updating
  	if updateConnection then
  		updateConnection:Disconnect()
  		updateConnection = nil
  	end
  
  	-- Close animation with shop-like effects
  	local closeConfig = ShopConfig.Tweens.RebirthClose
  	local tweenInfo = TweenInfo.new(closeConfig.Duration, closeConfig.EasingStyle, closeConfig.EasingDirection)
  
  	local rebirthTween = TweenService:Create(rebirthBackground, tweenInfo, {
  		Size = UDim2.new(0, 0, 0, 0),
  		Position = UDim2.new(0.5, 0, 0.5, 0)
  	})
  
  	-- Restore FOV and blur
  	local fovTween = TweenService:Create(camera, tweenInfo, {  -  Edit
  03:05:10.413  === END CHUNK 121 ===  -  Edit
  03:05:10.413    -  Edit
  03:05:10.514  === CHUNK 122 ===  -  Edit
  03:05:10.514    		FieldOfView = originalFOV
  	})
  
  	local blurTween = TweenService:Create(blur, tweenInfo, {
  		Size = originalBlurSize
  	})
  
  	rebirthTween:Play()
  	fovTween:Play()
  	blurTween:Play()
  
  	rebirthTween.Completed:Connect(function()
  		rebirthBackground.Visible = false
  
  		-- Restore original GUIs
  		for gui, _ in pairs(originalGUIs) do
  			if gui and gui.Parent then
  				gui.Enabled = true
  			end
  		end
  		originalGUIs = {}
  
  		rebirthBackground.Size = originalRebirthSize
  		rebirthBackground.Position = originalRebirthPosition
  		isAnimating = false
  
  		spawn(function()
  			wait(0.5) -- Short debounce
  			openCloseDebounce = false
  		end)
  	end)
  end
  
  -- FIXED: Function to perform rebirth with debounce
  local function performRebirth()
  	if rebirthDebounce then
  		debugPrint("Rebirth on cooldown")
  		return
  	end
  
  	local rebirthInfo = updateRebirthInfo()
  	if not rebirthInfo or not rebirthInfo.canRebirth then
  		rebirthFailSound:Play()
  		debugPrint("Cannot rebirth: " .. (rebirthInfo and rebirthInfo.reason or "Unknown reason"))
  		return
  	end
  
  	rebirthDebounce = true
  	debugPrint("Attempting rebirth...")
    -  Edit
  03:05:10.515  === END CHUNK 122 ===  -  Edit
  03:05:10.515    -  Edit
  03:05:10.618  === CHUNK 123 ===  -  Edit
  03:05:10.618    	-- Update button to show it's processing
  	if rebirthButton:IsA("TextButton") then
  		rebirthButton.Text = "PROCESSING..."
  		rebirthButton.BackgroundColor3 = Color3.fromRGB(255, 193, 7) -- Yellow
  	else
  		rebirthButton.BackgroundColor3 = Color3.fromRGB(255, 193, 7)
  	end
  
  	local success, result = pcall(function()
  		return RebirthRequest:InvokeServer()
  	end)
  
  	if success and result then
  		rebirthSuccessSound:Play()
  		debugPrint("Rebirth successful!")
  
  		if rebirthButton:IsA("TextButton") then
  			rebirthButton.Text = "SUCCESS!"
  			rebirthButton.BackgroundColor3 = Color3.fromRGB(76, 175, 80)
  		else
  			rebirthButton.BackgroundColor3 = Color3.fromRGB(76, 175, 80)
  		end
  
  		spawn(function()
  			wait(2) -- Show success for 2 seconds
  			rebirthDebounce = false
  			updateRebirthInfo()
  		end)
  	else
  		rebirthFailSound:Play()
  		debugPrint("Rebirth failed: " .. tostring(result))
  
  		if rebirthButton:IsA("TextButton") then
  			rebirthButton.Text = "FAILED!"
  			rebirthButton.BackgroundColor3 = Color3.fromRGB(244, 67, 54)
  		else
  			rebirthButton.BackgroundColor3 = Color3.fromRGB(244, 67, 54)
  		end
  
  		spawn(function()
  			wait(2) -- Show failure for 2 seconds
  			rebirthDebounce = false
  			updateRebirthInfo()
  		end)
  	end
  end
  
  -- Setup button effects for all buttons
  setupButtonEffects(rebirthButtonMain)
  setupButtonEffects(exitButton)  -  Edit
  03:05:10.618  === END CHUNK 123 ===  -  Edit
  03:05:10.618    -  Edit
  03:05:10.719  === CHUNK 124 ===  -  Edit
  03:05:10.719    setupButtonEffects(rebirthButton)
  
  -- Button connections
  table.insert(connections, rebirthButtonMain.MouseButton1Click:Connect(function()
  	if isRebirthFrameOpen then
  		closeRebirthFrame()
  	else
  		openRebirthFrame()
  	end
  end))
  
  table.insert(connections, exitButton.MouseButton1Click:Connect(function()
  	closeRebirthFrame()
  end))
  
  table.insert(connections, rebirthButton.MouseButton1Click:Connect(performRebirth))
  
  -- Initial multiplier update
  spawn(function()
  	wait(2) -- Wait for leaderstats to load
  	updateRebirthInfo()
  
  	-- Update multiplier display every few seconds
  	while true do
  		wait(3)
  		if not isRebirthFrameOpen then
  			updateRebirthInfo()
  		end
  	end
  end)
  
  -- Cleanup on player leaving
  table.insert(connections, Players.PlayerRemoving:Connect(function(removingPlayer)
  	if removingPlayer == player then
  		cleanupConnections()
  	end
  end))
  
  debugPrint("RebirthClient setup complete!")
--- END RebirthClient ---

LocalScript: ZoneClient (in ZoneMultiplier) [StarterGui]
Path: StarterGui.ZoneMultiplier.ZoneClient
Content:
  -- ZoneClient (LocalScript in StarterGui.ZoneMultiplier.ZoneClient) - FIXED WITH SMOOTH SLIDE-IN
  local Players = game:GetService("Players")
  local ReplicatedStorage = game:GetService("ReplicatedStorage")
  local TweenService = game:GetService("TweenService")
  local SoundService = game:GetService("SoundService")
    -  Edit
  03:05:10.719  === END CHUNK 124 ===  -  Edit
  03:05:10.719    -  Edit
  03:05:10.821  === CHUNK 125 ===  -  Edit
  03:05:10.822    local player = Players.LocalPlayer
  local playerGui = player:WaitForChild("PlayerGui")
  
  -- Get ShopConfig
  local ShopConfig = require(ReplicatedStorage:WaitForChild("ShopConfig"))
  
  -- Debug system
  local function debugPrint(message)
  	if ShopConfig.Debug.Enabled and ShopConfig.Debug.ShowClientDebug then
  		print("[ZONE CLIENT]: " .. message)
  	end
  end
  
  -- Wait for RemoteEvents
  local ZoneEnteredEvent = ReplicatedStorage:WaitForChild("ZoneEnteredEvent")
  local ZoneExitedEvent = ReplicatedStorage:WaitForChild("ZoneExitedEvent")
  local ZoneUnlockedEvent = ReplicatedStorage:WaitForChild("ZoneUnlockedEvent")
  
  -- Wait for GUI
  local zoneMultiplierGui = script.Parent
  if not zoneMultiplierGui then
  	warn("ZoneMultiplier GUI not found!")
  	return
  end
  
  local zoneMultiplierBackground = zoneMultiplierGui:WaitForChild("ZoneMultiplierBackground", 10)
  if not zoneMultiplierBackground then
  	warn("ZoneMultiplierBackground not found!")
  	return
  end
  
  local zoneMultiplierTextLabel = zoneMultiplierBackground:WaitForChild("ZoneMultiplierTextLabel")
  if not zoneMultiplierTextLabel then
  	warn("ZoneMultiplierTextLabel not found!")
  	return
  end
  
  -- MEMORY MANAGEMENT
  local connections = {}
  
  local function cleanupConnections()
  	for _, connection in pairs(connections) do
  		if connection then
  			connection:Disconnect()
  		end
  	end
  	connections = {}
  end
  
  -- Create sounds  -  Edit
  03:05:10.822  === END CHUNK 125 ===  -  Edit
  03:05:10.822    -  Edit
  03:05:10.926  === CHUNK 126 ===  -  Edit
  03:05:10.926    local enterSound = Instance.new("Sound")
  enterSound.SoundId = ShopConfig.Sounds.ZoneEnter
  enterSound.Volume = ShopConfig.Sounds.Volumes.Zone
  enterSound.Parent = workspace
  
  local exitSound = Instance.new("Sound")
  exitSound.SoundId = ShopConfig.Sounds.ZoneExit
  exitSound.Volume = ShopConfig.Sounds.Volumes.Zone
  exitSound.Parent = workspace
  
  local restrictedSound = Instance.new("Sound")
  restrictedSound.SoundId = ShopConfig.Sounds.ZoneRestricted
  restrictedSound.Volume = ShopConfig.Sounds.Volumes.Zone
  restrictedSound.Parent = workspace
  
  -- Store original position
  local originalPosition = UDim2.new(1, -130, 0, 10)
  local offScreenPosition = UDim2.new(1, 50, 0, 10) -- Start off-screen to the right
  
  -- Initialize GUI state
  zoneMultiplierBackground.Visible = false
  zoneMultiplierBackground.Position = offScreenPosition
  zoneMultiplierTextLabel.Text = "1x"
  
  debugPrint("ZoneClient initialized")
  
  -- FIXED: Function to show zone multiplier with smooth slide-in
  local function showZoneMultiplier(multiplier)
  	zoneMultiplierTextLabel.Text = multiplier .. "x"
  	zoneMultiplierBackground.Visible = true
  	zoneMultiplierBackground.Position = offScreenPosition
  
  	-- Smooth slide-in animation
  	local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
  	local tween = TweenService:Create(zoneMultiplierBackground, tweenInfo, {
  		Position = originalPosition
  	})
  	tween:Play()
  
  	debugPrint("Showing zone multiplier: " .. multiplier .. "x")
  end
  
  -- FIXED: Function to hide zone multiplier with smooth slide-out
  local function hideZoneMultiplier()
  	local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Back, Enum.EasingDirection.In)
  	local tween = TweenService:Create(zoneMultiplierBackground, tweenInfo, {
  		Position = offScreenPosition
  	})
  
  	tween:Play()  -  Edit
  03:05:10.927  === END CHUNK 126 ===  -  Edit
  03:05:10.927    -  Edit
  03:05:11.030  === CHUNK 127 ===  -  Edit
  03:05:11.030    	tween.Completed:Connect(function()
  		zoneMultiplierBackground.Visible = false
  		zoneMultiplierBackground.Position = offScreenPosition
  	end)
  
  	debugPrint("Hiding zone multiplier")
  end
  
  -- Event handlers
  table.insert(connections, ZoneEnteredEvent.OnClientEvent:Connect(function(zoneKey, multiplierOrReason, success)
  	if success then
  		debugPrint("Entered zone: " .. zoneKey .. " (Multiplier: " .. multiplierOrReason .. "x)")
  		enterSound:Play()
  		showZoneMultiplier(multiplierOrReason)
  	else
  		debugPrint("Failed to enter zone: " .. (multiplierOrReason or "Unknown reason"))
  		restrictedSound:Play()
  
  		if multiplierOrReason then
  			print(multiplierOrReason)
  		end
  	end
  end))
  
  table.insert(connections, ZoneExitedEvent.OnClientEvent:Connect(function()
  	debugPrint("Exited zone")
  	exitSound:Play()
  	hideZoneMultiplier()
  end))
  
  table.insert(connections, ZoneUnlockedEvent.OnClientEvent:Connect(function(zoneKey, zoneName, unlockMessage)
  	debugPrint("Zone unlocked: " .. zoneName)
  
  	print("üéâ " .. unlockMessage)
  
  	local notificationSound = Instance.new("Sound")
  	notificationSound.SoundId = ShopConfig.Sounds.NotificationShow
  	notificationSound.Volume = ShopConfig.Sounds.Volumes.Notification
  	notificationSound.Parent = workspace
  	notificationSound:Play()
  
  	notificationSound.Ended:Connect(function()
  		notificationSound:Destroy()
  	end)
  end))
  
  -- Cleanup on player leaving
  table.insert(connections, Players.PlayerRemoving:Connect(function(removingPlayer)
  	if removingPlayer == player then
  		cleanupConnections()  -  Edit
  03:05:11.030  === END CHUNK 127 ===  -  Edit
  03:05:11.030    -  Edit
  03:05:11.154  === CHUNK 128 ===  -  Edit
  03:05:11.154    	end
  end))
  
  debugPrint("ZoneClient setup complete")
--- END ZoneClient ---

ModuleScript: ShopConfig (in ReplicatedStorage) [ReplicatedStorage]
Path: ReplicatedStorage.ShopConfig
Content:
  -- ShopConfig (ModuleScript in ReplicatedStorage) - FIXED WITH SEPARATE GIFT DEVPRODUCTS
  return {
  	-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  	-- DEBUG SETTINGS
  	-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  	Debug = {
  		Enabled = true, -- Set to false to disable all debug prints
  		ShowClientDebug = true, -- Show client-side debug prints
  		ShowServerDebug = true, -- Show server-side debug prints
  		ShowLeaderstatsDebug = false, -- Show leaderstats debug (usually spammy)
  		ShowBoostDebug = false, -- Show boost system debug
  		ShowShopDebug = true, -- Show shop system debug
  		ShowZoneDebug = true, -- Show zone system debug
  		ShowRebirthDebug = true, -- Show rebirth system debug
  		ShowNotificationDebug = true -- Show notification system debug
  	},
  
  	-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  	-- SOUND CONFIGURATION
  	-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  	Sounds = {
  		-- UI Sounds
  		ButtonHover = "rbxassetid://10066931761",
  		ButtonClick = "rbxassetid://7593297942",
  		TabSwitch = "rbxassetid://12222183",
  
  		-- Purchase Sounds
  		PurchaseSuccess = "rbxassetid://3454671965",
  		PurchaseFail = "rbxassetid://2390695935",
  		AlreadyOwned = "rbxassetid://9066167010",
  
  		-- Shop Sounds
  		ShopOpen = "rbxassetid://2084290015",
  		ShopClose = "rbxassetid://8904888220",
  
  		-- Poop Sounds
  		PoopSpawn = "rbxassetid://98112849852832",
  
  		-- Notification Sounds
  		GiftReceived = "rbxassetid://1839997929",
  		NotificationShow = "rbxassetid://133071738727579",  -  Edit
  03:05:11.154  === END CHUNK 128 ===  -  Edit
  03:05:11.154    -  Edit
  03:05:11.258  === CHUNK 129 ===  -  Edit
  03:05:11.258    
  		-- Rebirth Sounds
  		RebirthSuccess = "rbxassetid://3454671965",
  		RebirthFail = "rbxassetid://2390695935",
  
  		-- Zone Sounds
  		ZoneEnter = "rbxassetid://12222253",
  		ZoneExit = "rbxassetid://12222152",
  		ZoneRestricted = "rbxassetid://9066167010",
  
  		-- Volume Settings
  		Volumes = {
  			UI = 0.5,
  			Purchase = 0.7,
  			Shop = 0.7,
  			Poop = 0.8,
  			Notification = 0.6,
  			Rebirth = 0.8,
  			Zone = 0.5
  		}
  	},
  
  	-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  	-- TWEEN & ANIMATION CONFIGURATION
  	-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  	Tweens = {
  		-- Button Effects
  		ButtonHover = {
  			Duration = 0.15,
  			EasingStyle = Enum.EasingStyle.Quad,
  			EasingDirection = Enum.EasingDirection.Out,
  			ScaleMultiplier = 1.05,
  			ColorLerp = 0.1 -- How much to lerp color (0.1 = 10% towards white)
  		},
  
  		ButtonClick = {
  			Duration = 0.1,
  			EasingStyle = Enum.EasingStyle.Quad,
  			EasingDirection = Enum.EasingDirection.Out,
  			ScaleMultiplier = 0.95,
  			RotationRange = 2 -- Random rotation in degrees
  		},
  
  		-- Shop Animations
  		ShopOpen = {
  			Duration = 0.7,
  			EasingStyle = Enum.EasingStyle.Back,
  			EasingDirection = Enum.EasingDirection.Out,
  			FOV = 40,
  			BlurSize = 25  -  Edit
  03:05:11.258  === END CHUNK 129 ===  -  Edit
  03:05:11.258    -  Edit
  03:05:11.361  === CHUNK 130 ===  -  Edit
  03:05:11.361    		},
  
  		ShopClose = {
  			Duration = 0.7,
  			EasingStyle = Enum.EasingStyle.Back,
  			EasingDirection = Enum.EasingDirection.In
  		},
  
  		-- Notification Animations
  		NotificationSlideDown = {
  			Duration = 0.5,
  			EasingStyle = Enum.EasingStyle.Back,
  			EasingDirection = Enum.EasingDirection.Out,
  			SlideDistance = 100 -- Pixels to slide from top
  		},
  
  		NotificationFadeUp = {
  			Duration = 0.3,
  			EasingStyle = Enum.EasingStyle.Quad,
  			EasingDirection = Enum.EasingDirection.In
  		},
  
  		-- Popup Animations
  		PopupMove = {
  			Duration = 2.0,
  			EasingStyle = Enum.EasingStyle.Quad,
  			EasingDirection = Enum.EasingDirection.Out,
  			MoveDistance = 50 -- Pixels to move up
  		},
  
  		-- Rebirth Animations
  		RebirthOpen = {
  			Duration = 0.5,
  			EasingStyle = Enum.EasingStyle.Back,
  			EasingDirection = Enum.EasingDirection.Out
  		},
  
  		RebirthClose = {
  			Duration = 0.3,
  			EasingStyle = Enum.EasingStyle.Back,
  			EasingDirection = Enum.EasingDirection.In
  		}
  	},
  
  	-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  	-- GAME CONFIGURATION
  	-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  	DefaultPoop = "Poop",
  	StartingPooBucks = 1,
  	StartingPoopsPooped = 0,  -  Edit
  03:05:11.361  === END CHUNK 130 ===  -  Edit
  03:05:11.361    -  Edit
  03:05:11.465  === CHUNK 131 ===  -  Edit
  03:05:11.465    	StartingRebirths = 0,
  
  	-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  	-- REBIRTH SYSTEM CONFIGURATION
  	-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  	Rebirth = {
  		-- Base cost for first rebirth
  		BaseCost = 10,
  
  		-- Cost multiplier for each rebirth (cost = BaseCost * (Multiplier ^ currentRebirths))
  		CostMultiplier = 2.5,
  
  		-- Multiplier gained per rebirth
  		MultiplierPerRebirth = 0.1, -- 0.1 = 10% increase (1.0x -> 1.1x -> 1.2x, etc.)
  
  		-- Maximum rebirths allowed (-1 for unlimited)
  		MaxRebirths = -1,
  
  		-- What gets reset on rebirth
  		ResetData = {
  			PooBucks = true,
  			OwnedPoops = false, -- Keep owned poops
  			EquippedPoop = false, -- Keep equipped poop
  			OwnedUpgrades = false, -- Keep upgrades
  			OwnedGamepasses = false, -- Keep gamepasses
  			PoopsPooped = false -- Keep poops pooped count
  		},
  
  		-- Rebirth requirements
  		Requirements = {
  			MinPooBucks = true, -- Require minimum PooBucks
  			MinPoopsPooped = false, -- Don't require poops pooped
  			MinZoneUnlocked = false -- Don't require zone unlocked
  		}
  	},
  	
  	-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  	-- ZONE SYSTEM CONFIGURATION
  	-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  	-- In your ShopConfig, replace the Portals section with this:
  	Portals = {
  		Effects = {
  			TeleportDuration = 1.0,
  			FadeInDuration = 0.5,
  			FadeOutDuration = 0.3,
  			ParticleEffectId = "rbxassetid://241650934",
  			TeleportSoundId = "rbxassetid://131961136",
  			Volume = 0.7,
  			CooldownTime = 2,
  			RequirementNotMetSound = "rbxassetid://9066167010"  -  Edit
  03:05:11.466  === END CHUNK 131 ===  -  Edit
  03:05:11.466    -  Edit
  03:05:11.566  === CHUNK 132 ===  -  Edit
  03:05:11.566    		},
  
  		PortalConfigs = {
  			-- Main Map to Zone 1
  			["Zone1Portal"] = {
  				Name = "Poop Sky Island Portal",
  				Description = "Travel to the Poop Sky Island!",
  				DestinationZone = "Zone1", -- This will go to FloatingPoopIslandMap
  				ArrivalPortal = "Zone1PortalToMainMap",
  				RequirementType = "PoopsPooped",
  				RequirementAmount = 350,
  				RequirementMessage = "You need 350 poops pooped to enter this zone!",
  				PortalType = "ZoneTeleport",
  				Enabled = true,
  				Effects = {
  					Color = Color3.fromRGB(34, 139, 34),
  					ParticleColor = Color3.fromRGB(85, 255, 127)
  				}
  			},
  
  			-- Zone 1 back to Main Map
  			["Zone1PortalToMainMap"] = {
  				Name = "Return to Main Island",
  				Description = "Return to the main lobby!",
  				DestinationZone = "MainMap", -- This will use spawn locations
  				ArrivalPortal = nil,
  				RequirementType = "None",
  				RequirementAmount = 0,
  				RequirementMessage = "",
  				PortalType = "ZoneTeleport",
  				Enabled = true,
  				Effects = {
  					Color = Color3.fromRGB(255, 255, 255),
  					ParticleColor = Color3.fromRGB(255, 255, 255)
  				}
  			},
  
  			-- Main Map to Zone 2
  			["Zone2Portal"] = {
  				Name = "Toilet Sky Island Portal",
  				Description = "Travel to the Toilet Sky Island!",
  				DestinationZone = "Zone2", -- This will go to FloatingToiletIslandMap
  				ArrivalPortal = "Zone2PortalArrive",
  				RequirementType = "PoopsPooped",
  				RequirementAmount = 750,
  				RequirementMessage = "You need 750 poops pooped to enter this zone!",
  				PortalType = "ZoneTeleport",
  				Enabled = true,
  				Effects = {
  					Color = Color3.fromRGB(255, 215, 0),  -  Edit
  03:05:11.566  === END CHUNK 132 ===  -  Edit
  03:05:11.567    -  Edit
  03:05:11.671  === CHUNK 133 ===  -  Edit
  03:05:11.671    					ParticleColor = Color3.fromRGB(255, 255, 127)
  				}
  			},
  
  			-- Zone 2 back to Main Map  
  			["Zone2PortalArrive"] = {
  				Name = "Return Portal",
  				Description = "Return to main lobby",
  				DestinationZone = "MainMap",
  				ArrivalPortal = nil,
  				RequirementType = "None",
  				RequirementAmount = 0,
  				RequirementMessage = "",
  				PortalType = "ZoneTeleport",
  				Enabled = true,
  				Effects = {
  					Color = Color3.fromRGB(255, 255, 255),
  					ParticleColor = Color3.fromRGB(255, 255, 255)
  				}
  			},
  
  			-- Main Map to Zone 3
  			["Zone3Portal"] = {
  				Name = "Great Mountain Portal", 
  				Description = "Travel to the Great Poop Mountain!",
  				DestinationZone = "Zone3", -- This will go to TheGreatMountainSkyIslandMap
  				ArrivalPortal = "Zone3PortalArrive",
  				RequirementType = "PoopsPooped",
  				RequirementAmount = 1500,
  				RequirementMessage = "You need 1500 poops pooped to enter this zone!",
  				PortalType = "ZoneTeleport",
  				Enabled = true,
  				Effects = {
  					Color = Color3.fromRGB(139, 69, 19),
  					ParticleColor = Color3.fromRGB(205, 133, 63)
  				}
  			},
  
  			-- Zone 3 back to Main Map
  			["Zone3PortalArrive"] = {
  				Name = "Return Portal",
  				Description = "Return to main lobby",
  				DestinationZone = "MainMap",
  				ArrivalPortal = nil,
  				RequirementType = "None", 
  				RequirementAmount = 0,
  				RequirementMessage = "",
  				PortalType = "ZoneTeleport",
  				Enabled = true,
  				Effects = {  -  Edit
  03:05:11.671  === END CHUNK 133 ===  -  Edit
  03:05:11.671    -  Edit
  03:05:11.774  === CHUNK 134 ===  -  Edit
  03:05:11.775    					Color = Color3.fromRGB(255, 255, 255),
  					ParticleColor = Color3.fromRGB(255, 255, 255)
  				}
  			}
  		}
  	},
  	
  	
  	
  	-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  	-- NOTIFICATION SYSTEM CONFIGURATION
  	-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  	Notifications = {
  		-- Gift notification settings
  		GiftNotification = {
  			Duration = 5, -- Seconds to show
  			AutoClose = true -- Automatically close after duration
  		},
  
  		-- Purchase notification settings
  		PurchaseNotification = {
  			Duration = 4, -- Seconds to show
  			AutoClose = true, -- Don't auto-close, let player close manually
  			CheckInterval = 2 -- Check every 2 seconds if player can afford next item
  		},
  
  		-- Rebirth notification settings
  		RebirthNotification = {
  			Duration = 3,
  			AutoClose = true
  		},
  
  		-- Zone notification settings
  		ZoneNotification = {
  			Duration = 4,
  			AutoClose = true
  		}
  	},
  
  	-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  	-- TAB CONFIGURATION
  	-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  	Tabs = {
  		PoopsButton = "PoopsScrollingFrame",
  		UpgradesButton = "UpgradesScrollingFrame", 
  		GamepassesButton = "GamepassesScrollingFrame"
  	},
  
  	-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  	-- POOP CONFIGURATION  -  Edit
  03:05:11.775  === END CHUNK 134 ===  -  Edit
  03:05:11.775    -  Edit
  03:05:11.877  === CHUNK 135 ===  -  Edit
  03:05:11.877    	-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  	Poops = {
  		["Poop"] = {
  			Name = "Basic Poop",
  			Price = 0,
  			Gain = 1,
  			ModelName = "Poop",
  			ButtonName = "PoopButton", 
  			Image = "",
  			Default = true,
  			Description = "Your basic everyday poop!",
  			Tier = 1
  		},
  		["StinkyPoop"] = {
  			Name = "Stinky Poop",
  			Price = 50,
  			Gain = 2,
  			ModelName = "StinkyPoop",
  			ButtonName = "StinkyPoopButton", 
  			Image = "",
  			Description = "Smells terrible but worth more!",
  			Tier = 2
  		},
  		["BurntPoop"] = {
  			Name = "Burnt Poop",
  			Price = 120,
  			Gain = 3,
  			ModelName = "BurntPoop",
  			ButtonName = "BurntPoopButton", 
  			Image = "",
  			Description = "Crispy and valuable!",
  			Tier = 3
  		},
  		["WaterPoop"] = {
  			Name = "Water Poop",
  			Price = 500,
  			Gain = 4,
  			ModelName = "WaterPoop",
  			ButtonName = "WaterPoopButton", 
  			Image = "",
  			Description = "Flowing with riches!",
  			Tier = 4
  		},
  		["ShockedPoop"] = {
  			Name = "Shocked Poop",
  			Price = 1350,
  			Gain = 6,
  			ModelName = "ShockedPoop",
  			ButtonName = "ShockedPoopButton", 
  			Image = "",  -  Edit
  03:05:11.877  === END CHUNK 135 ===  -  Edit
  03:05:11.877    -  Edit
  03:05:11.983  === CHUNK 136 ===  -  Edit
  03:05:11.983    			Description = "Electrifyingly profitable!",
  			Tier = 5
  		},
  		["HypnosisPoop"] = {
  			Name = "Hypnosis Poop",
  			Price = 1500,
  			Gain = 8,
  			ModelName = "HypnosisPoop",
  			ButtonName = "HypnosisPoopButton", 
  			Image = "",
  			Description = "Mesmerizingly valuable!",
  			Tier = 6
  		},
  		["HolyPoop"] = {
  			Name = "Holy Poop",
  			Price = 2000,
  			Gain = 10,
  			ModelName = "HolyPoop",
  			ButtonName = "HolyPoopButton", 
  			Image = "",
  			Description = "Blessed with divine value!",
  			Tier = 7
  		},
  		["BloodyPoop"] = {
  			Name = "Bloody Poop",
  			Price = 2250,
  			Gain = 12,
  			ModelName = "BloodyPoop",
  			ButtonName = "BloodyPoopButton", 
  			Image = "",
  			Description = "Dark and mysterious!",
  			Tier = 8
  		},
  		["DiamondPoop"] = {
  			Name = "Diamond Poop",
  			Price = 3000,
  			Gain = 15,
  			ModelName = "DiamondPoop",
  			ButtonName = "DiamondPoopButton", 
  			Image = "",
  			Description = "Sparkling with wealth!",
  			Tier = 9
  		},
  		["VoidPoop"] = {
  			Name = "Void Poop",
  			Price = 3850,
  			Gain = 20,
  			ModelName = "VoidPoop",
  			ButtonName = "VoidPoopButton", 
  			Image = "",  -  Edit
  03:05:11.983  === END CHUNK 136 ===  -  Edit
  03:05:11.983    -  Edit
  03:05:12.086  === CHUNK 137 ===  -  Edit
  03:05:12.086    			Description = "From the depths of nothingness!",
  			Tier = 10
  		},
  		["GalePoop"] = {
  			Name = "Gale Poop",
  			Price = 6500,
  			Gain = 25,
  			ModelName = "GalePoop",
  			ButtonName = "GalePoopButton", 
  			Image = "",
  			Description = "Swift as the wind!",
  			Tier = 11
  		},
  		["BlackHolePoop"] = {
  			Name = "Blackhole Poop",
  			Price = 10000,
  			Gain = 30,
  			ModelName = "BlackHolePoop",
  			ButtonName = "BlackHolePoopButton", 
  			Image = "",
  			Description = "Infinitely valuable!",
  			Tier = 12
  		}
  	},
  
  	-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  	-- UPGRADE CONFIGURATION
  	-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  	Upgrades = {
  		["2PoopsUpgrade"] = {
  			Name = "+1 Poop Production",
  			Price = 150,
  			Description = "Spawn 2 poops instead of 1!",
  			Image = "rbxassetid://98642207209330", 
  			Effect = "ProductionMultiplier",
  			Value = 2,
  			Tier = 1
  		}
  	},
  
  	-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  	-- GAMEPASS CONFIGURATION
  	-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  	Gamepasses = {
  		["2xPooBucks"] = {
  			Name = "2x PooBucks",
  			Price = 250, -- Robux
  			Description = "Double your PooBucks earnings permanently!",
  			Image = "rbxassetid://134507030110259",
  			GamepassId = 1346364423,   -  Edit
  03:05:12.086  === END CHUNK 137 ===  -  Edit
  03:05:12.086    -  Edit
  03:05:12.187  === CHUNK 138 ===  -  Edit
  03:05:12.187    			GiftDevProductId = 3349092827, -- DevProduct for gifting this gamepass
  			Effect = "CurrencyMultiplier",
  			Value = 2,
  			GiftDescription = "Gift this player permanent 2x PooBucks earnings!",
  			Tier = 1
  		},
  
  		["4xPooBucks"] = {
  			Name = "4x PooBucks",
  			Price = 500, -- Robux
  			Description = "Quadruple your PooBucks earnings permanently, also stacks!",
  			Image = "rbxassetid://134507030110259",
  			GamepassId = 1350896316, -- Different gamepass ID
  			GiftDevProductId = 3349104934, -- Different gift DevProduct ID
  			Effect = "CurrencyMultiplier",
  			Value = 4,
  			GiftDescription = "Gift this player permanent 4x PooBucks earnings!",
  			Tier = 2
  		},
  		
  	},
  
  	-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  	-- BOOST CONFIGURATION (DevProducts) - FIXED WITH SEPARATE GIFT DEVPRODUCTS
  	-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  	Boosts = {
  		["2xPooBucksBoost"] = {
  			Name = "2x PooBucks Boost",
  			Price = 30, -- Robux (DevProduct)
  			Description = "Doubles your PooBucks earnings for 15 minutes!",
  			Duration = 900, -- 15 minutes in seconds
  			Image = "rbxassetid://134507030110259",
  			DevProductId = 3347689445, -- For self-purchase
  			GiftDevProductId = 3349303195, -- SEPARATE DevProduct for gifting
  			Effect = "CurrencyMultiplier",
  			Value = 2,
  			ButtonName = "2xPooBucksBoostButton",
  			GiftDescription = "Gift this player 15 minutes of 2x PooBucks earnings!",
  			Stackable = true, -- Can be stacked multiple times
  			Tier = 1
  		},
  
  		["4xPooBucksBoost"] = {
  			Name = "4x PooBucks Boost",
  			Price = 55, -- Robux (DevProduct)
  			Description = "Multiplies your PooBucks earnings by 4 for 15 minutes!",
  			Duration = 900,
  			Image = "rbxassetid://134507030110259",
  			DevProductId = 3349315411, -- For self-purchase  
  			GiftDevProductId = 3349315023, -- SEPARATE DevProduct for gifting  -  Edit
  03:05:12.187  === END CHUNK 138 ===  -  Edit
  03:05:12.187    -  Edit
  03:05:12.289  === CHUNK 139 ===  -  Edit
  03:05:12.289    			Effect = "CurrencyMultiplier",
  			Value = 4,
  			ButtonName = "5xPooBucksBoostButton",
  			GiftDescription = "Gift this player 15 minutes of 4x PooBucks earnings!",
  			Stackable = true,
  			Tier = 2
  		}
  	},
  
  	-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  	-- EFFECT SYSTEM CONFIGURATION
  	-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  	Effects = {
  		-- Available effect types for upgrades/gamepasses/boosts
  		CurrencyMultiplier = {
  			Description = "Multiplies PooBucks gained from pooping",
  			AppliesTo = {"Gamepasses", "Boosts"}
  		},
  
  		ProductionMultiplier = {
  			Description = "Multiplies number of poops spawned per click", 
  			AppliesTo = {"Upgrades", "Boosts"}
  		},
  
  		SpeedMultiplier = {
  			Description = "Multiplies player walkspeed",
  			AppliesTo = {"Boosts"}
  		},
  
  		ZoneMultiplier = {
  			Description = "Multiplies earnings while in specific zones",
  			AppliesTo = {"Zones"}
  		},
  
  		RebirthMultiplier = {
  			Description = "Permanent multiplier from rebirths",
  			AppliesTo = {"Rebirth"}
  		}
  	},
  
  	-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  	-- PREVIEW CONFIGURATION
  	-- ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
  	Preview = {
  		ModelOffset = Vector3.new(0, 0, -2.5),
  		ModelRotation = Vector3.new(0, 0, 0),
  		SpinSpeed = 0.5 -- Rotations per second
  	}
  }
--- END ShopConfig ---  -  Edit
  03:05:12.290  === END CHUNK 139 ===  -  Edit
  03:05:12.290    -  Edit
  03:05:12.396  === CHUNK 140 ===  -  Edit
  03:05:12.396  
Script: TriggerShopScript (in Trigger) [Workspace]
Path: Workspace.Shop.Trigger.TriggerShopScript
Content:
  -- TriggerScript (ServerScript inside Workspace.Shop.Trigger)
  local Players = game:GetService("Players")
  local ReplicatedStorage = game:GetService("ReplicatedStorage")
  local RunService = game:GetService("RunService")
  
  -- Get the trigger part (this script's parent)
  local triggerPart = script.Parent
  
  -- Wait for RemoteEvent
  local RemoteEvent_OpenShop = ReplicatedStorage:WaitForChild("RemoteEvent_OpenShop")
  
  -- Create close shop event
  local RemoteEvent_CloseShop = Instance.new("RemoteEvent")
  RemoteEvent_CloseShop.Name = "RemoteEvent_CloseShop"
  RemoteEvent_CloseShop.Parent = ReplicatedStorage
  
  -- Track players in shop area
  local playersInShop = {}
  
  -- Function to check if player is still touching
  local function isPlayerTouchingPart(player, part)
  	if not player.Character or not player.Character.PrimaryPart then
  		return false
  	end
  
  	local character = player.Character
  	local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
  	if not humanoidRootPart then return false end
  
  	-- Check distance
  	local distance = (humanoidRootPart.Position - part.Position).Magnitude
  	local maxDistance = math.max(part.Size.X, part.Size.Y, part.Size.Z) -- Add buffer
  
  	return distance <= maxDistance
  end
  
  -- Handle touches
  triggerPart.Touched:Connect(function(hit)
  	local player = Players:GetPlayerFromCharacter(hit.Parent)
  	if player and not playersInShop[player] then
  		playersInShop[player] = true
  		RemoteEvent_OpenShop:FireClient(player)
  		print("Player " .. player.Name .. " entered shop")
  	end
  end)
    -  Edit
  03:05:12.396  === END CHUNK 140 ===  -  Edit
  03:05:12.396    -  Edit
  03:05:12.498  === FINAL CHUNK 141 ===  -  Edit
  03:05:12.499    -- Monitor players leaving shop area
  spawn(function()
  	while true do
  		wait(0.5) -- Check every half second
  
  		for player, _ in pairs(playersInShop) do
  			if player.Parent and not isPlayerTouchingPart(player, triggerPart) then
  				-- Player left the area
  				playersInShop[player] = nil
  				RemoteEvent_CloseShop:FireClient(player)
  				print("Player " .. player.Name .. " left shop")
  			end
  		end
  	end
  end)
  
  -- Clean up when players leave
  Players.PlayerRemoving:Connect(function(player)
  	playersInShop[player] = nil
  end)
  
  print("Shop trigger initialized with area monitoring!")
--- END TriggerShopScript ---
  -  Edit
  03:05:12.499  === END FINAL CHUNK ===  -  Edit
  03:05:12.499    -  Edit
  03:05:12.499  üîç ANALYSIS COMPLETE! üîç  -  Edit
  03:05:12.499  Total unique scripts found: 23  -  Edit
  03:05:12.499  Check all chunks above for complete script contents.  -  Edit


  03:05:51.114  > -- CHUNKED STRUCTURE ANALYSIS - AVOIDS TRUNCATION
local output = {}
local chunkSize = 200 -- Print every 100 lines

local function addToOutput(text)
    table.insert(output, text)
    
    -- Print and clear every chunkSize lines
    if #output >= chunkSize then
        print("CHUNK " .. math.ceil(#output / chunkSize) .. ":\n" .. table.concat(output, "\n"))
        output = {} -- Clear for next chunk
        wait(0.1) -- Small delay to prevent overwhelming
    end
end

local function exploreCompleteStructure(parent, serviceName, maxDepth)
    maxDepth = maxDepth or 4
    local function scan(obj, depth)
        if depth > maxDepth then return end
        
        local indent = string.rep("  ", depth)
        local info = indent .. obj.ClassName .. ": " .. obj.Name
        addToOutput(info)
        
        for _, child in pairs(obj:GetChildren()) do
            scan(child, depth + 1)
        end
    end
    
    addToOutput("=== " .. serviceName .. " COMPLETE STRUCTURE ===")
    scan(parent, 0)
    addToOutput("")
end

-- [Rest of the code same as before]
-- All services
local services = {
    {"ServerScriptService", game:GetService("ServerScriptService")},
    {"StarterPlayer", game:GetService("StarterPlayer")},
    {"StarterGui", game:GetService("StarterGui")},
    {"ReplicatedStorage", game:GetService("ReplicatedStorage")},
    {"Workspace", game.Workspace},
    {"Lighting", game:GetService("Lighting")},
    {"SoundService", game:GetService("SoundService")},
    {"ServerStorage", game:GetService("ServerStorage")}
}

addToOutput("üéÆ COMPLETE STRUCTURE ANALYSIS - CHUNKED üéÆ")

for _, serviceInfo in pairs(services) do
    exploreCompleteStructure(serviceInfo[2], serviceInfo[1], 5)
end

-- Print any remaining output
if #output > 0 then
    print("FINAL CHUNK:\n" .. table.concat(output, "\n"))
end

print("üîç ANALYSIS COMPLETE - CHECK ALL CHUNKS ABOVE üîç")  -  Studio
  03:05:51.116  CHUNK 1:
üéÆ COMPLETE STRUCTURE ANALYSIS - CHUNKED üéÆ
=== ServerScriptService COMPLETE STRUCTURE ===
ServerScriptService: ServerScriptService
  Script: leaderstats
    StringValue: OriginalParent
  Script: ShopServer
    StringValue: OriginalParent
  Script: BoostsServer
    StringValue: OriginalParent
  Script: R6 Script
    LocalScript: R6 Camera
    Model: R6
      Part: Head
        SpecialMesh: Mesh
        Decal: face
        Attachment: HairAttachment
        Attachment: HatAttachment
        Attachment: FaceFrontAttachment
        Attachment: FaceCenterAttachment
      Part: Torso
        Decal: roblox
        Attachment: NeckAttachment
        Attachment: BodyFrontAttachment
        Attachment: BodyBackAttachment
        Attachment: LeftCollarAttachment
        Attachment: RightCollarAttachment
        Attachment: WaistFrontAttachment
        Attachment: WaistCenterAttachment
        Attachment: WaistBackAttachment
        Motor6D: Right Shoulder
        Motor6D: Left Shoulder
        Motor6D: Right Hip
        Motor6D: Left Hip
        Motor6D: Neck
      Part: Left Arm
        Attachment: LeftShoulderAttachment
      Part: Right Arm
        Attachment: RightShoulderAttachment
      Part: Left Leg
      Part: Right Leg
      Humanoid: Humanoid
        Animator: Animator
      Part: HumanoidRootPart
        Motor6D: RootJoint
      LocalScript: Animate
        StringValue: idle
          Animation: Animation1
          Animation: Animation2
        StringValue: walk
          Animation: WalkAnim
        StringValue: run
          Animation: RunAnim
        StringValue: jump
          Animation: JumpAnim
        StringValue: climb
          Animation: ClimbAnim
        StringValue: toolnone
          Animation: ToolNoneAnim
        StringValue: fall
          Animation: FallAnim
        StringValue: sit
          Animation: SitAnim
      Script: Health
      BoolValue: R6
      BodyColors: Body Colors
  Script: ZoneSystem
  Script: PortalSystem

=== StarterPlayer COMPLETE STRUCTURE ===
StarterPlayer: StarterPlayer
  StarterPlayerScripts: StarterPlayerScripts
    LocalScript: PoopScript
      StringValue: OriginalParent
    LocalScript: PortalClient
  StarterCharacterScripts: StarterCharacterScripts

=== StarterGui COMPLETE STRUCTURE ===
StarterGui: StarterGui
  ScreenGui: CurrencyGui
    Frame: Background
      UIStroke: UIStroke
      UICorner: UICorner
      UIGradient: UIGradient
      TextLabel: PooBucks
        UIStroke: UIStroke
        LocalScript: CurrencyUpdaterScript
          StringValue: OriginalParent
        UIAspectRatioConstraint: UIAspectRatioConstraint
      ImageLabel: Image
        UIAspectRatioConstraint: UIAspectRatioConstraint
      UIAspectRatioConstraint: UIAspectRatioConstraint
    Frame: TimesPoopedBG
      UIStroke: UIStroke
      UICorner: UICorner
      UIGradient: UIGradient
      TextLabel: TimesPooped
        UIStroke: UIStroke
        LocalScript: CurrencyUpdaterScript
          StringValue: OriginalParent
        UIAspectRatioConstraint: UIAspectRatioConstraint
      ImageLabel: Image
        UIAspectRatioConstraint: UIAspectRatioConstraint
      UIAspectRatioConstraint: UIAspectRatioConstraint
    UIAspectRatioConstraint: UIAspectRatioConstraint
  ScreenGui: PoopButtonGui
    CanvasGroup: CanvasBackground
      UICorner: UICorner
      Frame: SlideFrame1
        TextLabel: Title
          UIStroke: UIStroke
          UIAspectRatioConstraint: UIAspectRatioConstraint
        UIAspectRatioConstraint: UIAspectRatioConstraint
      Frame: SlideFrame2
        UIAspectRatioConstraint: UIAspectRatioConstraint
      Frame: SlideFrame3
        UIAspectRatioConstraint: UIAspectRatioConstraint
      Frame: SlideFrame4
        ImageLabel: PoopImageLabel
          UIAspectRatioConstraint: UIAspectRatioConstraint
        UIAspectRatioConstraint: UIAspectRatioConstraint
      TextButton: Button
        UIAspectRatioConstraint: UIAspectRatioConstraint
        LocalScript: PoopButtonGuiAnimation
          StringValue: OriginalParent
      UIStroke: UIStroke
      Frame: SlideFrame5
        UIAspectRatioConstraint: UIAspectRatioConstraint
      UIAspectRatioConstraint: UIAspectRatioConstraint
    UIAspectRatioConstraint: UIAspectRatioConstraint
  ScreenGui: ShopGui
    Frame: ShopFrame
      ImageButton: ExitButton
        TextLabel: ExitLabel
          UIStroke: UIStroke
          UIAspectRatioConstraint: UIAspectRatioConstraint
        UIAspectRatioConstraint: UIAspectRatioConstraint
      CanvasGroup: CanvasBackground
        Frame: ButtonsBackground
          UIListLayout: UIListLayout
          ImageButton: PoopsButton
          ImageButton: UpgradesButton
          ImageButton: GamepassesButton
          UIAspectRatioConstraint: UIAspectRatioConstraint
        Frame: CosmeticBackground
          UICorner: UICorner
          UIStroke: UIStroke
          UIAspectRatioConstraint: UIAspectRatioConstraint
        ScrollingFrame: PoopsScrollingFrame
          UICorner: UICorner
          Frame: Background
          UIAspectRatioConstraint: UIAspectRatioConstraint
        Frame: InfoBackground
          UICorner: UICorner
          ViewportFrame: PoopViewportFrame
          TextLabel: NameLabel
          TextLabel: DescriptionLabel
          TextButton: BuyButton
          TextLabel: GainLabel
          ImageLabel: PoopImageLabel
          Frame: GamepassBuyAndGiftButtons
          UIAspectRatioConstraint: UIAspectRatioConstraint
        ScrollingFrame: UpgradesScrollingFrame
          UICorner: UICorner
          Frame: Background
          UIAspectRatioConstraint: UIAspectRatioConstraint
        ScrollingFrame: GamepassesScrollingFrame
          UICorner: UICorner
          Frame: GamepassesBackground
          TextLabel: GamepassTitleTextlabel
          TextLabel: BoostsTitleTextlabel
          Frame: BoostsBackground
          UIAspectRatioConstraint: UIAspectRatioConstraint
        Frame: GiftFrame
          UIStroke: UIStroke
          UICorner: UICorner
          UIGradient: UIGradient
          TextLabel: GamepassTitleTextLabel
          TextLabel: GamepassDescription
          TextBox: TypePlayerUsernameTextbox
          TextButton: GiftAPlayerButton
          ImageButton: ExitGiftFrameButton
          UIAspectRatioConstraint: UIAspectRatioConstraint
        UIAspectRatioConstraint: UIAspectRatioConstraint
      UIAspectRatioConstraint: UIAspectRatioConstraint
    UIAspectRatioConstraint: UIAspectRatioConstraint
    LocalScript: ShopScript
      StringValue: OriginalParent
  ScreenGui: PopupScreenGui
    CanvasGroup: PopupBackgroundTemplate
      TextLabel: PooBucksGained
        UIStroke: UIStroke
        UIAspectRatioConstraint: UIAspectRatioConstraint
      ImageLabel: PopupImage
        UIAspectRatioConstraint: UIAspectRatioConstraint
      UIAspectRatioConstraint: UIAspectRatioConstraint
    LocalScript: PopupManager
      StringValue: OriginalParent
    UIAspectRatioConstraint: UIAspectRatioConstraint
  ScreenGui: BoostsGui
    Frame: Background  -  Edit
  03:05:51.218  CHUNK 1:
      UIListLayout: UIListLayout
      ImageButton: BoostTemplate1
        UICorner: UICorner
        UIAspectRatioConstraint: UIAspectRatioConstraint
      ImageButton: BoostTemplate2
        UICorner: UICorner
        UIAspectRatioConstraint: UIAspectRatioConstraint
      ImageButton: BoostTemplate3
        UICorner: UICorner
        UIAspectRatioConstraint: UIAspectRatioConstraint
      ImageButton: BoostTemplate4
        UICorner: UICorner
        UIAspectRatioConstraint: UIAspectRatioConstraint
      UIAspectRatioConstraint: UIAspectRatioConstraint
    Frame: HoverFrame
      UICorner: UICorner
      UIStroke: UIStroke
      TextLabel: Description
        UIStroke: UIStroke
      TextLabel: TimeLeft
        UIStroke: UIStroke
      UIGradient: UIGradient
      UIAspectRatioConstraint: UIAspectRatioConstraint
    LocalScript: BoostsScript
    UIAspectRatioConstraint: UIAspectRatioConstraint
  ScreenGui: NotificationGui
    Frame: NextPurchaseNotificationBackground
      UIStroke: UIStroke
      UICorner: UICorner
      UIGradient: UIGradient
      TextLabel: NotificationTitle
        UIStroke: UIStroke
        UIGradient: UIGradient
        UIAspectRatioConstraint: UIAspectRatioConstraint
      ImageButton: ExitButton
        TextLabel: ExitLabel
          UIStroke: UIStroke
          UIAspectRatioConstraint: UIAspectRatioConstraint
        UIAspectRatioConstraint: UIAspectRatioConstraint
      TextLabel: NotificationDescription
        UIStroke: UIStroke
        UIGradient: UIGradient
        UIAspectRatioConstraint: UIAspectRatioConstraint
      UIGradient: UIGradient
      TextButton: TeleportToShopButton
        UICorner: UICorner
        UIStroke: UIStroke
        UIStroke: UIStroke
        UIAspectRatioConstraint: UIAspectRatioConstraint
      UIAspectRatioConstraint: UIAspectRatioConstraint
    Frame: RecievedGiftNotificationBackground
      UIStroke: UIStroke
      UICorner: UICorner
      TextLabel: NotificationTitle
        UIStroke: UIStroke
        UIGradient: UIGradient
        UIAspectRatioConstraint: UIAspectRatioConstraint
      TextLabel: NotificationDescription
        UIStroke: UIStroke
        UIGradient: UIGradient
        UIAspectRatioConstraint: UIAspectRatioConstraint
      ImageButton: ExitButton
        TextLabel: ExitLabel
          UIStroke: UIStroke
          UIAspectRatioConstraint: UIAspectRatioConstraint
        UIAspectRatioConstraint: UIAspectRatioConstraint
      UIGradient: UIGradient
      UIAspectRatioConstraint: UIAspectRatioConstraint
    LocalScript: NotificationSystem
    UIAspectRatioConstraint: UIAspectRatioConstraint
  ScreenGui: RebirthGui
    Frame: Rebirthbackground
      UICorner: UICorner
      TextLabel: RebirthTitle
        UIStroke: UIStroke
        UIGradient: UIGradient
        UIAspectRatioConstraint: UIAspectRatioConstraint
      ImageButton: ExitButton
        TextLabel: ExitLabel
          UIStroke: UIStroke
          UIAspectRatioConstraint: UIAspectRatioConstraint
        UIAspectRatioConstraint: UIAspectRatioConstraint
      UIStroke: UIStroke
      TextLabel: RebirthDescription
        UIStroke: UIStroke
        UIGradient: UIGradient
        UIGradient: UIGradient
        UIAspectRatioConstraint: UIAspectRatioConstraint
      TextLabel: MultiplierChange
        UIStroke: UIStroke
        UIGradient: UIGradient
        UIAspectRatioConstraint: UIAspectRatioConstraint
      CanvasGroup: Bar
        UICorner: UICorner
        UIStroke: UIStroke
        UIAspectRatioConstraint: UIAspectRatioConstraint
        Frame: BarFramePercentage
          UICorner: UICorner
      TextLabel: RebirthCost
        UIStroke: UIStroke
        UIGradient: UIGradient
        UIAspectRatioConstraint: UIAspectRatioConstraint
      UIGradient: UIGradient
      TextLabel: RebirthbBarPercentage
        UIStroke: UIStroke
        UIGradient: UIGradient
        UIAspectRatioConstraint: UIAspectRatioConstraint
      UIAspectRatioConstraint: UIAspectRatioConstraint
      ImageLabel: CosmeticImageLabel
        UIAspectRatioConstraint: UIAspectRatioConstraint
      TextButton: RebirthButton
        UICorner: UICorner
        UIStroke: UIStroke
        UIStroke: UIStroke
        UIAspectRatioConstraint: UIAspectRatioConstraint
    Frame: RebirthMultiplierDisplayOnPooBucksCurrency
      UICorner: UICorner
      UIAspectRatioConstraint: UIAspectRatioConstraint
    LocalScript: RebirthClient
    UIAspectRatioConstraint: UIAspectRatioConstraint
  ScreenGui: ZoneMultiplier
    Frame: ZoneMultiplierBackground
      TextLabel: ZoneMultiplierTextLabel
        UIStroke: UIStroke
        UIAspectRatioConstraint: UIAspectRatioConstraint
      UIAspectRatioConstraint: UIAspectRatioConstraint
    LocalScript: ZoneClient
    UIAspectRatioConstraint: UIAspectRatioConstraint
  ScreenGui: EggsGui
    CanvasGroup: EggHatchingBackground
      ViewportFrame: ViewportFrame
        Camera: Camera
        MeshPart: Egg
        UIAspectRatioConstraint: UIAspectRatioConstraint
      UIAspectRatioConstraint: UIAspectRatioConstraint
    Frame: PetsInventoryBackground
      UIStroke: UIStroke
      UICorner: UICorner
      ScrollingFrame: PetsInventoryScrollingFrame
        UIStroke: UIStroke
        UICorner: UICorner
        Frame: PetsHolderButtonsFrame
          TextButton: PetBackgroundTemplate
          UIListLayout: UIListLayout
          UIAspectRatioConstraint: UIAspectRatioConstraint
        UIAspectRatioConstraint: UIAspectRatioConstraint
      Frame: InfoFrame
        UICorner: UICorner
        UIStroke: UIStroke
        ViewportFrame: PetsViewportFrame
          UIStroke: UIStroke
          UICorner: UICorner
          UIAspectRatioConstraint: UIAspectRatioConstraint
        TextLabel: PetNameLabel
          UIStroke: UIStroke
          UIStroke: UIStroke
          UIAspectRatioConstraint: UIAspectRatioConstraint
        TextLabel: PetNameLabel
          UIStroke: UIStroke
          UIStroke: UIStroke
          UIAspectRatioConstraint: UIAspectRatioConstraint
        TextLabel: PoopProductionLabel
          UIStroke: UIStroke
          UIStroke: UIStroke
          UIAspectRatioConstraint: UIAspectRatioConstraint
        ImageLabel: CosmenticImageLabel
          UIAspectRatioConstraint: UIAspectRatioConstraint
        TextButton: Equip/UnequipButton
          UIStroke: UIStroke
          UIStroke: UIStroke
          UICorner: UICorner
          UIAspectRatioConstraint: UIAspectRatioConstraint
        TextButton: DeleteButton
          UIStroke: UIStroke
          UIStroke: UIStroke
          UICorner: UICorner
          UIAspectRatioConstraint: UIAspectRatioConstraint
        UIAspectRatioConstraint: UIAspectRatioConstraint
      Frame: InventoryInfoBackgroundFrame
        TextLabel: PetsLeftForInventory
          UIStroke: UIStroke
          UIStroke: UIStroke
          UIAspectRatioConstraint: UIAspectRatioConstraint
        TextLabel: PetsEquippedLabel
          UIStroke: UIStroke
          UIStroke: UIStroke
          UIAspectRatioConstraint: UIAspectRatioConstraint
        UIAspectRatioConstraint: UIAspectRatioConstraint
      TextLabel: PetNameLabel
        UIStroke: UIStroke
        UIAspectRatioConstraint: UIAspectRatioConstraint
      UIAspectRatioConstraint: UIAspectRatioConstraint
    UIAspectRatioConstraint: UIAspectRatioConstraint
    Frame: PetsStandPreviewFrameBackground
      Frame: EggInfo
        UIListLayout: UIListLayout
        TextLabel: EggName
          UIStroke: UIStroke
          UIGradient: UIGradient
        TextLabel: Price  -  Edit
  03:05:51.320  CHUNK 1:
          UIStroke: UIStroke
      UIListLayout: UIListLayout
      Frame: Buttons
        UIListLayout: UIListLayout
        Frame: Single
          UICorner: UICorner
          TextButton: Click
          TextLabel: EKeyTextLabel
          UIAspectRatioConstraint: UIAspectRatioConstraint
        Frame: Triple
          UICorner: UICorner
          TextButton: Click
          TextLabel: RKeyTextLabel
          UIAspectRatioConstraint: UIAspectRatioConstraint
        Frame: Auto
          UICorner: UICorner
          TextButton: Click
          TextLabel: TKeyTextLabel
          UIAspectRatioConstraint: UIAspectRatioConstraint
      UIAspectRatioConstraint: UIAspectRatioConstraint
      Frame: PetChances
        UICorner: UICorner
        Frame: List
          UIGridLayout: UIGridLayout
          Frame: Pet1
          UIPadding: UIPadding
          Frame: Pet7
          Frame: Pet4
          Frame: Pet2
          Frame: Pet3
          Frame: Pet5
          Frame: Pet6
          Frame: Pet8
          Frame: Pet9
  ScreenGui: StatsGui
    Frame: StatsBackground
      UIStroke: UIStroke
      UICorner: UICorner
      TextLabel: StatsTitleLabel
        UIStroke: UIStroke
        UIAspectRatioConstraint: UIAspectRatioConstraint
        UIGradient: UIGradient
      UIAspectRatioConstraint: UIAspectRatioConstraint
      UIGradient: UIGradient
      ImageButton: ExitButton
        TextLabel: ExitLabel
          UIStroke: UIStroke
      Frame: Background
        UIListLayout: UIListLayout
        Frame: PooBucksStatsBackground
          UIStroke: UIStroke
          UICorner: UICorner
          UIGradient: UIGradient
          ImageLabel: CosmeticIcon
          TextLabel: PooBucksLabel
        Frame: PoopsStatsBackground
          UIStroke: UIStroke
          UICorner: UICorner
          UIGradient: UIGradient
          ImageLabel: CosmeticIcon
          TextLabel: PoopsStatsLabel
        Frame: RebirthsStatsBackground
          UIStroke: UIStroke
          UICorner: UICorner
          UIGradient: UIGradient
          ImageLabel: CosmeticIcon
          TextLabel: RebirthStatsLabel
    UIAspectRatioConstraint: UIAspectRatioConstraint
  ScreenGui: ScreenButtonsGui
    Frame: Background
      ImageButton: RebirthButtonOpen/Close
        UICorner: UICorner
        ImageLabel: CosmeticIcon
          UIAspectRatioConstraint: UIAspectRatioConstraint
        UIGradient: UIGradient
        UIAspectRatioConstraint: UIAspectRatioConstraint
      ImageButton: PetsOpen/CloseButton
        UICorner: UICorner
        ImageLabel: CosmeticIcon
          UIAspectRatioConstraint: UIAspectRatioConstraint
        UIGradient: UIGradient
        UIAspectRatioConstraint: UIAspectRatioConstraint
      ImageButton: StatsButtonOpen/Close
        UICorner: UICorner
        ImageLabel: CosmeticIcon
          UIAspectRatioConstraint: UIAspectRatioConstraint
        UIGradient: UIGradient
        UIAspectRatioConstraint: UIAspectRatioConstraint
      UIListLayout: UIListLayout
      ImageButton: SettingButtonOpen/Close
        UICorner: UICorner
        ImageLabel: CosmeticIcon
          UIAspectRatioConstraint: UIAspectRatioConstraint
        UIGradient: UIGradient
        UIAspectRatioConstraint: UIAspectRatioConstraint
      ImageButton: ShopGuiOpen/Close
        UICorner: UICorner
        ImageLabel: CosmeticIcon
          UIAspectRatioConstraint: UIAspectRatioConstraint
        UIGradient: UIGradient
        UIAspectRatioConstraint: UIAspectRatioConstraint
      ImageButton: GroupRewardsIcon
        UICorner: UICorner
        ImageLabel: CosmeticIcon
          UIAspectRatioConstraint: UIAspectRatioConstraint
        UIGradient: UIGradient
        UIAspectRatioConstraint: UIAspectRatioConstraint
      UIAspectRatioConstraint: UIAspectRatioConstraint
    UIAspectRatioConstraint: UIAspectRatioConstraint
  ScreenGui: SettingsGui
    Frame: SettingsBackground
      UIStroke: UIStroke
      UICorner: UICorner
      TextLabel: StatsTitleLabel
        UIStroke: UIStroke
        UIAspectRatioConstraint: UIAspectRatioConstraint
        UIGradient: UIGradient
      UIAspectRatioConstraint: UIAspectRatioConstraint
      UIGradient: UIGradient
      ImageButton: ExitButton
        TextLabel: ExitLabel
          UIStroke: UIStroke
          UIAspectRatioConstraint: UIAspectRatioConstraint
        UIAspectRatioConstraint: UIAspectRatioConstraint
      Frame: Background
        UIListLayout: UIListLayout
        Frame: ChangeMusicBackground
          UIStroke: UIStroke
          UICorner: UICorner
          UIGradient: UIGradient
          ImageLabel: CosmeticIcon
          TextButton: On/Off Settings
          UIAspectRatioConstraint: UIAspectRatioConstraint
        Frame: ChangeQualityBackground
          UIStroke: UIStroke
          UICorner: UICorner
          UIGradient: UIGradient
          ImageLabel: CosmeticIcon
          TextButton: On/Off Settings
          UIAspectRatioConstraint: UIAspectRatioConstraint
        Frame: DisablePopups(MoneyGainPopups)
          UIStroke: UIStroke
          UICorner: UICorner
          UIGradient: UIGradient
          ImageLabel: CosmeticIcon
          TextButton: On/Off Settings
          UIAspectRatioConstraint: UIAspectRatioConstraint
        UIAspectRatioConstraint: UIAspectRatioConstraint
    UIAspectRatioConstraint: UIAspectRatioConstraint
  ScreenGui: GroupRewardsGui
    Frame: StatsBackground
      UIStroke: UIStroke
      UICorner: UICorner
      TextLabel: StatsTitleLabel
        UIStroke: UIStroke
        UIGradient: UIGradient
      UIGradient: UIGradient
      ImageButton: ExitButton
        TextLabel: ExitLabel
          UIStroke: UIStroke
      ImageLabel: CosmeticIcon
        UICorner: UICorner
      TextLabel: DescriptionOfGroupRewards
        UIStroke: UIStroke
        UIGradient: UIGradient
      ImageLabel: Image
        UIAspectRatioConstraint: UIAspectRatioConstraint
      TextLabel: +2,000 PooBucks
        UIStroke: UIStroke
        UIGradient: UIGradient
      ImageLabel: Image
        UIAspectRatioConstraint: UIAspectRatioConstraint
      TextLabel: +2,000 PooBucks
        UIStroke: UIStroke
        UIGradient: UIGradient
      TextButton: VerifyButton
        UIStroke: UIStroke
        UIStroke: UIStroke
        UICorner: UICorner

=== ReplicatedStorage COMPLETE STRUCTURE ===
ReplicatedStorage: ReplicatedStorage
  ModuleScript: ShopConfig
  RemoteEvent: PoopGainPopupEvent
  Folder: PoopFolder
    Model: BurntPoop
      UnionOperation: Poop
        Attachment: Explosion
          ParticleEmitter: BrightWave (5)
          ParticleEmitter: Sparks (30)
          ParticleEmitter: DarkWave (5)
    Model: Poop
      UnionOperation: Poop
    Model: StinkyPoop
      UnionOperation: Poop
        Attachment: Poison_Attachment1(*)
          ParticleEmitter: backdrop
          ParticleEmitter: poison specks
        Attachment: Poison_Attachment2(*)
          ParticleEmitter: poison dark  -  Edit
  03:05:51.425  CHUNK 1:
          ParticleEmitter: poison dark
    Model: WaterPoop
      UnionOperation: Poop
        Attachment: Part1
          ParticleEmitter: Charge
          ParticleEmitter: Swirl
    Model: StarPoop
      UnionOperation: Poop
        Attachment: Middle
          ParticleEmitter: Glowing Core
          ParticleEmitter: Rays
    Model: ShockedPoop
      UnionOperation: Poop
        ParticleEmitter: ELECTRIC
    Model: HypnosisPoop
      UnionOperation: Poop
        Attachment: Attachment
          ParticleEmitter: Hit
          ParticleEmitter: vroom
          ParticleEmitter: Vortex
          ParticleEmitter: Vortex
    Model: HolyPoop
      UnionOperation: Poop
        Attachment: Middle
          ParticleEmitter: Singular Rays
          ParticleEmitter: Shining Circle
          ParticleEmitter: Core
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
    Model: BloodyPoop
      UnionOperation: Poop
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
          ParticleEmitter: BloodHit
          ParticleEmitter: slash5
          ParticleEmitter: ParticleEmitter
          ParticleEmitter: ParticleEmitter
    Model: DiamondPoop
      UnionOperation: Poop
        Attachment: PerfectBlock(*)
          ParticleEmitter: Radial(1)
          ParticleEmitter: CenterPiece (10)
          ParticleEmitter: Saprks (30)
          ParticleEmitter: CenterStar (30)
          ParticleEmitter: CenterWave (10)
        Attachment: Part1
          ParticleEmitter: Charge
          ParticleEmitter: Swirl
        Attachment: Ground2
          ParticleEmitter: Center1
          ParticleEmitter: Center2
          ParticleEmitter: Circle
          ParticleEmitter: Beams
          ParticleEmitter: Traces
        Attachment: Block(*)
          ParticleEmitter: Radial(1)
          ParticleEmitter: Saprks (30)
          ParticleEmitter: CenterStar (30)
    Model: VoidPoop
      UnionOperation: Poop
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
          ParticleEmitter: BloodHit
          ParticleEmitter: ParticleEmitter
    Model: BlackHolePoop
      UnionOperation: Poop
        Attachment: MIDDLE
          ParticleEmitter: CORE
          ParticleEmitter: CORE RING
          ParticleEmitter: VOID
          ParticleEmitter: CREEPING DARK
          ParticleEmitter: ABYSS
    Model: GalePoop
      UnionOperation: Poop
        ParticleEmitter: CUTS
        Attachment: Middle
          ParticleEmitter: Primary Arcs
          ParticleEmitter: Secondary Arcs
          ParticleEmitter: Main Core
          ParticleEmitter: Charge
        Attachment: Attachment
          ParticleEmitter: HITPE
          ParticleEmitter: ParticleEmitter
          Folder: Folder
  Folder: Pets
    Folder: Egg1
      Folder: Common
        Model: Dog
          MeshPart: MeshPart
          MeshPart: MainPart
          Folder: Settings
      Folder: Rare
        Model: Bee
          MeshPart: Wings
          MeshPart: Cube That Is Too Smooth 
          MeshPart: Cube That Is Too Smooth 
          MeshPart: Wings
          MeshPart: Cube That Is Too Smooth 
          MeshPart: Cube That Is Too Smooth 
          Part: MainPart
          Part: Face
          Folder: Settings
      Folder: Epic
        Model: Cow
          MeshPart: MainPart
          MeshPart: Tail
          MeshPart: Ears
          MeshPart: Ears
          Part: AnimatedFace
          Folder: Settings
    Folder: Egg3
      Folder: Uncommon
        Model: Ninja
          MeshPart: MainPart
          MeshPart: InnerPart
          MeshPart: Hilt2
          MeshPart: Sword2
          MeshPart: Hilt1
          MeshPart: Hilt2
          MeshPart: Sword1
          MeshPart: Hilt1
          Part: AnimatedFace
          Part: AnimatedFace
          Folder: Settings
      Folder: Rare
        Model: Dragon
          MeshPart: MainPart
          MeshPart: Cube That Is Too Smooth 
          MeshPart: MeshPart
          MeshPart: MeshPart
          MeshPart: MeshPart
          MeshPart: MeshPart
          MeshPart: MeshPart
          MeshPart: MeshPart
          MeshPart: MeshPart
          MeshPart: MeshPart
          MeshPart: MeshPart
          MeshPart: MeshPart
          MeshPart: MeshPart
          MeshPart: MeshPart
          MeshPart: MeshPart
          MeshPart: MeshPart
          Folder: Settings
      Folder: Epic
        Model: Golem
          MeshPart: Spike
          MeshPart: Spike
          MeshPart: Spike
          MeshPart: Spike
          MeshPart: MainPart
          MeshPart: Spike
          MeshPart: Spike
          MeshPart: Spike
          MeshPart: Spike
          MeshPart: Spike
          MeshPart: Spike
          MeshPart: Spike
          Folder: Settings
      Folder: Legendary
        Model: Thundercloud
          MeshPart: MeshPart
          MeshPart: MeshPart
          Part: AnimatedFace
          UnionOperation: Lightning
          MeshPart: MainPart
          Folder: Settings
    Folder: Egg2
      Folder: Rare
        Model: Burger
          MeshPart: Meshes/k√∂fte
          MeshPart: MainPart
          MeshPart: Meshes/k√∂fte
          MeshPart: Meshes/k√∂fte
          MeshPart: Meshes/k√∂fte
          MeshPart: Meshes/k√∂fte
          Folder: Settings
      Folder: Epic
        Model: Pumpkin
          MeshPart: MeshPart
          Part: AnimatedFace
          MeshPart: MainPart
          Folder: Settings
      Folder: Legendary
        Model: Strawberry
          MeshPart: MainPart
          MeshPart: Meshes/Strawberry_01 (2)
          Folder: Settings
  Folder: PetsAsset
    BillboardGui: BillBoardGuiOverAEquippedPet
      TextLabel: PetName
        UIStroke: UIStroke
      TextLabel: PetRarity
        UIStroke: UIStroke
      UIStroke: UIStroke
    Folder: EggsForHatchingInViewportFrame
      MeshPart: Egg1
      MeshPart: Egg2
      MeshPart: Egg3

=== Workspace COMPLETE STRUCTURE ===  -  Edit
  03:05:51.529  CHUNK 1:
Workspace: Workspace
  Terrain: Terrain
    Part: mohamad2041_googly_base_left
      SpotLight: googly_spotlight
    Part: mohamad2041_googly_pupil_left
    Part: mohamad2041_googly_base_right
      SpotLight: googly_spotlight
    Part: mohamad2041_googly_pupil_right
  Folder: Shop
    Part: Trigger
      Script: TriggerShopScript
        StringValue: OriginalParent
    Model: Cartoony house (NOT MINE)
      Part: Door Steps
      Part: House Base
      Part: Door Steps
      Part: Back Roof Window Blue Glass
      UnionOperation: White Frame of Back Roof Window
      Part: Door Knob
      UnionOperation: White Polls and Base
      Part: Roof Window Blue Glass
      Part: Brown Door
      Part: Right Window Blue Glass
      UnionOperation: White Door Frame
      Part: Back Window Blue Galss
      UnionOperation: White Frame of Roof Window
      UnionOperation: White Frame of Left Window
      UnionOperation: Red Middle
      UnionOperation: Black Roof
      UnionOperation: White Frame of  Right Window
      UnionOperation: White Frame of Back Window
      Part: Left Window Blue Glass
      UnionOperation: Bricks
      Model: TextModel2
        MeshPart: S
        MeshPart: H
        MeshPart: O
        MeshPart: P
    Model: GemShop
      MeshPart: Shop
        Highlight: Highlight
      MeshPart: MainPart
        BillboardGui: BillboardGui
          TextLabel: TextLabel
  Folder: Zones
    Part: Zone1
    Part: Zone2
    Part: Zone3
  Folder: LobbyMap
    Model: Cartoony fountain (NOT MINE)
      Part: Water
      Part: Part
      Part: Part
      Model: Fountain
        MeshPart: Meshes/IceysAssetPack_Cylinder.022 (2)
          Weld: Weld
        MeshPart: Meshes/IceysAssetPack_Cylinder.023 (2)
          Weld: Weld
        MeshPart: Meshes/IceysAssetPack_Cylinder.036 (1)
          Weld: Weld
    Folder: Trees
      Folder: Trees2
      Model: Tree2
        MeshPart: MeshPart
        MeshPart: MeshPart
      Folder: Poops2
    Folder: PoopMountains
      Model: PoopMountain
        Part: Handle
          SpecialMesh: SpecialMesh
          StringValue: AvatarPartScaleType
          Attachment: HatAttachment
      Model: PoopMountain
        Part: Handle
          SpecialMesh: SpecialMesh
          StringValue: AvatarPartScaleType
          Attachment: HatAttachment
      Model: PoopMountain
        Part: Handle
          SpecialMesh: SpecialMesh
          StringValue: AvatarPartScaleType
          Attachment: HatAttachment
      Model: PoopMountain
        Part: Handle
          SpecialMesh: SpecialMesh
          StringValue: AvatarPartScaleType
          Attachment: HatAttachment
      Model: PoopMountain
        Part: Handle
          SpecialMesh: SpecialMesh
          StringValue: AvatarPartScaleType
          Attachment: HatAttachment
      Model: PoopMountain
        Part: Handle
          SpecialMesh: SpecialMesh
          StringValue: AvatarPartScaleType
          Attachment: HatAttachment
      Model: PoopMountain
        Part: Handle
          SpecialMesh: SpecialMesh
          StringValue: AvatarPartScaleType
          Attachment: HatAttachment
      Model: PoopMountain
        Part: Handle
          SpecialMesh: SpecialMesh
          StringValue: AvatarPartScaleType
          Attachment: HatAttachment
      Model: PoopMountain
        Part: Handle
          SpecialMesh: SpecialMesh
          StringValue: AvatarPartScaleType
          Attachment: HatAttachment
      Model: PoopMountain
        Part: Handle
          SpecialMesh: SpecialMesh
          StringValue: AvatarPartScaleType
          Attachment: HatAttachment
      Model: PoopMountain
        Part: Handle
          SpecialMesh: SpecialMesh
          StringValue: AvatarPartScaleType
          Attachment: HatAttachment
      Model: PoopMountain
        Part: Handle
          SpecialMesh: SpecialMesh
          StringValue: AvatarPartScaleType
          Attachment: HatAttachment
      Model: PoopMountain
        Part: Handle
          SpecialMesh: SpecialMesh
          StringValue: AvatarPartScaleType
          Attachment: HatAttachment
      Model: PoopMountain
        Part: Handle
          SpecialMesh: SpecialMesh
          StringValue: AvatarPartScaleType
          Attachment: HatAttachment
      Model: PoopMountain
        Part: Handle
          SpecialMesh: SpecialMesh
          StringValue: AvatarPartScaleType
          Attachment: HatAttachment
      Model: PoopMountain
        Part: Handle
          SpecialMesh: SpecialMesh
          StringValue: AvatarPartScaleType
          Attachment: HatAttachment
      Model: PoopMountain
        Part: Handle
          SpecialMesh: SpecialMesh
          StringValue: AvatarPartScaleType
          Attachment: HatAttachment
      Model: PoopMountain
        Part: Handle
          SpecialMesh: SpecialMesh
          StringValue: AvatarPartScaleType
          Attachment: HatAttachment
      Model: PoopMountain
        Part: Handle
          SpecialMesh: SpecialMesh
          StringValue: AvatarPartScaleType
          Attachment: HatAttachment
      Model: PoopMountain
        Part: Handle
          SpecialMesh: SpecialMesh
          StringValue: AvatarPartScaleType
          Attachment: HatAttachment
      Model: PoopMountain
        Part: Handle
          SpecialMesh: SpecialMesh
          StringValue: AvatarPartScaleType
          Attachment: HatAttachment
    Folder: Flowers
      Model: Flower
        Folder: ChangeColor
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part  -  Edit
  03:05:51.630  CHUNK 1:
          Part: Part
          Part: Part
        Folder: GreenThing
          UnionOperation: Union
          UnionOperation: Union
          UnionOperation: Union
          Part: Part
          Part: Part
          Part: Part
      Model: Flower
        Folder: ChangeColor
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
        Folder: GreenThing
          UnionOperation: Union
          UnionOperation: Union
          UnionOperation: Union
          Part: Part
          Part: Part
          Part: Part
    Folder: Fences
      MeshPart: MeshPart
      MeshPart: MeshPart
      MeshPart: MeshPart
      MeshPart: MeshPart
      MeshPart: MeshPart
      MeshPart: MeshPart
    Model: R6
      Part: Head
        SpecialMesh: Mesh
        Attachment: HairAttachment
        Attachment: HatAttachment
        Attachment: FaceFrontAttachment
        Attachment: FaceCenterAttachment
        Decal: face
      Part: Torso
        Attachment: NeckAttachment
        Attachment: BodyFrontAttachment
        Attachment: BodyBackAttachment
        Attachment: LeftCollarAttachment
        Attachment: RightCollarAttachment
        Attachment: WaistFrontAttachment
        Attachment: WaistCenterAttachment
        Attachment: WaistBackAttachment
        Motor6D: Right Shoulder
        Motor6D: Left Shoulder
        Motor6D: Right Hip
        Motor6D: Left Hip
        Motor6D: Neck
        Weld: Weld
        Weld: Weld
        Weld: Weld
      Part: Left Arm
        Attachment: LeftShoulderAttachment
        Attachment: LeftGripAttachment
      Part: Right Arm
        Attachment: RightShoulderAttachment
        Attachment: RightGripAttachment
      Part: Left Leg
        Attachment: LeftFootAttachment
        Snap: Snap
      Part: Right Leg
        Attachment: RightFootAttachment
        Snap: Snap
      Humanoid: Humanoid
        HumanoidDescription: HumanoidDescription
          BodyPartDescription: BodyPartDescription
          BodyPartDescription: BodyPartDescription
          BodyPartDescription: BodyPartDescription
          BodyPartDescription: BodyPartDescription
          BodyPartDescription: BodyPartDescription
          BodyPartDescription: BodyPartDescription
      Part: HumanoidRootPart
        Attachment: RootAttachment
        Motor6D: RootJoint
      Model: AnimSaves
        KeyframeSequence: Poop
          Keyframe: Keyframe
          Keyframe: Keyframe
          Keyframe: Keyframe
          Keyframe: Keyframe
          Keyframe: Keyframe
          Keyframe: Keyframe
          Keyframe: Keyframe
          Keyframe: Keyframe
          Keyframe: Keyframe
          Keyframe: Keyframe
          Keyframe: Keyframe
          Keyframe: Keyframe
          Keyframe: Keyframe
          Keyframe: Keyframe
          Keyframe: Keyframe
          Keyframe: Keyframe
          Keyframe: Keyframe
          Keyframe: Keyframe
          Keyframe: Keyframe
          Keyframe: Keyframe
          Keyframe: Keyframe
          Keyframe: Keyframe
          Keyframe: Keyframe
          Keyframe: Keyframe
          Keyframe: Keyframe
          Keyframe: Keyframe
          Keyframe: Keyframe
          Keyframe: Keyframe
          Keyframe: Keyframe
          Keyframe: Keyframe
          Keyframe: Keyframe
          Keyframe: Keyframe
          Keyframe: Keyframe
          Keyframe: Keyframe
          Keyframe: Keyframe
          Keyframe: Keyframe
          Keyframe: Keyframe
          Keyframe: Keyframe
          Keyframe: Keyframe
          Keyframe: Keyframe
          Keyframe: Keyframe
          Keyframe: Keyframe
    Folder: Stuff
    Folder: MapStuff
      Model: Bench
        MeshPart: BenchSupport
        MeshPart: BenchSeat
      Model: Bench
        MeshPart: BenchSupport
        MeshPart: BenchSeat
      Model: Poop
        MeshPart: Poop
      Model: Poop
        MeshPart: Poop
      Model: Poop
        MeshPart: Poop
      Model: Poop
        MeshPart: Poop
      Model: Poop
        MeshPart: Poop
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Poop
        MeshPart: Poop
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      MeshPart: MeshPart
      MeshPart: MeshPart
      Model: Flower
        Folder: ChangeColor
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part  -  Edit
  03:05:51.734  CHUNK 1:
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
        Folder: GreenThing
          UnionOperation: Union
          UnionOperation: Union
          UnionOperation: Union
          Part: Part
          Part: Part
          Part: Part
      Model: Flower
        Folder: ChangeColor
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
        Folder: GreenThing
          UnionOperation: Union
          UnionOperation: Union
          UnionOperation: Union
          Part: Part
          Part: Part
          Part: Part
      Model: Flower
        Folder: ChangeColor
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
        Folder: GreenThing
          UnionOperation: Union
          UnionOperation: Union
          UnionOperation: Union
          Part: Part
          Part: Part
          Part: Part
      Model: Flower
        Folder: ChangeColor
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
        Folder: GreenThing
          UnionOperation: Union
          UnionOperation: Union
          UnionOperation: Union
          Part: Part
          Part: Part
          Part: Part
      MeshPart: MeshPart
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Flower
        Folder: ChangeColor
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
        Folder: GreenThing
          UnionOperation: Union
          UnionOperation: Union
          UnionOperation: Union
          Part: Part
          Part: Part
          Part: Part
      Model: Flower
        Folder: ChangeColor
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part  -  Edit
  03:05:51.839  CHUNK 1:
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
        Folder: GreenThing
          UnionOperation: Union
          UnionOperation: Union
          UnionOperation: Union
          Part: Part
          Part: Part
          Part: Part
      Model: Flower
        Folder: ChangeColor
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
        Folder: GreenThing
          UnionOperation: Union
          UnionOperation: Union
          UnionOperation: Union
          Part: Part
          Part: Part
          Part: Part
      Model: low poly bush
        UnionOperation: Union
          Model: Poop
          Model: Poop
          Model: Poop
          Model: Poop
          Model: Poop
      Model: Flower
        Folder: ChangeColor
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
        Folder: GreenThing
          UnionOperation: Union
          UnionOperation: Union
          UnionOperation: Union
          Part: Part
          Part: Part
          Part: Part
      Model: low poly bush
        UnionOperation: Union
          Model: Poop
          Model: Poop
          Model: Poop
          Model: Poop
          Model: Poop
      Model: Flower
        Folder: ChangeColor
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
        Folder: GreenThing
          UnionOperation: Union
          UnionOperation: Union
          UnionOperation: Union
          Part: Part
          Part: Part
          Part: Part
      Model: low poly bush
        UnionOperation: Union
          Model: Poop
          Model: Poop
          Model: Poop
          Model: Poop
          Model: Poop
      Model: Flower
        Folder: ChangeColor
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
        Folder: GreenThing
          UnionOperation: Union
          UnionOperation: Union
          UnionOperation: Union
          Part: Part
          Part: Part
          Part: Part
      MeshPart: MeshPart
      Model: Flower
        Folder: ChangeColor
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part  -  Edit
  03:05:51.952  CHUNK 1:
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
        Folder: GreenThing
          UnionOperation: Union
          UnionOperation: Union
          UnionOperation: Union
          Part: Part
          Part: Part
          Part: Part
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      MeshPart: MeshPart
      MeshPart: MeshPart
      Model: CirclePath
        UnionOperation: Union
      Model: Path
        UnionOperation: PathUnion
      Part: Part
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Poop
        MeshPart: Poop
      Model: Flower
        Folder: ChangeColor
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
        Folder: GreenThing
          UnionOperation: Union
          UnionOperation: Union
          UnionOperation: Union
          Part: Part
          Part: Part
          Part: Part
      Model: Flower
        Folder: ChangeColor
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
        Folder: GreenThing
          UnionOperation: Union
          UnionOperation: Union
          UnionOperation: Union
          Part: Part
          Part: Part
          Part: Part
      Part: Part
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Poop
        MeshPart: Poop
      Model: Bench
        MeshPart: BenchSupport
        MeshPart: BenchSeat
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Poop
        MeshPart: Poop
      Model: Flower
        Folder: ChangeColor
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
        Folder: GreenThing
          UnionOperation: Union
          UnionOperation: Union
          UnionOperation: Union
          Part: Part
          Part: Part
          Part: Part
      Model: Flower
        Folder: ChangeColor
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part  -  Edit
  03:05:52.055  CHUNK 1:
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
        Folder: GreenThing
          UnionOperation: Union
          UnionOperation: Union
          UnionOperation: Union
          Part: Part
          Part: Part
          Part: Part
      Model: Flower
        Folder: ChangeColor
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
        Folder: GreenThing
          UnionOperation: Union
          UnionOperation: Union
          UnionOperation: Union
          Part: Part
          Part: Part
          Part: Part
      Model: Flower
        Folder: ChangeColor
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
          Part: Part
        Folder: GreenThing
          UnionOperation: Union
          UnionOperation: Union
          UnionOperation: Union
          Part: Part
          Part: Part
          Part: Part
      Model: low poly bush
        UnionOperation: Union
          Model: Poop
          Model: Poop
          Model: Poop
          Model: Poop
          Model: Poop
      Model: low poly bush
        UnionOperation: Union
          Model: Poop
          Model: Poop
          Model: Poop
          Model: Poop
          Model: Poop
      Model: low poly bush
        UnionOperation: Union
          Model: Poop
          Model: Poop
          Model: Poop
          Model: Poop
          Model: Poop
      Model: low poly bush
        UnionOperation: Union
          Model: Poop
          Model: Poop
          Model: Poop
          Model: Poop
          Model: Poop
      Model: low poly bush
        UnionOperation: Union
          Model: Poop
          Model: Poop
          Model: Poop
          Model: Poop
          Model: Poop
    Model: Path
      UnionOperation: PathUnion
    Model: DecorForMap
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1  -  Edit
  03:05:52.158  CHUNK 1:
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree2
        MeshPart: MeshPart
        MeshPart: MeshPart
      Model: Tree2
        MeshPart: MeshPart
        MeshPart: MeshPart
      Model: Tree2
        MeshPart: MeshPart
        MeshPart: MeshPart
      Model: Tree2
        MeshPart: MeshPart
        MeshPart: MeshPart
      Model: Tree2
        MeshPart: MeshPart
        MeshPart: MeshPart
      Model: Tree2
        MeshPart: MeshPart
        MeshPart: MeshPart
      Model: Tree2
        MeshPart: MeshPart
        MeshPart: MeshPart
      Model: Tree2
        MeshPart: MeshPart
        MeshPart: MeshPart
      Model: Tree2
        MeshPart: MeshPart
        MeshPart: MeshPart
      Model: Tree2
        MeshPart: MeshPart
        MeshPart: MeshPart
      Model: Tree2
        MeshPart: MeshPart
        MeshPart: MeshPart
      Model: Tree2
        MeshPart: MeshPart
        MeshPart: MeshPart
      Model: Tree2
        MeshPart: MeshPart
        MeshPart: MeshPart
      Model: Tree2
        MeshPart: MeshPart
        MeshPart: MeshPart
      Model: Tree2
        MeshPart: MeshPart
        MeshPart: MeshPart
      Model: Tree2
        MeshPart: MeshPart
        MeshPart: MeshPart
      Model: Tree2
        MeshPart: MeshPart
        MeshPart: MeshPart
      Model: Tree2
        MeshPart: MeshPart
        MeshPart: MeshPart
      Model: Tree2
        MeshPart: MeshPart
        MeshPart: MeshPart
      Model: Tree2
        MeshPart: MeshPart
        MeshPart: MeshPart
      Model: Tree2
        MeshPart: MeshPart
        MeshPart: MeshPart
      Model: Tree2
        MeshPart: MeshPart
        MeshPart: MeshPart
      Model: Tree2
        MeshPart: MeshPart
        MeshPart: MeshPart
      Model: Tree2
        MeshPart: MeshPart
        MeshPart: MeshPart
      Model: Tree2
        MeshPart: MeshPart
        MeshPart: MeshPart
      Model: Tree2
        MeshPart: MeshPart
        MeshPart: MeshPart
      Model: Tree2
        MeshPart: MeshPart
        MeshPart: MeshPart
      Model: Tree2
        MeshPart: MeshPart
        MeshPart: MeshPart
      Model: Tree2
        MeshPart: MeshPart
        MeshPart: MeshPart
      Model: Tree2
        MeshPart: MeshPart
        MeshPart: MeshPart
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves  -  Edit
  03:05:52.263  CHUNK 1:
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4  -  Edit
  03:05:52.363  CHUNK 1:
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk  -  Edit
  03:05:52.465  CHUNK 1:
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf  -  Edit
  03:05:52.569  CHUNK 1:
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf  -  Edit
  03:05:52.673  CHUNK 1:
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
  Camera: Camera
  Folder: SpawnLocations
    Model: Spawn
      MeshPart: Spawn
      MeshPart: ImageHolder
        Decal: Decal
      SpawnLocation: SpawnLocation
      Highlight: Highlight
    Model: Spawn
      MeshPart: Spawn
      MeshPart: ImageHolder
        Decal: Decal
      SpawnLocation: SpawnLocation
      Highlight: Highlight
    Model: Spawn
      MeshPart: Spawn
      MeshPart: ImageHolder
        Decal: Decal
      SpawnLocation: SpawnLocation
      Highlight: Highlight
    Model: Spawn
      MeshPart: Spawn
      MeshPart: ImageHolder
        Decal: Decal
      SpawnLocation: SpawnLocation
      Highlight: Highlight
  Folder: Portals
    Model: Zone1Portal
      Part: TPPartToZone1
      MeshPart: Meshes/Portal_Plane
      Part: Part
      Part: Part
      Part: Part
      Part: Part
      Model: ZoneDescription
        Part: Part
          BillboardGui: ZoneNameBillboardGui
    Model: Zone1PortalToMainMap
      Part: TPPartBackFromZone1
      MeshPart: Meshes/Portal_Plane
      Part: Part
      Part: Part
      Part: Part
      Part: Part
    Model: Zone2Portal
      MeshPart: Meshes/Portal_Plane
      Part: Part
      Part: Part
      Part: Part
      Part: Part
      Part: TPPartToZone2
      Model: ZoneDescription
        Part: Part
          BillboardGui: ZoneNameBillboardGui
    Model: Zone3Portal
      MeshPart: Meshes/Portal_Plane
      Part: Part
      Part: Part
      Part: Part
      Part: Part
      Part: TPPartToZone2
      Model: ZoneDescription
        Part: Part
          BillboardGui: ZoneNameBillboardGui
    Model: Zone2PortalArrive
      MeshPart: Meshes/Portal_Plane
      Part: Part
      Part: Part
      Part: Part
      Part: Part
      Part: TPPartToZone2
    Model: Zone3PortalArrive
      MeshPart: Meshes/Portal_Plane
      Part: Part
      Part: Part
      Part: Part
      Part: Part
      Part: TPPartToZone2
  Folder: FloatingPoopIslandMap
    Folder: Trees
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree2
        MeshPart: MeshPart
        MeshPart: MeshPart
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf  -  Edit
  03:05:52.776  CHUNK 1:
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
    Folder: Plungers
      Model: Plunger
        Part: Part
          CylinderMesh: Mesh
          Weld: Weld
        UnionOperation: Union
        UnionOperation: Union
      Model: Plunger
        Part: Part
          CylinderMesh: Mesh
          Weld: Weld
        UnionOperation: Union
        UnionOperation: Union
      Model: Plunger
        Part: Part
          CylinderMesh: Mesh
          Weld: Weld
        UnionOperation: Union
        UnionOperation: Union
      Model: Plunger
        Part: Part
          CylinderMesh: Mesh
          Weld: Weld
        UnionOperation: Union
        UnionOperation: Union
      Model: Plunger
        Part: Part
          CylinderMesh: Mesh
          Weld: Weld
        UnionOperation: Union
        UnionOperation: Union
      Model: Plunger
        Part: Part
          CylinderMesh: Mesh
          Weld: Weld
        UnionOperation: Union
        UnionOperation: Union
      Model: Plunger
        Part: Part
          CylinderMesh: Mesh
          Weld: Weld
        UnionOperation: Union
        UnionOperation: Union
      Model: Plunger
        Part: Part
          CylinderMesh: Mesh
          Weld: Weld
        UnionOperation: Union
        UnionOperation: Union
      Model: Plunger
        Part: Part
          CylinderMesh: Mesh
          Weld: Weld
        UnionOperation: Union
        UnionOperation: Union
      Model: Plunger
        Part: Part
          CylinderMesh: Mesh
          Weld: Weld
        UnionOperation: Union
        UnionOperation: Union
      Model: Plunger
        Part: Part
          CylinderMesh: Mesh
          Weld: Weld
        UnionOperation: Union
        UnionOperation: Union
      Model: Plunger
        Part: Part
          CylinderMesh: Mesh
          Weld: Weld
        UnionOperation: Union
        UnionOperation: Union
      Model: Plunger
        Part: Part
          CylinderMesh: Mesh
          Weld: Weld
        UnionOperation: Union
        UnionOperation: Union
    Folder: TheIsland
      MeshPart: Hills
      MeshPart: Meshes/Free Map_Cube
      MeshPart: Meshes/Free Map_Cube.001
        Texture: Texture
    Folder: Poops
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
  Folder: FloatingToiletIslandMap
    Folder: Plungers
      Model: Plunger
        Part: Part
          CylinderMesh: Mesh
          Weld: Weld
        UnionOperation: Union
        UnionOperation: Union
      Model: Plunger
        Part: Part
          CylinderMesh: Mesh
          Weld: Weld
        UnionOperation: Union
        UnionOperation: Union
      Model: Plunger
        Part: Part
          CylinderMesh: Mesh
          Weld: Weld
        UnionOperation: Union
        UnionOperation: Union
      Model: Plunger
        Part: Part
          CylinderMesh: Mesh
          Weld: Weld
        UnionOperation: Union
        UnionOperation: Union
    Folder: Trees
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree2
        MeshPart: MeshPart
        MeshPart: MeshPart
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
    Folder: TheIsland
      MeshPart: Hills
      MeshPart: Meshes/Free Map_Cube
      MeshPart: Meshes/Free Map_Cube.001
        Texture: Texture
    Folder: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
    Folder: Toilets
      Model: Bathroom Toilet
        UnionOperation: Union
        UnionOperation: Union
        UnionOperation: Seat
        UnionOperation: FlushSpread
        UnionOperation: MoreWedges
        UnionOperation: Tank
        UnionOperation: BowlBase
        UnionOperation: Wedges
        UnionOperation: Pipes
        UnionOperation: Hinges
        Part: Water. I promise.
          SpecialMesh: Mesh
        Part: Part
        UnionOperation: Handle
        UnionOperation: BaseBack
      Model: Bathroom Toilet
        UnionOperation: Union
        UnionOperation: Union  -  Edit
  03:05:52.879  CHUNK 1:
        UnionOperation: Seat
        UnionOperation: FlushSpread
        UnionOperation: MoreWedges
        UnionOperation: Tank
        UnionOperation: BowlBase
        UnionOperation: Wedges
        UnionOperation: Pipes
        UnionOperation: Hinges
        Part: Water. I promise.
          SpecialMesh: Mesh
        Part: Part
        UnionOperation: Handle
        UnionOperation: BaseBack
      Model: Bathroom Toilet
        UnionOperation: Union
        UnionOperation: Union
        UnionOperation: Seat
        UnionOperation: FlushSpread
        UnionOperation: MoreWedges
        UnionOperation: Tank
        UnionOperation: BowlBase
        UnionOperation: Wedges
        UnionOperation: Pipes
        UnionOperation: Hinges
        Part: Water. I promise.
          SpecialMesh: Mesh
        Part: Part
        UnionOperation: Handle
        UnionOperation: BaseBack
      Model: Bathroom Toilet
        UnionOperation: Union
        UnionOperation: Union
        UnionOperation: Seat
        UnionOperation: FlushSpread
        UnionOperation: MoreWedges
        UnionOperation: Tank
        UnionOperation: BowlBase
        UnionOperation: Wedges
        UnionOperation: Pipes
        UnionOperation: Hinges
        Part: Water. I promise.
          SpecialMesh: Mesh
        Part: Part
        UnionOperation: Handle
        UnionOperation: BaseBack
      Model: Bathroom Toilet
        UnionOperation: Union
        UnionOperation: Union
        UnionOperation: Seat
        UnionOperation: FlushSpread
        UnionOperation: MoreWedges
        UnionOperation: Tank
        UnionOperation: BowlBase
        UnionOperation: Wedges
        UnionOperation: Pipes
        UnionOperation: Hinges
        Part: Water. I promise.
          SpecialMesh: Mesh
        Part: Part
        UnionOperation: Handle
        UnionOperation: BaseBack
      Model: Bathroom Toilet
        UnionOperation: Union
        UnionOperation: Union
        UnionOperation: Seat
        UnionOperation: FlushSpread
        UnionOperation: MoreWedges
        UnionOperation: Tank
        UnionOperation: BowlBase
        UnionOperation: Wedges
        UnionOperation: Pipes
        UnionOperation: Hinges
        Part: Water. I promise.
          SpecialMesh: Mesh
        Part: Part
        UnionOperation: Handle
        UnionOperation: BaseBack
    Folder: ToiletPaper
      Model: ToiletPaper
        UnionOperation: Toilet Paper
          Camera: ThumbnailCamera
      Model: ToiletPaper
        UnionOperation: Toilet Paper
          Camera: ThumbnailCamera
      Model: ToiletPaper
        UnionOperation: Toilet Paper
          Camera: ThumbnailCamera
      Model: ToiletPaper
        UnionOperation: Toilet Paper
          Camera: ThumbnailCamera
      Model: ToiletPaper
        UnionOperation: Toilet Paper
          Camera: ThumbnailCamera
  Folder: TheGreatMountainSkyIslandMap
    Folder: TheIsland
      MeshPart: Hills
      MeshPart: Meshes/Free Map_Cube
      MeshPart: Meshes/Free Map_Cube.001
        Texture: Texture
    Model: Model
      MeshPart: Poop
    Model: Decor
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      MeshPart: Poop
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf  -  Edit
  03:05:52.984  CHUNK 1:
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree5
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Trunk
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf  -  Edit
  03:05:53.085  CHUNK 1:
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf  -  Edit
  03:05:53.189  CHUNK 1:
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree4
        MeshPart: Leaf
        MeshPart: Trunk
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
        MeshPart: Leaf
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree3
        MeshPart: Trunk
        MeshPart: Leaves
        MeshPart: Leaves
        MeshPart: Leaves
      Model: Tree2
        MeshPart: MeshPart
        MeshPart: MeshPart
      Model: Tree2
        MeshPart: MeshPart
        MeshPart: MeshPart
      Model: Tree2
        MeshPart: MeshPart
        MeshPart: MeshPart
      Model: Tree2
        MeshPart: MeshPart
        MeshPart: MeshPart
      Model: Tree2
        MeshPart: MeshPart
        MeshPart: MeshPart
      Model: Tree2
        MeshPart: MeshPart
        MeshPart: MeshPart
      Model: Tree2
        MeshPart: MeshPart
        MeshPart: MeshPart
      Model: Tree2
        MeshPart: MeshPart
        MeshPart: MeshPart
      Model: Tree2
        MeshPart: MeshPart
        MeshPart: MeshPart
      Model: Tree2
        MeshPart: MeshPart
        MeshPart: MeshPart
      Model: Tree2
        MeshPart: MeshPart  -  Edit
  03:05:53.292  CHUNK 1:
        MeshPart: MeshPart
      Model: Tree2
        MeshPart: MeshPart
        MeshPart: MeshPart
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
      Model: Tree1
        MeshPart: Trunk
        MeshPart: Leaves1
        MeshPart: Leaves2
  Part: Baseplate
    Texture: Left
    Texture: Right
    Texture: Top
    Texture: Bottom
    Texture: Back
    Texture: Front
  Part: Baseplate
    Texture: Left
    Texture: Right
    Texture: Top
    Texture: Bottom
    Texture: Back
    Texture: Front
  Part: Baseplate
    Texture: Left
    Texture: Right
    Texture: Top
    Texture: Bottom
    Texture: Back
    Texture: Front
  Folder: Barriers
    Model: barrier wall invisible boundaries 931767
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
    Model: barrier wall invisible boundaries 849579
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
    Model: barrier wall invisible boundaries 225133
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary  -  Edit
  03:05:53.394  CHUNK 1:
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
      Part: barrier wall invisible boundary
    Model: Barrier
      Part: Part
      Part: Part
      Part: Part
      Part: Part
  Model: Path
    UnionOperation: PathUnion
  Folder: Egg Stands
    Model: EggStand1
      UnionOperation: Union
      UnionOperation: Union
      UnionOperation: Union
      UnionOperation: Union
      UnionOperation: Union
      UnionOperation: Union
      UnionOperation: Union
      Part: Part
        SpecialMesh: Mesh
      Part: Part
      Model: PoopEgg
        MeshPart: Egg
      Part: Trigger
    Model: EggStand2
      UnionOperation: Union
      UnionOperation: Union
      UnionOperation: Union
      UnionOperation: Union
      UnionOperation: Union
      UnionOperation: Union
      UnionOperation: Union
      Part: Part
        SpecialMesh: Mesh
      Part: Part
      Model: PoopEgg
        MeshPart: Egg
      Part: Trigger
      Model: Model
        MeshPart: Poop
    Model: EggStand3
      UnionOperation: Union
      UnionOperation: Union
      UnionOperation: Union
      UnionOperation: Union
      UnionOperation: Union
      UnionOperation: Union
      UnionOperation: Union
      Part: Part
        SpecialMesh: Mesh
      Part: Part
      Model: PoopEgg
        MeshPart: Egg
      Part: Trigger
  Model: Poop
    UnionOperation: PoopPart
    UnionOperation: PoopBottom
      Weld: Weld
    UnionOperation: PoopPart
    UnionOperation: PoopTop
  Folder: PlayerPets
  Folder: PlayerPets

=== Lighting COMPLETE STRUCTURE ===
Lighting: Lighting
  SunRaysEffect: SunRays
  ColorCorrectionEffect: ColorCorrection
  BlurEffect: Blur
  BloomEffect: Bloom
  Sky: Sky
  Atmosphere: Atmosphere

=== SoundService COMPLETE STRUCTURE ===
SoundService: SoundService

=== ServerStorage COMPLETE STRUCTURE ===
ServerStorage: ServerStorage
  Folder: VFX
    Folder: Blue's Particle Effect kit
      Part: Part
        ParticleEmitter: Flash
      Part: Part
        ParticleEmitter: Dots 1
        ParticleEmitter: Dots 2
      Part: Part
        ParticleEmitter: Flash
        ParticleEmitter: Flash
      Part: Part
        ParticleEmitter: Flash
      Part: Part
        ParticleEmitter: Sparkles
      Part: Part
        ParticleEmitter: Black
      Part: Part
        ParticleEmitter: Last Particle
      Part: Part
        ParticleEmitter: Lightning One
      Part: Part
        ParticleEmitter: Aura
      Part: Part
        ParticleEmitter: Yars
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter2
          ParticleEmitter: ParticleEmitter1
          ParticleEmitter: Charged
          ParticleEmitter: Spark
      Part: Part
        ParticleEmitter: Circle
      Part: Part
        Attachment: Attachment
          ParticleEmitter: Wave
          ParticleEmitter: Bits
          ParticleEmitter: Wave
          ParticleEmitter: Bits_Small
      Part: Part
        Attachment: Attachment
          ParticleEmitter: Rays
          ParticleEmitter: Rays
          ParticleEmitter: Flare
          ParticleEmitter: Circles
      Part: Part
        ParticleEmitter: Black Swirl
      Part: Part
        ParticleEmitter: Purple Expanding
      Part: Part
        Attachment: Attachment
          ParticleEmitter: Flare
          ParticleEmitter: Sparkle
          ParticleEmitter: Wave
      Part: Part
        ParticleEmitter: Twirl
      Part: Part
        ParticleEmitter: Sparkles_Beam
        ParticleEmitter: Sparkles
      Part: Part
        ParticleEmitter: Core
      Part: Part
        ParticleEmitter: Shockwave
      Part: Part
        ParticleEmitter: MiniSparks
      Part: Part
        ParticleEmitter: Swirling
    Folder: Cool Effect Pack
      Folder: Cuts & Slashes
        Part: A - Cuts [C]
          ParticleEmitter: Cuts
        Part: A - Cuts [B]
          ParticleEmitter: Cuts
        Part: Labelpart
          SurfaceGui: SurfaceGui
        Part: B - Arcs v1 [C]
          Attachment: Middle
        Part: A - Cuts [A]
          ParticleEmitter: Cuts
        Part: C - Arcs v2 [C]
          Attachment: Middle
        Part: C - Arcs v2 [A]
          Attachment: Middle  -  Edit
  03:05:53.496  CHUNK 1:
        Part: C - Arcs v2 [B]
          Attachment: Middle
        Part: B - Arcs v1 [A]
          Attachment: Middle
        Part: B - Arcs v1 [B]
          Attachment: Middle
      Folder: Hits & Strikes
        Part: A - Hit 01
          Attachment: Middle
        Part: B - Hit 02
          Attachment: Middle
        Part: H - Animated Hits 02
          ParticleEmitter: Animated Hits
        Part: E - Multi-Hit 02
          ParticleEmitter: Multi Hits
        Part: D - Multi-Hit 01
          ParticleEmitter: Multi Hits
        Part: G - Animated Hits 01
          ParticleEmitter: Animated Hits
        Part: I - Shockwave (custom by CHROM)
          Attachment: Middle
        Part: F - Multi-Hit 03
          ParticleEmitter: Multi Hits
        Part: C - Hit 03
          Attachment: Middle
        Part: Labelpart
          SurfaceGui: SurfaceGui
        Part: J - Smoky Shockwave (addition by CHROM)
          Attachment: Middle
      Folder: Water
        Part: C - Spout
          ParticleEmitter: Spray
        Part: G - Rain Splash
          ParticleEmitter: Splash
        Part: H - Rain Pour
          ParticleEmitter: Rain1
        Part: A - Droplets
          ParticleEmitter: Droplets
        Part: F  - Gushing
          ParticleEmitter: Spray
        Part: LabelPart
          SurfaceGui: SurfaceGui
        Part: D - Large Spout
          ParticleEmitter: Spray
        Part: B - Mild Spray
          ParticleEmitter: Spray
      Folder: Flames
        Part: Labelpart
          SurfaceGui: SurfaceGui
        Part: A - Candle
          Attachment: Middle
        Part: B - Fire
          ParticleEmitter: Flames
        Part: H - Roaring Flames
          ParticleEmitter: Flames
        Part: D - Large Fire
          ParticleEmitter: Flames
        Part: G - Blazing Flame
          ParticleEmitter: Flames
        Part: C - Medium Fire
          ParticleEmitter: Flames
        Part: E - XL Fire
          ParticleEmitter: Flames
        Part: F - 2XL Fire
          ParticleEmitter: Flames
      Folder: Smoke
        Part: E - Gray, Foggy Area
          ParticleEmitter: Smoke
        Part: F - Dark, Foggy Area
          ParticleEmitter: Smoke
        Part: C - Tall, Gray Smoke
          ParticleEmitter: Smoke
        Part: D - Tall, Dark Smoke
          ParticleEmitter: Smoke
        Part: LabelPart
          SurfaceGui: SurfaceGui
        Part: A - Medium, Gray Smoke
          ParticleEmitter: Smoke
        Part: B - Medium, Dark Smoke
          ParticleEmitter: Smoke
      Folder: Electricity
        Part: I - Jolts [C]
          ParticleEmitter: Sparks
        Part: LabelPart
          SurfaceGui: SurfaceGui
        Part: H - Zaps [C]
          ParticleEmitter: Zaps
        Part: G - Sparks [C]
          ParticleEmitter: Sparks
        Part: F - Jolts [B]
          ParticleEmitter: Sparks
        Part: E - Zaps [B]
          ParticleEmitter: Zaps
        Part: D - Sparks [B]
          ParticleEmitter: Sparks
        Part: B - Zaps [A]
          ParticleEmitter: Zaps
        Part: C - Jolts [A]
          ParticleEmitter: Sparks
        Part: A - Sparks [A]
          ParticleEmitter: Sparks
      Folder: Blood
        Part: B - Puddle
          Attachment: Middle
        Part: I - Veinless
          Attachment: Middle
        Part: F - BIG
          ParticleEmitter: Splash
        Part: E - Gushing
          Attachment: Middle
          ParticleEmitter: Splash
        Part: H - Wild Splatter
          ParticleEmitter: Splash
          Attachment: Middle
        Part: C - Pool
          Attachment: Middle
        Part: G - Splatter
          ParticleEmitter: Splash
          Attachment: Middle
        Part: A - Droplets
          ParticleEmitter: Blood Droplets
        Part: D - Bleeding
          Attachment: Middle
        Part: Labelpart
          SurfaceGui: SurfaceGui
      Folder: Misc
        Part: D - Gas
          ParticleEmitter: Poison
        Part: C - Shiny
          ParticleEmitter: Glow
          ParticleEmitter: Shine
        Part: LabelPart
          SurfaceGui: SurfaceGui
        Part: G - Aura Charge
          Attachment: Middle
        Part: F - Orb
          Attachment: Middle
        Part: L - Small Power Orb
          Attachment: Middle
        Part: K - Holy
          Attachment: Middle
        Part: B - Treasure
          Attachment: Middle
        Part: J - Electric Orb
          Attachment: Middle
          ParticleEmitter: Sparks
        Part: H - Venom
          ParticleEmitter: Venom
          ParticleEmitter: Specks
        Part: I - Shock Aura
          Attachment: Attachment
        Part: A - Poison
          ParticleEmitter: Poison
        Part: E - Glow
          Attachment: Middle
        Part: M - Dots (addition by CHROM)
          ParticleEmitter: Dots
        Part: N - Dust (addition by CHROM)
          ParticleEmitter: Dust
          ParticleEmitter: Dust2
        Part: O - Lightning (addition by CHROM)
          ParticleEmitter: lightning
        Part: P - Ember (addition by CHROM)
          Attachment: Middle
        Part: Q - Glow (addition by CHROM)
          Attachment: Middle
        Part: R - Wind (addition by CHROM)
          Attachment: Middle
        Part: S - Electricity (addition by CHROM)
          Attachment: Middle
        Part: T - Hole (addition by CHROM)
          Attachment: Middle
        Part: U - Glow (addition by CHROM)
          Attachment: Middle
      Folder: Smoke
        Part: Black Smoke
          ParticleEmitter: Smoke
        Part: White Smoke
          ParticleEmitter: Smoke
        Part: Steam
          Attachment: Middle
        Part: Large Steam
          Attachment: Middle
        Part: LabelPart
          SurfaceGui: SurfaceGui
      Folder: Misc (addition by CHROM)
        Part: Labelpart
          SurfaceGui: SurfaceGui
        Part: A - Gush of Wind
          Attachment: Middle
        Part: B - Stylized Fire
          Attachment: Middle
        Part: C - Steam
          Attachment: BA1
          Attachment: BA2
      Folder: Characters
        Model: AuraVFX
          Part: Head
          Part: Torso
          Part: Left Arm  -  Edit
  03:05:53.598  CHUNK 1:
          Part: Right Arm
          Part: Left Leg
          Part: Right Leg
          Humanoid: Humanoid
          Part: HumanoidRootPart
          BodyColors: Body Colors
        Part: Labelpart
          SurfaceGui: SurfaceGui
    Folder: Particle effects
      Folder: Lightning
        Part: C - ELECTRICITY 03
          ParticleEmitter: ELECTRIC
        Part: F - ELECTRICITY 06
          Attachment: MIDDLE
        Part: I - ELECTRIC BURST
          Attachment: MIDDLE
        Part: Part
        Part: B - ELECTRICITY 02
          ParticleEmitter: ELECTRIC
        Part: E - ELECTRICITY 05
          ParticleEmitter: ELECTRIC
        Part: H - LIGHTNING BOLT 02
          Attachment: MIDDLE
        Part: A - ELECTRICITY 01
          ParticleEmitter: ELECTRIC
        Part: D - ELECTRICITY 04
          ParticleEmitter: ELECTRIC
        Part: G - LIGHTNING BOLT 01
          Attachment: MIDDLE
        Part: 05 - LIGHTNING STRIKE [A]
          Attachment: LIGHTNING
          ParticleEmitter: RESIDUE
        Part: 06 - LIGHTNING STRIKE [B]
          Attachment: LIGHTNING
          ParticleEmitter: RESIDUE
      Folder: Blood
        Part: Part
        Part: D - POOLING BLOOD [A]
          Attachment: MIDDLE
        Part: E - POOLING BLOOD [B]
          Attachment: MIDDLE
        Part: B - HEMORRHAGE
          Attachment: MIDDLE
        Part: C - BLOOD SPLATTER
          Attachment: MIDDLE
      Folder: Portals
        Part: Magic Ting5
          Attachment: Ground2
        Part: 07 - PORTAL [A]
          Attachment: MIDDLE
        Part: 08 - PORTAL [B]
          Attachment: MIDDLE
        Part: Part
        Part: Lvlup
          Attachment: Ground
          ParticleEmitter: Sparks
          ParticleEmitter: Wave1
          ParticleEmitter: Wave2
        Part: 2
          Attachment: Part2
          Attachment: Particles
        Part: BlockBreak
          Attachment: BlockBreak
      Folder: Other
        Part: MagicTing 8
          Attachment: Ground2
        Part: Aura
          Attachment: Aura_Attachment2
          Attachment: Aura_Attachment3
          Attachment: Aura_Attachment
        Part: 1
        Part: Magic Ting6
          Attachment: Ground2
        Part: Ground2
          Attachment: Ground2
        Part: Slashes
          Attachment: Ground2
        Part: Magic Ting7
          Attachment: Ground2
        Part: A - POISON
          ParticleEmitter: POISON
        Part: B - TREASURE
          Attachment: Middle
        Part: C - SHINY
          ParticleEmitter: Glow
          ParticleEmitter: Shine
        Part: D - DEADLY GAS
          ParticleEmitter: GAS
          ParticleEmitter: SPECKS
        Part: E - GLOW
          Attachment: Middle
        Part: F - ORB
          Attachment: Middle
        Part: Magic Ting
          Attachment: Ground2
        Part: H - VENOM
          ParticleEmitter: Venom
          ParticleEmitter: Specks
        Part: Leveling Up (*)
          ParticleEmitter: middleBeams
          ParticleEmitter: Smoke
          ParticleEmitter: Residues
          ParticleEmitter: LowerBeams
        Part: J - ELECTRIC ORB
          Attachment: Middle
          ParticleEmitter: Sparks
        Part: pOISON
          Attachment: Poison_Attachment1(*)
          Attachment: Poison_Attachment2(*)
        Part: L - POWER
          Attachment: Middle
        Part: HitEff4
          Attachment: Release
        Part: Part
        Part: Heal Part (*)
          ParticleEmitter: Healing Wave 1
          ParticleEmitter: Healing Wave 2
          Attachment: Attachment
      Folder: Fire
        Part: Magic Ting2
          Attachment: Ground2
        Part: Burn
          ParticleEmitter: Fire
          ParticleEmitter: Sparks
        Part: A - CANDLELIGHT
          Attachment: MIDDLE
        Part: B - FLAMES
          ParticleEmitter: FIRE
          ParticleEmitter: GLOW
          ParticleEmitter: SPECKS
        Part: C - STRONG FIRE
          ParticleEmitter: FIRE
          ParticleEmitter: GLOW
          ParticleEmitter: SPECKS
        Part: Part
        Part: D - ROARING FLAMES
          ParticleEmitter: FIRE
          ParticleEmitter: GLOW
          ParticleEmitter: SPECKS
        Part: E - FLOOR FLAMES
          ParticleEmitter: BURNING FLOOR
          ParticleEmitter: SPECKS
          ParticleEmitter: GLOW
          ParticleEmitter: FLAMES
        Part: F - RAGING PILLAR
          ParticleEmitter: FLAMEPILLAR
          ParticleEmitter: GLOW
          ParticleEmitter: SPECKS
          ParticleEmitter: SPIKES
        Part: Magic Ting4
          Attachment: Ground2
        Part: Magic Ting3
          Attachment: Ground2
      Folder: Hits
        Part: B - NORMAL STRIKE [B]
          Attachment: MIDDLE
        Part: C - NORMAL STRIKE [C]
          Attachment: MIDDLE
        Part: Part
        Part: A - NORMAL STRIKE [A]
          Attachment: MIDDLE
        Part: D - QUICKSTEP
          ParticleEmitter: FWOOSH
        Part: E -  FAST TRAVEL
          ParticleEmitter: FWOOSH
          ParticleEmitter: LINES
        Part: BlockEff
          ParticleEmitter: Hit
          ParticleEmitter: ParticleEmitter
          ParticleEmitter: ParticleEmitter
      Folder: Slashes
        Part: C - SLASH STRIKE
          ParticleEmitter: CUTS
        Part: SwordBarrageEff
          Attachment: Main
          Attachment: MiscEffects
          Attachment: Wind
        Part: Part
        Part: B - SLASHES 01
          ParticleEmitter: CUTS
        Part: F - ARC SLASHES 02
          ParticleEmitter: CUTS
        Part: E - ARC SLASHES 01
          ParticleEmitter: CUTS
        Part: A - CUTS 01
          ParticleEmitter: CUTS
      Folder: Smoke
        Part: B - SMOKE [B]
          ParticleEmitter: SMOKE
        Part: D - DARK SMOKE [B]
          ParticleEmitter: SMOKE
        Part: Part
        Part: A - SMOKE [A]
          ParticleEmitter: SMOKE
        Part: C - DARK SMOKE [A]
          ParticleEmitter: SMOKE
        Part: F - SMOKESCREEN [B]
          ParticleEmitter: SMOKE
        Part: E - SMOKESCREEN [A]
          ParticleEmitter: SMOKE  -  Edit
  03:05:53.701  CHUNK 1:
      Folder: Water
        Part: A - STEADY RIPPLE
          ParticleEmitter: RIPPLE
        Part: B - WATER SPRAY
          ParticleEmitter: WATER SPRAY
          Attachment: MIDDLE
        Part: D - BROKEN PIPE
          ParticleEmitter: WATER SPRAY
          Attachment: MIDDLE
        Part: E - STEAM
          Attachment: MIDDLE
        Part: F- RAIN, SPLASH
          ParticleEmitter: SPLASH
          ParticleEmitter: RIPPLE
        Part: F - RAIN, POUR
          ParticleEmitter: RAIN
        Part: Part
        Part: C - STRONG WATER SPRAY
          ParticleEmitter: WATER SPRAY
          Attachment: MIDDLE
    Folder: VFX1
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment  -  Edit
  03:05:53.804  CHUNK 1:
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part  -  Edit
  03:05:53.905  FINAL CHUNK:
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
      Part: Part
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
    Folder: fire particle (effects
      Part: Fireball (*)
        Attachment: Fireball
          ParticleEmitter: Wave
          ParticleEmitter: Inner
          ParticleEmitter: Sparks
      Part: fire particle
        ParticleEmitter: Older
        Attachment: Attachment
          ParticleEmitter: Flame
        ParticleEmitter: ParticleEmitter
        ParticleEmitter: Embers
        ParticleEmitter: ParticleEmitter
      Part: Part
    Folder: hat effects
      Part: rave
        Attachment: Attachment
          ParticleEmitter: ParticleEmitter
          ParticleEmitter: ParticleEmitter
    Part: Part
      ParticleEmitter: StandAura
      ParticleEmitter: StandAura
      ParticleEmitter: StandAura
  Folder: Brushtool2_Plugin_Storage
    Folder: 532837911_BrushtoolStampObjects
      Folder: {EA0887D3-1F39-4F5C-88E9-9C2341526468}
        Model: CanopyTent
          Model: Visual
          Model: Collider
          Part: Base
    Folder: 532837911_BrushtoolReferences
      Folder: brushedParent
        ObjectValue: Value
      Folder: stampedParent
        ObjectValue: Value
    Folder: 532837911_BrushtoolBrushObjects
      Folder: {c946f26f-b66a-4fe6-8993-1da80cfa96d0}
        Model: Tree5
          MeshPart: Leaf
          MeshPart: Leaf
          MeshPart: Leaf
          MeshPart: Leaf
          MeshPart: Leaf
          MeshPart: Trunk
      Folder: {7f61b0d5-8d4b-4e05-a72f-c1d84aabf6ad}
        Model: Tree4
          MeshPart: Leaf
          MeshPart: Trunk
          MeshPart: Leaf
          MeshPart: Leaf
          MeshPart: Leaf
          MeshPart: Leaf
          MeshPart: Leaf
          MeshPart: Leaf
          MeshPart: Leaf
          MeshPart: Leaf
          MeshPart: Leaf
          MeshPart: Leaf
          MeshPart: Leaf
          MeshPart: Leaf
          MeshPart: Leaf
          MeshPart: Leaf
          MeshPart: Leaf
      Folder: {559ba22d-1438-4f06-9447-bed93c9a5d6a}
        Model: Tree2
          MeshPart: MeshPart
          MeshPart: MeshPart
      Folder: {3364ac02-b7c2-4642-a960-3d71f9c2083e}
        Model: Tree1
          MeshPart: Trunk
          MeshPart: Leaves1
          MeshPart: Leaves2
      Folder: {75742758-9bc8-4855-99e7-1fd9e7d1fc03}
        Model: Tree3
          MeshPart: Trunk
          MeshPart: Leaves
          MeshPart: Leaves
          MeshPart: Leaves
      Folder: {a9267a85-0960-4bb3-b2ae-ee7eb76e9ce3}
        MeshPart: Poop
    Folder: 532837911_BrushtoolTable
      StringValue: brush
      StringValue: brushObjects
      StringValue: stamp
      StringValue: stampObjects
      StringValue: erase
  -  Edit
  03:05:53.905  üîç ANALYSIS COMPLETE - CHECK ALL CHUNKS ABOVE üîç  -



  Edit







  03:10:24.958  > -- STARTERGUI COMPLETE STRUCTURE FOR AI ANALYSIS - CHUNKED
local output = {}
local chunkSize = 200 -- Larger chunks since AI can process more
local chunkCount = 1

local function addToOutput(text)
    table.insert(output, text)
    
    if #output >= chunkSize then
        print("STARTERGUI_CHUNK_" .. chunkCount .. "_START")
        print(table.concat(output, "\n"))
        print("STARTERGUI_CHUNK_" .. chunkCount .. "_END")
        
        output = {}
        chunkCount = chunkCount + 1
        wait(0.05)
    end
end

local function scanStarterGui(obj, depth)
    if depth > 10 then return end -- Prevent infinite recursion
    
    local indent = string.rep("  ", depth)
    local info = indent .. obj.ClassName .. ": " .. obj.Name
    
    -- Add position/size info for GUI objects
    if obj:IsA("GuiObject") then
        if obj.Position then
            info = info .. " [Pos:" .. tostring(obj.Position) .. "]"
        end
        if obj.Size then
            info = info .. " [Size:" .. tostring(obj.Size) .. "]"
        end
        if obj.Visible ~= nil then
            info = info .. " [Visible:" .. tostring(obj.Visible) .. "]"
        end
    end
    
    -- Add script info
    if obj:IsA("Script") or obj:IsA("LocalScript") or obj:IsA("ModuleScript") then
        info = info .. " [SCRIPT]"
    end
    
    -- Add important properties for certain objects
    if obj:IsA("RemoteEvent") or obj:IsA("RemoteFunction") then
        info = info .. " [REMOTE]"
    end
    
    -- Add text info for labels/buttons
    if obj:IsA("TextLabel") or obj:IsA("TextButton") or obj:IsA("TextBox") then
        if obj.Text and obj.Text ~= "" then
            info = info .. " [Text:\"" .. obj.Text .. "\"]"
        end
    end
    
    -- Add image info
    if obj:IsA("ImageLabel") or obj:IsA("ImageButton") then
        if obj.Image and obj.Image ~= "" then
            info = info .. " [Image]"
        end
    end
    
    if obj:IsA("Folder") and #obj:GetChildren() == 0 then
        info = info .. " [EMPTY]"
    end
    
    addToOutput(info)
    
    -- Scan children
    for _, child in pairs(obj:GetChildren()) do
        scanStarterGui(child, depth + 1)
    end
end

-- Start analysis
addToOutput("STARTERGUI_ANALYSIS_START")
addToOutput("StarterGui: StarterGui")

local starterGui = game:GetService("StarterGui")
for _, child in pairs(starterGui:GetChildren()) do
    scanStarterGui(child, 1)
end

-- Print final chunk
if #output > 0 then
    print("STARTERGUI_CHUNK_" .. chunkCount .. "_START")
    print(table.concat(output, "\n"))
    print("STARTERGUI_CHUNK_" .. chunkCount .. "_END")
end

print("STARTERGUI_ANALYSIS_COMPLETE")
print("Total chunks: " .. chunkCount)  -  Studio
  03:10:24.961  STARTERGUI_CHUNK_1_START  -  Edit
  03:10:24.961  STARTERGUI_ANALYSIS_START
StarterGui: StarterGui
  ScreenGui: CurrencyGui
    Frame: Background [Pos:{0.0316456147, 0}, {0.174569055, 0}] [Size:{0.179548129, 0}, {0.0584906004, 0}] [Visible:true]
      UIStroke: UIStroke
      UICorner: UICorner
      UIGradient: UIGradient
      TextLabel: PooBucks [Pos:{0.531032205, 0}, {0.489727229, 0}] [Size:{0.686139047, 0}, {0.813649476, 0}] [Visible:true] [Text:"600"]
        UIStroke: UIStroke
        LocalScript: CurrencyUpdaterScript [SCRIPT]
          StringValue: OriginalParent
        UIAspectRatioConstraint: UIAspectRatioConstraint
      ImageLabel: Image [Pos:{-0.00060150068, 0}, {0.486059338, 0}] [Size:{0.414908558, 0}, {2.33637452, 0}] [Visible:true] [Image]
        UIAspectRatioConstraint: UIAspectRatioConstraint
      UIAspectRatioConstraint: UIAspectRatioConstraint
    Frame: TimesPoopedBG [Pos:{0.0189472008, 0}, {0.293285996, 0}] [Size:{0.192246556, 0}, {0.0584906004, 0}] [Visible:true]
      UIStroke: UIStroke
      UICorner: UICorner
      UIGradient: UIGradient
      TextLabel: TimesPooped [Pos:{0.585821271, 0}, {0.48972705, 0}] [Size:{0.698247612, 0}, {0.813649476, 0}] [Visible:true] [Text:"60"]
        UIStroke: UIStroke
        LocalScript: CurrencyUpdaterScript [SCRIPT]
          StringValue: OriginalParent
        UIAspectRatioConstraint: UIAspectRatioConstraint
      ImageLabel: Image [Pos:{0.0415839367, 0}, {0.499802619, 0}] [Size:{0.346086234, 0}, {2.36778712, 0}] [Visible:true] [Image]
        UIAspectRatioConstraint: UIAspectRatioConstraint
      UIAspectRatioConstraint: UIAspectRatioConstraint
    UIAspectRatioConstraint: UIAspectRatioConstraint
  ScreenGui: PoopButtonGui
    CanvasGroup: CanvasBackground [Pos:{0.798565686, 0}, {0.6484375, 0}] [Size:{0.0816993415, 0}, {0.142247513, 0}] [Visible:true]
      UICorner: UICorner
      Frame: SlideFrame1 [Pos:{0.511250019, 0}, {0.170360103, 0}] [Size:{1.51999986, 0}, {0.389999986, 0}] [Visible:true]
        TextLabel: Title [Pos:{0.486695021, 0}, {0.842724919, 0}] [Size:{0.657894731, 0}, {0.717948735, 0}] [Visible:true] [Text:"POOP"]
          UIStroke: UIStroke
          UIAspectRatioConstraint: UIAspectRatioConstraint
        UIAspectRatioConstraint: UIAspectRatioConstraint
      Frame: SlideFrame2 [Pos:{0.547500014, 0}, {0.567103744, 0}] [Size:{1.44999993, 0}, {0.529999971, 0}] [Visible:true]
        UIAspectRatioConstraint: UIAspectRatioConstraint
      Frame: SlideFrame3 [Pos:{0.55000037, 0}, {1.07836366, 0}] [Size:{1.46000004, 0}, {0.83551836, 0}] [Visible:true]
        UIAspectRatioConstraint: UIAspectRatioConstraint
      Frame: SlideFrame4 [Pos:{0.480624706, 0}, {1.42722261, 0}] [Size:{1.44999993, 0}, {0.676249981, 0}] [Visible:true]
        ImageLabel: PoopImageLabel [Pos:{0.499615163, 0}, {-0.176007211, 0}] [Size:{0.72389859, 0}, {1.55578566, 0}] [Visible:true] [Image]
          UIAspectRatioConstraint: UIAspectRatioConstraint
        UIAspectRatioConstraint: UIAspectRatioConstraint
      TextButton: Button [Pos:{-0.109998778, 0}, {-0.0790624991, 0}] [Size:{1.17999995, 0}, {1.13999999, 0}] [Visible:true] [Text:"Button"]
        UIAspectRatioConstraint: UIAspectRatioConstraint
        LocalScript: PoopButtonGuiAnimation [SCRIPT]
          StringValue: OriginalParent
      UIStroke: UIStroke
      Frame: SlideFrame5 [Pos:{0.480624735, 0}, {2.15133023, 0}] [Size:{1.45000005, 0}, {1.6403085, 0}] [Visible:true]
        UIAspectRatioConstraint: UIAspectRatioConstraint
      UIAspectRatioConstraint: UIAspectRatioConstraint
    UIAspectRatioConstraint: UIAspectRatioConstraint
  ScreenGui: ShopGui
    Frame: ShopFrame [Pos:{0.5, 0}, {0.5, 0}] [Size:{1, 0}, {0.977683604, 0}] [Visible:true]
      ImageButton: ExitButton [Pos:{0.817201495, 0}, {0.192526639, 0}] [Size:{0.116490833, 0}, {0.172200799, 0}] [Visible:true] [Image]
        TextLabel: ExitLabel [Pos:{0.379256338, 0}, {0.402621597, 0}] [Size:{0.235320166, 0}, {0.351053894, 0}] [Visible:true] [Text:"X"]
          UIStroke: UIStroke
          UIAspectRatioConstraint: UIAspectRatioConstraint
        UIAspectRatioConstraint: UIAspectRatioConstraint
      CanvasGroup: CanvasBackground [Pos:{0.190412104, 0}, {0.207850188, 0}] [Size:{0.627570152, 0}, {0.702702701, 0}] [Visible:true]
        Frame: ButtonsBackground [Pos:{0.363000005, 0}, {0.10551998, 0}] [Size:{0.631516457, 0}, {0.137651816, 0}] [Visible:true]
          UIListLayout: UIListLayout
          ImageButton: PoopsButton [Pos:{0, 0}, {0.0144927539, 0}] [Size:{0.131332085, 0}, {0.999999821, 0}] [Visible:true] [Image]
            UIStroke: UIStroke
            UICorner: UICorner
            UIAspectRatioConstraint: UIAspectRatioConstraint
          ImageButton: UpgradesButton [Pos:{0.140712947, 0}, {0.0144927539, 0}] [Size:{0.131332085, 0}, {0.999999821, 0}] [Visible:true] [Image]
            UIStroke: UIStroke
            UICorner: UICorner
            UIAspectRatioConstraint: UIAspectRatioConstraint
          ImageButton: GamepassesButton [Pos:{0.281425893, 0}, {0.0144927539, 0}] [Size:{0.131332085, 0}, {0.999999821, 0}] [Visible:true] [Image]
            UIStroke: UIStroke
            UICorner: UICorner
            UIAspectRatioConstraint: UIAspectRatioConstraint
          UIAspectRatioConstraint: UIAspectRatioConstraint
        Frame: CosmeticBackground [Pos:{0.505845308, 0}, {0.48550421, 0}] [Size:{0.977488101, 0}, {0.929149806, 0}] [Visible:true]
          UICorner: UICorner
          UIStroke: UIStroke
          UIAspectRatioConstraint: UIAspectRatioConstraint
        ScrollingFrame: PoopsScrollingFrame [Pos:{0.354999989, 0}, {0.551999986, 0}] [Size:{0.631516576, 0}, {0.752215862, 0}] [Visible:false]
          UICorner: UICorner
          Frame: Background [Pos:{0.5, 0}, {0.529999971, 0}] [Size:{1, 0}, {1, 0}] [Visible:true]
            TextButton: WaterPoopButton [Pos:{0.140712947, 0}, {0.085592024, 0}] [Size:{0.192390889, 0}, {0.289704502, 0}] [Visible:true] [Text:"Button"]
              ViewportFrame: ViewportFrame [Pos:{0.5, 0}, {0.5, 0}] [Size:{1, 0}, {1, 0}] [Visible:true]
                UIStroke: UIStroke
                UICorner: UICorner
                Model: WaterPoop
                  UnionOperation: Poop
                    Attachment: Part1
                  Script: AutoPrimaryScript [SCRIPT]
                  Script: SpinScript [SCRIPT]
                UIAspectRatioConstraint: UIAspectRatioConstraint
              UIAspectRatioConstraint: UIAspectRatioConstraint
            UIListLayout: UIListLayout
            TextButton: PoopButton [Pos:{0.140712947, 0}, {0.085592024, 0}] [Size:{0.192390889, 0}, {0.289704502, 0}] [Visible:true] [Text:"Button"]
              ViewportFrame: ViewportFrame [Pos:{0.5, 0}, {0.5, 0}] [Size:{1, 0}, {1, 0}] [Visible:true]
                UIStroke: UIStroke
                UICorner: UICorner
                Model: Poop
                  UnionOperation: Poop
                  Script: AutoPrimaryScript [SCRIPT]
                  Script: SpinScript [SCRIPT]
                UIAspectRatioConstraint: UIAspectRatioConstraint
              UIAspectRatioConstraint: UIAspectRatioConstraint
            TextButton: StinkyPoopButton [Pos:{0.140712947, 0}, {0.085592024, 0}] [Size:{0.192390889, 0}, {0.289704502, 0}] [Visible:true] [Text:"Button"]
              ViewportFrame: ViewportFrame [Pos:{0.5, 0}, {0.5, 0}] [Size:{1, 0}, {1, 0}] [Visible:true]
                UIStroke: UIStroke
                UICorner: UICorner
                Model: StinkyPoop
                  UnionOperation: Poop
                    Attachment: Poison_Attachment1(*)
                    Attachment: Poison_Attachment2(*)
                  Script: AutoPrimaryScript [SCRIPT]
                  Script: SpinScript [SCRIPT]
                UIAspectRatioConstraint: UIAspectRatioConstraint
              UIAspectRatioConstraint: UIAspectRatioConstraint
            TextButton: BurntPoopButton [Pos:{0.140712947, 0}, {0.085592024, 0}] [Size:{0.192390889, 0}, {0.289704502, 0}] [Visible:true] [Text:"Button"]
              ViewportFrame: ViewportFrame [Pos:{0.5, 0}, {0.5, 0}] [Size:{1, 0}, {1, 0}] [Visible:true]
                UIStroke: UIStroke
                UICorner: UICorner
                Model: BurntPoop
                  UnionOperation: Poop
                    Attachment: Explosion
                  Script: AutoPrimaryScript [SCRIPT]
                  Script: SpinScript [SCRIPT]
                UIAspectRatioConstraint: UIAspectRatioConstraint
              UIAspectRatioConstraint: UIAspectRatioConstraint
            TextButton: ShockedPoopButton [Pos:{0.140712947, 0}, {0.085592024, 0}] [Size:{0.192390889, 0}, {0.289704502, 0}] [Visible:true] [Text:"Button"]
              ViewportFrame: ViewportFrame [Pos:{0.5, 0}, {0.5, 0}] [Size:{1, 0}, {1, 0}] [Visible:true]
                UIStroke: UIStroke
                UICorner: UICorner
                Model: ShockedPoop
                  UnionOperation: Poop
                    ParticleEmitter: ELECTRIC
                  Script: AutoPrimaryScript [SCRIPT]
                  Script: SpinScript [SCRIPT]
                UIAspectRatioConstraint: UIAspectRatioConstraint
              UIAspectRatioConstraint: UIAspectRatioConstraint
            TextButton: HypnosisPoopButton [Pos:{0.140712947, 0}, {0.085592024, 0}] [Size:{0.192390889, 0}, {0.289704502, 0}] [Visible:true] [Text:"Button"]
              ViewportFrame: ViewportFrame [Pos:{0.5, 0}, {0.5, 0}] [Size:{1, 0}, {1, 0}] [Visible:true]
                UIStroke: UIStroke
                UICorner: UICorner
                Model: HypnosisPoop
                  UnionOperation: Poop
                    Attachment: Attachment
                  Script: AutoPrimaryScript [SCRIPT]
                  Script: SpinScript [SCRIPT]
                UIAspectRatioConstraint: UIAspectRatioConstraint
              UIAspectRatioConstraint: UIAspectRatioConstraint
            TextButton: HolyPoopButton [Pos:{0.140712947, 0}, {0.085592024, 0}] [Size:{0.192390889, 0}, {0.289704502, 0}] [Visible:true] [Text:"Button"]
              ViewportFrame: ViewportFrame [Pos:{0.5, 0}, {0.5, 0}] [Size:{1, 0}, {1, 0}] [Visible:true]
                UIStroke: UIStroke
                UICorner: UICorner
                Model: HolyPoop
                  UnionOperation: Poop
                    Attachment: Middle
                    Attachment: Attachment
                  Script: AutoPrimaryScript [SCRIPT]
                  Script: SpinScript [SCRIPT]
                UIAspectRatioConstraint: UIAspectRatioConstraint
              UIAspectRatioConstraint: UIAspectRatioConstraint
            TextButton: BloodyPoopButton [Pos:{0.140712947, 0}, {0.085592024, 0}] [Size:{0.192390889, 0}, {0.289704502, 0}] [Visible:true] [Text:"Button"]
              ViewportFrame: ViewportFrame [Pos:{0.5, 0}, {0.5, 0}] [Size:{1, 0}, {1, 0}] [Visible:true]
                UIStroke: UIStroke
                UICorner: UICorner
                Model: BloodyPoop
                  UnionOperation: Poop
                    Attachment: Attachment
                  Script: AutoPrimaryScript [SCRIPT]
                  Script: SpinScript [SCRIPT]
                UIAspectRatioConstraint: UIAspectRatioConstraint
              UIAspectRatioConstraint: UIAspectRatioConstraint
            TextButton: DiamondPoopButton [Pos:{0.140712947, 0}, {0.085592024, 0}] [Size:{0.192390889, 0}, {0.289704502, 0}] [Visible:true] [Text:"Button"]
              ViewportFrame: ViewportFrame [Pos:{0.5, 0}, {0.5, 0}] [Size:{1, 0}, {1, 0}] [Visible:true]
                UIStroke: UIStroke
                UICorner: UICorner
                Model: DiamondPoop
                  UnionOperation: Poop
                    Attachment: PerfectBlock(*)
                    Attachment: Part1
                    Attachment: Ground2
                    Attachment: Block(*)
                  Script: AutoPrimaryScript [SCRIPT]
                  Script: SpinScript [SCRIPT]
                UIAspectRatioConstraint: UIAspectRatioConstraint
              UIAspectRatioConstraint: UIAspectRatioConstraint
            TextButton: VoidPoopButton [Pos:{0.140712947, 0}, {0.085592024, 0}] [Size:{0.192390889, 0}, {0.289704502, 0}] [Visible:true] [Text:"Button"]
              ViewportFrame: ViewportFrame [Pos:{0.5, 0}, {0.5, 0}] [Size:{1, 0}, {1, 0}] [Visible:true]
                UIStroke: UIStroke
                Model: VoidPoop
                  UnionOperation: Poop
                    Attachment: Attachment
                  Script: AutoPrimaryScript [SCRIPT]
                  Script: SpinScript [SCRIPT]
                UICorner: UICorner
                UIAspectRatioConstraint: UIAspectRatioConstraint
              UIAspectRatioConstraint: UIAspectRatioConstraint
            TextButton: GalePoopButton [Pos:{0.140712947, 0}, {0.085592024, 0}] [Size:{0.192390889, 0}, {0.289704502, 0}] [Visible:true] [Text:"Button"]
              ViewportFrame: ViewportFrame [Pos:{0.5, 0}, {0.5, 0}] [Size:{1, 0}, {1, 0}] [Visible:true]  -  Edit
  03:10:24.961  STARTERGUI_CHUNK_1_END  -  Edit
  03:10:25.013  STARTERGUI_CHUNK_2_START  -  Edit
  03:10:25.013                  UIStroke: UIStroke
                UICorner: UICorner
                Model: GalePoop
                  UnionOperation: Poop
                    ParticleEmitter: CUTS
                    Attachment: Middle
                    Attachment: Attachment
                  Script: AutoPrimaryScript [SCRIPT]
                  Script: SpinScript [SCRIPT]
                UIAspectRatioConstraint: UIAspectRatioConstraint
              UIAspectRatioConstraint: UIAspectRatioConstraint
            TextButton: BlackHolePoopButton [Pos:{0.140712947, 0}, {0.085592024, 0}] [Size:{0.192390889, 0}, {0.289704502, 0}] [Visible:true] [Text:"Button"]
              ViewportFrame: ViewportFrame [Pos:{0.5, 0}, {0.5, 0}] [Size:{1, 0}, {1, 0}] [Visible:true]
                UIStroke: UIStroke
                UICorner: UICorner
                Model: BlackHolePoop
                  UnionOperation: Poop
                    Attachment: MIDDLE
                  Script: AutoPrimaryScript [SCRIPT]
                  Script: SpinScript [SCRIPT]
                UIAspectRatioConstraint: UIAspectRatioConstraint
              UIAspectRatioConstraint: UIAspectRatioConstraint
            UIAspectRatioConstraint: UIAspectRatioConstraint
          UIAspectRatioConstraint: UIAspectRatioConstraint
        Frame: InfoBackground [Pos:{0.829951465, 0}, {0.490985781, 0}] [Size:{0.285545021, 0}, {0.850202382, 0}] [Visible:true]
          UICorner: UICorner
          ViewportFrame: PoopViewportFrame [Pos:{0.497925311, 0}, {0.267857134, 0}] [Size:{0.788381755, 0}, {0.452380925, 0}] [Visible:true]
            UICorner: UICorner
            UIAspectRatioConstraint: UIAspectRatioConstraint
          TextLabel: NameLabel [Pos:{0.497925311, 0}, {0.545326591, 0}] [Size:{0.829875469, 0}, {0.0857142881, 0}] [Visible:true] [Text:"Name"]
            UIStroke: UIStroke
            UIAspectRatioConstraint: UIAspectRatioConstraint
          TextLabel: DescriptionLabel [Pos:{0.497925192, 0}, {0.811698139, 0}] [Size:{0.829875469, 0}, {0.104217194, 0}] [Visible:true] [Text:"Price: 25 PooBucks"]
            UIStroke: UIStroke
            UIAspectRatioConstraint: UIAspectRatioConstraint
          TextButton: BuyButton [Pos:{0.497925311, 0}, {0.911904752, 0}] [Size:{0.731585503, 0}, {0.0961959511, 0}] [Visible:true] [Text:"Buy"]
            UICorner: UICorner
            UIStroke: UIStroke
            UIStroke: UIStroke
            UIAspectRatioConstraint: UIAspectRatioConstraint
          TextLabel: GainLabel [Pos:{0.49675712, 0}, {0.675033212, 0}] [Size:{0.827539086, 0}, {0.169422492, 0}] [Visible:true] [Text:"+3 PooBucks"]
            UIStroke: UIStroke
            UIAspectRatioConstraint: UIAspectRatioConstraint
          ImageLabel: PoopImageLabel [Pos:{0.49980402, 0}, {0.270676732, 0}] [Size:{0.762483716, 0}, {0.44591254, 0}] [Visible:false] [Image]
            UICorner: UICorner
            UIAspectRatioConstraint: UIAspectRatioConstraint
          Frame: GamepassBuyAndGiftButtons [Pos:{0.531153798, 0}, {0.916118264, 0}] [Size:{0.859499633, 0}, {0.0961286873, 0}] [Visible:false]
            TextButton: GiftAPlayerButton [Pos:{0.244098619, 0}, {0.533584297, 0}] [Size:{0.444444418, 0}, {1, 0}] [Visible:true] [Text:"Gift"]
              UICorner: UICorner
              UIStroke: UIStroke
              UIStroke: UIStroke
              UIAspectRatioConstraint: UIAspectRatioConstraint
            UIListLayout: UIListLayout
            TextButton: BuyGamepassButton [Pos:{0.244098619, 0}, {0.533584297, 0}] [Size:{0.444444418, 0}, {1, 0}] [Visible:true] [Text:"Buy"]
              UICorner: UICorner
              UIStroke: UIStroke
              UIStroke: UIStroke
              UIAspectRatioConstraint: UIAspectRatioConstraint
            UIAspectRatioConstraint: UIAspectRatioConstraint
          UIAspectRatioConstraint: UIAspectRatioConstraint
        ScrollingFrame: UpgradesScrollingFrame [Pos:{0.354999989, 0}, {0.551999986, 0}] [Size:{0.631516516, 0}, {0.738866329, 0}] [Visible:false]
          UICorner: UICorner
          Frame: Background [Pos:{0.5, 0}, {0.519999981, 0}] [Size:{1, 0}, {1, 0}] [Visible:true]
            TextButton: 2PoopsUpgradeButton [Pos:{0.503134787, 0}, {0.0523511469, 0}] [Size:{0.398693919, 0}, {0.104702331, 0}] [Visible:true] [Text:"Button"]
              UICorner: UICorner
              UIStroke: UIStroke
              ImageLabel: UpgradeImageLabel [Pos:{0.25, 0}, {0.5, 0}] [Size:{0.405732185, 0}, {0.859467328, 0}] [Visible:true] [Image]
                UIAspectRatioConstraint: UIAspectRatioConstraint
              TextLabel: UpgradeTextLabel [Pos:{0.730236888, 0}, {0.510772347, 0}] [Size:{0.456448734, 0}, {0.429733664, 0}] [Visible:true] [Text:"+1 Poop Production"]
                UIStroke: UIStroke
                UIAspectRatioConstraint: UIAspectRatioConstraint
              UIAspectRatioConstraint: UIAspectRatioConstraint
            UIListLayout: UIListLayout
            UIAspectRatioConstraint: UIAspectRatioConstraint
          UIAspectRatioConstraint: UIAspectRatioConstraint
        ScrollingFrame: GamepassesScrollingFrame [Pos:{0.355056226, 0}, {0.552101135, 0}] [Size:{0.631516516, 0}, {0.738866329, 0}] [Visible:true]
          UICorner: UICorner
          Frame: GamepassesBackground [Pos:{0.5, 0}, {0.187622726, 0}] [Size:{1, 0}, {0.389999986, 0}] [Visible:true]
            UIListLayout: UIListLayout
            UIAspectRatioConstraint: UIAspectRatioConstraint
            TextButton: 2xPooBucksButton [Pos:{0.546367109, 0}, {0.168394491, 0}] [Size:{0.42656374, 0}, {0.304053634, 0}] [Visible:true] [Text:"Button"]
              UICorner: UICorner
              UIStroke: UIStroke
              ImageLabel: GamepassImageLabel [Pos:{0.229573995, 0}, {0.496642947, 0}] [Size:{0.5, 0}, {0.899999976, 0}] [Visible:true] [Image]
                UICorner: UICorner
                UIAspectRatioConstraint: UIAspectRatioConstraint
              TextLabel: GamepassTextLabel [Pos:{0.726329386, 0}, {0.495156884, 0}] [Size:{0.501792073, 0}, {0.599999964, 0}] [Visible:true] [Text:"2x Poop"]
                UIStroke: UIStroke
                UIAspectRatioConstraint: UIAspectRatioConstraint
              UIAspectRatioConstraint: UIAspectRatioConstraint
            TextButton: 4xPooBucksButton [Pos:{0.546367109, 0}, {0.168394491, 0}] [Size:{0.42656374, 0}, {0.304053634, 0}] [Visible:true] [Text:"Button"]
              UICorner: UICorner
              UIStroke: UIStroke
              ImageLabel: GamepassImageLabel [Pos:{0.229573995, 0}, {0.496642947, 0}] [Size:{0.5, 0}, {0.899999976, 0}] [Visible:true] [Image]
                UICorner: UICorner
                UIAspectRatioConstraint: UIAspectRatioConstraint
              TextLabel: GamepassTextLabel [Pos:{0.726329386, 0}, {0.495156884, 0}] [Size:{0.501792073, 0}, {0.599999964, 0}] [Visible:true] [Text:"4x Poop"]
                UIStroke: UIStroke
                UIAspectRatioConstraint: UIAspectRatioConstraint
              UIAspectRatioConstraint: UIAspectRatioConstraint
          TextLabel: GamepassTitleTextlabel [Pos:{0.499740452, 0}, {0.0238558203, 0}] [Size:{0.5, 0}, {0.5, 0}] [Visible:true] [Text:"Gamepasses"]
            UIStroke: UIStroke
            UIAspectRatioConstraint: UIAspectRatioConstraint
          TextLabel: BoostsTitleTextlabel [Pos:{0.496603936, 0}, {0.379632026, 0}] [Size:{0.600000024, 0}, {0.5, 0}] [Visible:true] [Text:"Boosts"]
            UIStroke: UIStroke
            UIAspectRatioConstraint: UIAspectRatioConstraint
          Frame: BoostsBackground [Pos:{0.5, 0}, {0.550000012, 0}] [Size:{1, 0}, {0.389999986, 0}] [Visible:true]
            UIListLayout: UIListLayout
            UIAspectRatioConstraint: UIAspectRatioConstraint
            TextButton: 2xPooBucksBoostButton [Pos:{0.508495629, 0}, {-0.302149087, 0}] [Size:{0.42656374, 0}, {0.304053634, 0}] [Visible:true] [Text:"Button"]
              UICorner: UICorner
              UIStroke: UIStroke
              ImageLabel: GamepassImageLabel [Pos:{0.234468117, 0}, {0.491614252, 0}] [Size:{0.449999988, 0}, {0.899999976, 0}] [Visible:true] [Image]
                UICorner: UICorner
                UIAspectRatioConstraint: UIAspectRatioConstraint
              TextLabel: GamepassTextLabel [Pos:{0.726329267, 0}, {0.490104377, 0}] [Size:{0.501792073, 0}, {0.599999964, 0}] [Visible:true] [Text:"15 mins 2x Poop"]
                UIStroke: UIStroke
                UIAspectRatioConstraint: UIAspectRatioConstraint
              UIAspectRatioConstraint: UIAspectRatioConstraint
            TextButton: 4xPooBucksBoostButton [Pos:{0.508495629, 0}, {-0.302149087, 0}] [Size:{0.42656374, 0}, {0.304053634, 0}] [Visible:true] [Text:"Button"]
              UICorner: UICorner
              UIStroke: UIStroke
              ImageLabel: GamepassImageLabel [Pos:{0.234468117, 0}, {0.491614252, 0}] [Size:{0.449999988, 0}, {0.899999976, 0}] [Visible:true] [Image]
                UICorner: UICorner
                UIAspectRatioConstraint: UIAspectRatioConstraint
              TextLabel: GamepassTextLabel [Pos:{0.726329267, 0}, {0.490104377, 0}] [Size:{0.501792073, 0}, {0.599999964, 0}] [Visible:true] [Text:"15 mins 4x Poop"]
                UIStroke: UIStroke
                UIAspectRatioConstraint: UIAspectRatioConstraint
              UIAspectRatioConstraint: UIAspectRatioConstraint
          UIAspectRatioConstraint: UIAspectRatioConstraint
        Frame: GiftFrame [Pos:{0.47438696, 0}, {0.516645372, 0}] [Size:{0.371378839, 0}, {0.703359783, 0}] [Visible:false]
          UIStroke: UIStroke
          UICorner: UICorner
          UIGradient: UIGradient
          TextLabel: GamepassTitleTextLabel [Pos:{0.49573192, 0}, {0.127906978, 0}] [Size:{0.846874833, 0}, {0.156976745, 0}] [Visible:true] [Text:"Gamepass name"]
            UIStroke: UIStroke
            UIAspectRatioConstraint: UIAspectRatioConstraint
          TextLabel: GamepassDescription [Pos:{0.485214412, 0}, {0.395088643, 0}] [Size:{0.693749964, 0}, {0.276162803, 0}] [Visible:true] [Text:"This gamepass gives you 2x PooBucks forever!"]
            UIStroke: UIStroke
            UIAspectRatioConstraint: UIAspectRatioConstraint
          TextBox: TypePlayerUsernameTextbox [Pos:{0.487919629, 0}, {0.668604672, 0}] [Size:{0.762499988, 0}, {0.145348832, 0}] [Visible:true]
            UICorner: UICorner
            UIStroke: UIStroke
            UIStroke: UIStroke
            UIAspectRatioConstraint: UIAspectRatioConstraint
          TextButton: GiftAPlayerButton [Pos:{0.495661259, 0}, {0.891248465, 0}] [Size:{0.54131937, 0}, {0.121880993, 0}] [Visible:true] [Text:"Gift"]
            UICorner: UICorner
            UIStroke: UIStroke
            UIStroke: UIStroke
            UIAspectRatioConstraint: UIAspectRatioConstraint
          ImageButton: ExitGiftFrameButton [Pos:{0.978992462, 0}, {-0.0280288868, 0}] [Size:{0.29693073, 0}, {0.231102422, 0}] [Visible:true] [Image]
            TextLabel: XLabel [Pos:{0.34028402, 0}, {0.425777614, 0}] [Size:{0.284612834, 0}, {0.351053864, 0}] [Visible:true] [Text:"X"]
              UIStroke: UIStroke
              UIAspectRatioConstraint: UIAspectRatioConstraint
            UIAspectRatioConstraint: UIAspectRatioConstraint
          UIAspectRatioConstraint: UIAspectRatioConstraint
        UIAspectRatioConstraint: UIAspectRatioConstraint
      UIAspectRatioConstraint: UIAspectRatioConstraint
    UIAspectRatioConstraint: UIAspectRatioConstraint
    LocalScript: ShopScript [SCRIPT]
      StringValue: OriginalParent
  ScreenGui: PopupScreenGui
    CanvasGroup: PopupBackgroundTemplate [Pos:{0.623176634, 0}, {0.389802635, 0}] [Size:{0, 89}, {0, 70}] [Visible:false]
      TextLabel: PooBucksGained [Pos:{0.494318247, 0}, {0.825378001, 0}] [Size:{0, 89}, {0, 19}] [Visible:true] [Text:"+2"]
        UIStroke: UIStroke
        UIAspectRatioConstraint: UIAspectRatioConstraint
      ImageLabel: PopupImage [Pos:{0.494318247, 0}, {0.363000005, 0}] [Size:{0, 49}, {0, 49}] [Visible:true] [Image]
        UIAspectRatioConstraint: UIAspectRatioConstraint
      UIAspectRatioConstraint: UIAspectRatioConstraint
    LocalScript: PopupManager [SCRIPT]
      StringValue: OriginalParent
    UIAspectRatioConstraint: UIAspectRatioConstraint
  ScreenGui: BoostsGui
    Frame: Background [Pos:{0.10942959, 0}, {0.432465166, 0}] [Size:{0.185869306, 0}, {0.185472906, 0}] [Visible:true]
      UIListLayout: UIListLayout
      ImageButton: BoostTemplate1 [Pos:{0, 0}, {0, 0}] [Size:{0.222222209, 0}, {1, 0}] [Visible:false] [Image]
        UICorner: UICorner
        UIAspectRatioConstraint: UIAspectRatioConstraint
      ImageButton: BoostTemplate2 [Pos:{0, 0}, {0, 0}] [Size:{0.222222209, 0}, {1, 0}] [Visible:false] [Image]
        UICorner: UICorner
        UIAspectRatioConstraint: UIAspectRatioConstraint
      ImageButton: BoostTemplate3 [Pos:{0, 0}, {0, 0}] [Size:{0.222222209, 0}, {1, 0}] [Visible:false] [Image]
        UICorner: UICorner
        UIAspectRatioConstraint: UIAspectRatioConstraint
      ImageButton: BoostTemplate4 [Pos:{0, 0}, {0, 0}] [Size:{0.222222209, 0}, {1, 0}] [Visible:false] [Image]
        UICorner: UICorner
        UIAspectRatioConstraint: UIAspectRatioConstraint
      UIAspectRatioConstraint: UIAspectRatioConstraint
    Frame: HoverFrame [Pos:{0.327371657, 0}, {0.387001485, 0}] [Size:{0.0699844509, 0}, {0.162866443, 0}] [Visible:false]
      UICorner: UICorner
      UIStroke: UIStroke
      TextLabel: Description [Pos:{0.0444444455, 0}, {0, 0}] [Size:{0.911111116, 0}, {0.589999974, 0}] [Visible:true] [Text:"Gives 2x PooBucks"]
        UIStroke: UIStroke
      TextLabel: TimeLeft [Pos:{0.0790144876, 0}, {0.589934647, 0}] [Size:{0.830447912, 0}, {0.289673179, 0}] [Visible:true] [Text:"2:00"]
        UIStroke: UIStroke
      UIGradient: UIGradient
      UIAspectRatioConstraint: UIAspectRatioConstraint
    LocalScript: BoostsScript [SCRIPT]
    UIAspectRatioConstraint: UIAspectRatioConstraint
  ScreenGui: NotificationGui  -  Edit
  03:10:25.013  STARTERGUI_CHUNK_2_END  -  Edit
  03:10:25.070  STARTERGUI_CHUNK_3_START  -  Edit
  03:10:25.070      Frame: NextPurchaseNotificationBackground [Pos:{0.516380668, 0}, {0.195056915, 0}] [Size:{0.31386292, 0}, {0.226984128, 0}] [Visible:false]
      UIStroke: UIStroke
      UICorner: UICorner
      UIGradient: UIGradient
      TextLabel: NotificationTitle [Pos:{0.4987593, 0}, {0.15384616, 0}] [Size:{0.496277928, 0}, {0.272727281, 0}] [Visible:true] [Text:"Water Poop"]
        UIStroke: UIStroke
        UIGradient: UIGradient
        UIAspectRatioConstraint: UIAspectRatioConstraint
      ImageButton: ExitButton [Pos:{0.96608454, 0}, {0.00371524831, 0}] [Size:{0.276198596, 0}, {0.583274007, 0}] [Visible:true] [Image]
        TextLabel: ExitLabel [Pos:{0.368618578, 0}, {0.380725861, 0}] [Size:{0.235112906, 0}, {0.356891036, 0}] [Visible:true] [Text:"X"]
          UIStroke: UIStroke
          UIAspectRatioConstraint: UIAspectRatioConstraint
        UIAspectRatioConstraint: UIAspectRatioConstraint
      TextLabel: NotificationDescription [Pos:{0.497441977, 0}, {0.496503502, 0}] [Size:{0.890818834, 0}, {0.440559417, 0}] [Visible:true] [Text:"You have enough money to buy the next  poop upgrade which is Water Poop!"]
        UIStroke: UIStroke
        UIGradient: UIGradient
        UIAspectRatioConstraint: UIAspectRatioConstraint
      UIGradient: UIGradient
      TextButton: TeleportToShopButton [Pos:{0.496277928, 0}, {0.863007009, 0}] [Size:{0.317617863, 0}, {0.181818172, 0}] [Visible:true] [Text:"Teleport"]
        UICorner: UICorner
        UIStroke: UIStroke
        UIStroke: UIStroke
        UIAspectRatioConstraint: UIAspectRatioConstraint
      UIAspectRatioConstraint: UIAspectRatioConstraint
    Frame: RecievedGiftNotificationBackground [Pos:{0.516380668, 0}, {0.195056915, 0}] [Size:{0, 403}, {0, 143}] [Visible:false]
      UIStroke: UIStroke
      UICorner: UICorner
      TextLabel: NotificationTitle [Pos:{0.497518599, 0}, {0.175699294, 0}] [Size:{0.732009947, 0}, {0.349650353, 0}] [Visible:true] [Text:"You recieved a gift!"]
        UIStroke: UIStroke
        UIGradient: UIGradient
        UIAspectRatioConstraint: UIAspectRatioConstraint
      TextLabel: NotificationDescription [Pos:{0.491897166, 0}, {0.63893503, 0}] [Size:{0.863523602, 0}, {0.573426545, 0}] [Visible:true] [Text:"BuggError has gifted you "GiftName". Thank them by sending them another gift!"]
        UIStroke: UIStroke
        UIGradient: UIGradient
        UIAspectRatioConstraint: UIAspectRatioConstraint
      ImageButton: ExitButton [Pos:{0.96608454, 0}, {0.00371524831, 0}] [Size:{0.276198596, 0}, {0.583274007, 0}] [Visible:true] [Image]
        TextLabel: ExitLabel [Pos:{0.368618578, 0}, {0.380725861, 0}] [Size:{0.235112906, 0}, {0.356891036, 0}] [Visible:true] [Text:"X"]
          UIStroke: UIStroke
          UIAspectRatioConstraint: UIAspectRatioConstraint
        UIAspectRatioConstraint: UIAspectRatioConstraint
      UIGradient: UIGradient
      UIAspectRatioConstraint: UIAspectRatioConstraint
    LocalScript: NotificationSystem [SCRIPT]
    UIAspectRatioConstraint: UIAspectRatioConstraint
  ScreenGui: RebirthGui
    Frame: Rebirthbackground [Pos:{0.499256521, 0}, {0.523036003, 0}] [Size:{0.483128846, 0}, {0.56231004, 0}] [Visible:false]
      UICorner: UICorner
      TextLabel: RebirthTitle [Pos:{0.5, 0}, {0.113513514, 0}] [Size:{0.387301594, 0}, {0.162162155, 0}] [Visible:true] [Text:"Rebirth"]
        UIStroke: UIStroke
        UIGradient: UIGradient
        UIAspectRatioConstraint: UIAspectRatioConstraint
      ImageButton: ExitButton [Pos:{0.986310899, 0}, {-0.0300685167, 0}] [Size:{0.191867024, 0}, {0.244805574, 0}] [Visible:true] [Image]
        TextLabel: ExitLabel [Pos:{0.371520877, 0}, {0.366872847, 0}] [Size:{0.239868939, 0}, {0.399718463, 0}] [Visible:true] [Text:"X"]
          UIStroke: UIStroke
          UIAspectRatioConstraint: UIAspectRatioConstraint
        UIAspectRatioConstraint: UIAspectRatioConstraint
      UIStroke: UIStroke
      TextLabel: RebirthDescription [Pos:{0.482911795, 0}, {0.398018539, 0}] [Size:{0.886470735, 0}, {0.39065221, 0}] [Visible:true] [Text:"If you rebirth you lose all your PooBucks and poops. However you keep your upgrades, gamepasses, boosts and how many times you pooped. And you also get a permanent boost."]
        UIStroke: UIStroke
        UIGradient: UIGradient
        UIGradient: UIGradient
        UIAspectRatioConstraint: UIAspectRatioConstraint
      TextLabel: MultiplierChange [Pos:{0.498808056, 0}, {0.636659205, 0}] [Size:{0.188888893, 0}, {0.0945945978, 0}] [Visible:true] [Text:"1.0x  ->  1.1x"]
        UIStroke: UIStroke
        UIGradient: UIGradient
        UIAspectRatioConstraint: UIAspectRatioConstraint
      CanvasGroup: Bar [Pos:{0.492057413, 0}, {0.811590254, 0}] [Size:{0.844444454, 0}, {0.0405405387, 0}] [Visible:true]
        UICorner: UICorner
        UIStroke: UIStroke
        UIAspectRatioConstraint: UIAspectRatioConstraint
        Frame: BarFramePercentage [Pos:{-0.0109843211, 0}, {0.480949461, 0}] [Size:{1.0109843, 0}, {-1.3497653, 0}] [Visible:true]
          UICorner: UICorner
      TextLabel: RebirthCost [Pos:{0.492063403, 0}, {0.728154302, 0}] [Size:{0.371428579, 0}, {0.0702702701, 0}] [Visible:true] [Text:"Price: nil"]
        UIStroke: UIStroke
        UIGradient: UIGradient
        UIAspectRatioConstraint: UIAspectRatioConstraint
      UIGradient: UIGradient
      TextLabel: RebirthbBarPercentage [Pos:{0.965066671, 0}, {0.811410308, 0}] [Size:{0.0751914605, 0}, {0.0685425326, 0}] [Visible:true] [Text:"0%"]
        UIStroke: UIStroke
        UIGradient: UIGradient
        UIAspectRatioConstraint: UIAspectRatioConstraint
      UIAspectRatioConstraint: UIAspectRatioConstraint
      ImageLabel: CosmeticImageLabel [Pos:{0.277197391, 0}, {0.125964403, 0}] [Size:{0, 68}, {0, 68}] [Visible:true] [Image]
        UIAspectRatioConstraint: UIAspectRatioConstraint
      TextButton: RebirthButton [Pos:{0.498864055, 0}, {0.924579203, 0}] [Size:{0, 150}, {0, 33}] [Visible:true] [Text:"Rebirth"]
        UICorner: UICorner
        UIStroke: UIStroke
        UIStroke: UIStroke
        UIAspectRatioConstraint: UIAspectRatioConstraint
    Frame: RebirthMultiplierDisplayOnPooBucksCurrency [Pos:{0.039646253, 0}, {0.479850501, 0}] [Size:{0.0579002313, 0}, {0.050364688, 0}] [Visible:true]
      UICorner: UICorner
      UIAspectRatioConstraint: UIAspectRatioConstraint
    LocalScript: RebirthClient [SCRIPT]
    UIAspectRatioConstraint: UIAspectRatioConstraint
  ScreenGui: ZoneMultiplier
    Frame: ZoneMultiplierBackground [Pos:{0.5, 0}, {0.0613516495, 0}] [Size:{0, 199}, {0, 47}] [Visible:true]
      TextLabel: ZoneMultiplierTextLabel [Pos:{0.5, 0}, {0.497384042, 0}] [Size:{0, 199}, {0, 50}] [Visible:true] [Text:"1x"]
        UIStroke: UIStroke
        UIAspectRatioConstraint: UIAspectRatioConstraint
      UIAspectRatioConstraint: UIAspectRatioConstraint
    LocalScript: ZoneClient [SCRIPT]
    UIAspectRatioConstraint: UIAspectRatioConstraint
  ScreenGui: EggsGui
    CanvasGroup: EggHatchingBackground [Pos:{0.499640793, 0}, {0.499261439, 0}] [Size:{0.233514354, 0}, {0.423929095, 0}] [Visible:false]
      ViewportFrame: ViewportFrame [Pos:{0.516666651, 0}, {0.489902347, 0}] [Size:{1.81727576, 0}, {1.78745639, 0}] [Visible:true]
        Camera: Camera
        MeshPart: Egg
        UIAspectRatioConstraint: UIAspectRatioConstraint
      UIAspectRatioConstraint: UIAspectRatioConstraint
    Frame: PetsInventoryBackground [Pos:{0.238505751, 0}, {0.218709067, 0}] [Size:{0.574980557, 0}, {0.590841949, 0}] [Visible:false]
      UIStroke: UIStroke
      UICorner: UICorner
      ScrollingFrame: PetsInventoryScrollingFrame [Pos:{0.689864874, 0}, {0.527223349, 0}] [Size:{0.555405378, 0}, {0.782500029, 0}] [Visible:true]
        UIStroke: UIStroke
        UICorner: UICorner
        Frame: PetsHolderButtonsFrame [Pos:{0.492700726, 0}, {0.525405943, 0}] [Size:{0.946472049, 0}, {0.970232606, 0}] [Visible:true]
          TextButton: PetBackgroundTemplate [Pos:{0.115571775, 0}, {0.139831886, 0}] [Size:{0.205655545, 0}, {0.263432801, 0}] [Visible:true] [Text:"Button"]
            ViewportFrame: PetViewportFrameTemplate [Pos:{0, 0}, {0, 0}] [Size:{1, 0}, {1, 0}] [Visible:true]
              UIAspectRatioConstraint: UIAspectRatioConstraint
            UICorner: UICorner
            UIAspectRatioConstraint: UIAspectRatioConstraint
          UIListLayout: UIListLayout
          UIAspectRatioConstraint: UIAspectRatioConstraint
        UIAspectRatioConstraint: UIAspectRatioConstraint
      Frame: InfoFrame [Pos:{0.200000003, 0}, {0.487500012, 0}] [Size:{0.340540528, 0}, {0.86500001, 0}] [Visible:true]
        UICorner: UICorner
        UIStroke: UIStroke
        ViewportFrame: PetsViewportFrame [Pos:{0.150793657, 0}, {0.158959538, 0}] [Size:{0.694444478, 0}, {0.505780399, 0}] [Visible:true]
          UIStroke: UIStroke
          UICorner: UICorner
          UIAspectRatioConstraint: UIAspectRatioConstraint
        TextLabel: PetNameLabel [Pos:{0.400879145, 0}, {0.0780346841, 0}] [Size:{0.523809552, 0}, {0.104046255, 0}] [Visible:true] [Text:"PetName"]
          UIStroke: UIStroke
          UIStroke: UIStroke
          UIAspectRatioConstraint: UIAspectRatioConstraint
        TextLabel: PetNameLabel [Pos:{0.494133115, 0}, {0.72974658, 0}] [Size:{0.62301594, 0}, {0.0693641677, 0}] [Visible:true] [Text:"2x PooBucks"]
          UIStroke: UIStroke
          UIStroke: UIStroke
          UIAspectRatioConstraint: UIAspectRatioConstraint
        TextLabel: PoopProductionLabel [Pos:{0.488853335, 0}, {0.818141401, 0}] [Size:{0.531746089, 0}, {0.0722543448, 0}] [Visible:true] [Text:"2x Poops"]
          UIStroke: UIStroke
          UIStroke: UIStroke
          UIAspectRatioConstraint: UIAspectRatioConstraint
        ImageLabel: CosmenticImageLabel [Pos:{0.789682567, 0}, {0.0780346841, 0}] [Size:{0.178571433, 0}, {0.130057812, 0}] [Visible:true] [Image]
          UIAspectRatioConstraint: UIAspectRatioConstraint
        TextButton: Equip/UnequipButton [Pos:{0.241620749, 0}, {0.934971094, 0}] [Size:{0.361111134, 0}, {0.0895953849, 0}] [Visible:true] [Text:"EQUIP"]
          UIStroke: UIStroke
          UIStroke: UIStroke
          UICorner: UICorner
          UIAspectRatioConstraint: UIAspectRatioConstraint
        TextButton: DeleteButton [Pos:{0.697969973, 0}, {0.934971094, 0}] [Size:{0.361111134, 0}, {0.0895953849, 0}] [Visible:true] [Text:"DELETE"]
          UIStroke: UIStroke
          UIStroke: UIStroke
          UICorner: UICorner
          UIAspectRatioConstraint: UIAspectRatioConstraint
        UIAspectRatioConstraint: UIAspectRatioConstraint
      Frame: InventoryInfoBackgroundFrame [Pos:{0.689864874, 0}, {0.0646291003, 0}] [Size:{0.555405378, 0}, {0.0799999982, 0}] [Visible:true]
        TextLabel: PetsLeftForInventory [Pos:{0.71401304, 0}, {0.47101593, 0}] [Size:{0.374695897, 0}, {0.90625006, 0}] [Visible:true] [Text:"Inventory: 0/20"]
          UIStroke: UIStroke
          UIStroke: UIStroke
          UIAspectRatioConstraint: UIAspectRatioConstraint
        TextLabel: PetsEquippedLabel [Pos:{0.340533704, 0}, {0.47439146, 0}] [Size:{0.260340661, 0}, {0.78125, 0}] [Visible:true] [Text:"Pets: 0/3"]
          UIStroke: UIStroke
          UIStroke: UIStroke
          UIAspectRatioConstraint: UIAspectRatioConstraint
        UIAspectRatioConstraint: UIAspectRatioConstraint
      TextLabel: PetNameLabel [Pos:{0.489939094, 0}, {-0.0594653338, 0}] [Size:{0.241891891, 0}, {0.189999998, 0}] [Visible:true] [Text:"Pets"]
        UIStroke: UIStroke
        UIAspectRatioConstraint: UIAspectRatioConstraint
      UIAspectRatioConstraint: UIAspectRatioConstraint
    UIAspectRatioConstraint: UIAspectRatioConstraint
    Frame: PetsStandPreviewFrameBackground [Pos:{0.5, 0}, {0.5, 0}] [Size:{0.287999988, 0}, {0.699999988, 0}] [Visible:false]
      Frame: EggInfo [Pos:{0.5, 0}, {0.203308821, 0}] [Size:{1, 0}, {0.25, 0}] [Visible:true]
        UIListLayout: UIListLayout
        TextLabel: EggName [Pos:{0, 0}, {0, 0}] [Size:{0.999000013, 0}, {0.300000012, 0}] [Visible:true] [Text:"Basic Egg"]
          UIStroke: UIStroke
          UIGradient: UIGradient
        TextLabel: Price [Pos:{0, 0}, {0, 0}] [Size:{0.500999987, 0}, {0.25, 0}] [Visible:true] [Text:"Costs 250"]
          UIStroke: UIStroke
      UIListLayout: UIListLayout
      Frame: Buttons [Pos:{0.5, 0}, {0.0149999997, 0}] [Size:{1, 0}, {0.125, 0}] [Visible:true]
        UIListLayout: UIListLayout
        Frame: Single [Pos:{0.5, 0}, {0.920822918, 0}] [Size:{0.224999994, 0}, {1, 0}] [Visible:true]
          UICorner: UICorner
          TextButton: Click [Pos:{0, 0}, {0, 0}] [Size:{1, 0}, {1, 0}] [Visible:true]
          TextLabel: EKeyTextLabel [Pos:{0.5, 0}, {0.5, 0}] [Size:{0.800000012, 0}, {0.800000012, 0}] [Visible:true] [Text:"E"]
          UIAspectRatioConstraint: UIAspectRatioConstraint
        Frame: Triple [Pos:{0.5, 0}, {0.920822918, 0}] [Size:{0.224999994, 0}, {1, 0}] [Visible:true]
          UICorner: UICorner
          TextButton: Click [Pos:{0, 0}, {0, 0}] [Size:{1, 0}, {1, 0}] [Visible:true]
          TextLabel: RKeyTextLabel [Pos:{0.5, 0}, {0.5, 0}] [Size:{0.800000012, 0}, {0.800000012, 0}] [Visible:true] [Text:"R"]
          UIAspectRatioConstraint: UIAspectRatioConstraint
        Frame: Auto [Pos:{0.5, 0}, {0.920822918, 0}] [Size:{0.224999994, 0}, {1, 0}] [Visible:true]
          UICorner: UICorner
          TextButton: Click [Pos:{0, 0}, {0, 0}] [Size:{1, 0}, {1, 0}] [Visible:true]
          TextLabel: TKeyTextLabel [Pos:{0.5, 0}, {0.5, 0}] [Size:{0.800000012, 0}, {0.800000012, 0}] [Visible:true] [Text:"T"]
          UIAspectRatioConstraint: UIAspectRatioConstraint
      UIAspectRatioConstraint: UIAspectRatioConstraint
      Frame: PetChances [Pos:{0.5, 0}, {0.453605771, 0}] [Size:{1, 0}, {0.51778847, 0}] [Visible:true]
        UICorner: UICorner  -  Edit
  03:10:25.070  STARTERGUI_CHUNK_3_END  -  Edit
  03:10:25.124  STARTERGUI_CHUNK_4_START  -  Edit
  03:10:25.124          Frame: List [Pos:{0.5, 0}, {0.473468006, 0}] [Size:{0.950000048, 0}, {0.837650716, 0}] [Visible:true]
          UIGridLayout: UIGridLayout
          Frame: Pet1 [Pos:{0, 0}, {0, 0}] [Size:{0, 100}, {0, 100}] [Visible:true]
            UIAspectRatioConstraint: UIAspectRatioConstraint
            UICorner: UICorner
            TextLabel: PercentageToGet [Pos:{0.5, 0}, {0.725000024, 0}] [Size:{0.699999988, 0}, {0.300000012, 0}] [Visible:true] [Text:"50%"]
              UIStroke: UIStroke
            TextLabel: Rarity [Pos:{0.5, 0}, {0, 0}] [Size:{0.899999976, 0}, {0.25, 0}] [Visible:true] [Text:"Common"]
              UIStroke: UIStroke
            ViewportFrame: Pet [Pos:{0.449999988, 0}, {0.5, 0}] [Size:{0.899999976, 0}, {0.899999976, 0}] [Visible:true]
            ImageLabel: Delete [Pos:{0.5, 0}, {0.5, 0}] [Size:{0.5, 0}, {0.5, 0}] [Visible:true] [Image]
              UICorner: UICorner
            TextButton: Button [Pos:{0, 0}, {0, 0}] [Size:{1, 0}, {1, 0}] [Visible:true] [Text:"hi"]
            StringValue: PetName
          UIPadding: UIPadding
          Frame: Pet7 [Pos:{0, 0}, {0, 0}] [Size:{0, 100}, {0, 100}] [Visible:true]
            UIAspectRatioConstraint: UIAspectRatioConstraint
            UICorner: UICorner
            TextLabel: Percentage [Pos:{0.5, 0}, {0.725000024, 0}] [Size:{0.699999988, 0}, {0.300000012, 0}] [Visible:true] [Text:"50%"]
              UIStroke: UIStroke
            TextLabel: Rarity [Pos:{0.5, 0}, {0, 0}] [Size:{0.899999976, 0}, {0.25, 0}] [Visible:true] [Text:"Common"]
              UIStroke: UIStroke
            ViewportFrame: Pet [Pos:{0.449999988, 0}, {0.5, 0}] [Size:{0.899999976, 0}, {0.899999976, 0}] [Visible:true]
            ImageLabel: Delete [Pos:{0.5, 0}, {0.5, 0}] [Size:{0.5, 0}, {0.5, 0}] [Visible:true] [Image]
              UICorner: UICorner
            TextButton: Button [Pos:{0, 0}, {0, 0}] [Size:{1, 0}, {1, 0}] [Visible:true] [Text:"hi"]
            StringValue: PetName
          Frame: Pet4 [Pos:{0, 0}, {0, 0}] [Size:{0, 100}, {0, 100}] [Visible:true]
            UIAspectRatioConstraint: UIAspectRatioConstraint
            UICorner: UICorner
            TextLabel: Percentage [Pos:{0.5, 0}, {0.725000024, 0}] [Size:{0.699999988, 0}, {0.300000012, 0}] [Visible:true] [Text:"50%"]
              UIStroke: UIStroke
            TextLabel: Rarity [Pos:{0.5, 0}, {0, 0}] [Size:{0.899999976, 0}, {0.25, 0}] [Visible:true] [Text:"Common"]
              UIStroke: UIStroke
            ViewportFrame: Pet [Pos:{0.449999988, 0}, {0.5, 0}] [Size:{0.899999976, 0}, {0.899999976, 0}] [Visible:true]
            ImageLabel: Delete [Pos:{0.5, 0}, {0.5, 0}] [Size:{0.5, 0}, {0.5, 0}] [Visible:true] [Image]
              UICorner: UICorner
            TextButton: Button [Pos:{0, 0}, {0, 0}] [Size:{1, 0}, {1, 0}] [Visible:true] [Text:"hi"]
            StringValue: PetName
          Frame: Pet2 [Pos:{0, 0}, {0, 0}] [Size:{0, 100}, {0, 100}] [Visible:true]
            UIAspectRatioConstraint: UIAspectRatioConstraint
            UICorner: UICorner
            TextLabel: Percentage [Pos:{0.5, 0}, {0.725000024, 0}] [Size:{0.699999988, 0}, {0.300000012, 0}] [Visible:true] [Text:"50%"]
              UIStroke: UIStroke
            TextLabel: Rarity [Pos:{0.5, 0}, {0, 0}] [Size:{0.899999976, 0}, {0.25, 0}] [Visible:true] [Text:"Common"]
              UIStroke: UIStroke
            ViewportFrame: Pet [Pos:{0.449999988, 0}, {0.5, 0}] [Size:{0.899999976, 0}, {0.899999976, 0}] [Visible:true]
            ImageLabel: Delete [Pos:{0.5, 0}, {0.5, 0}] [Size:{0.5, 0}, {0.5, 0}] [Visible:true] [Image]
              UICorner: UICorner
            TextButton: Button [Pos:{0, 0}, {0, 0}] [Size:{1, 0}, {1, 0}] [Visible:true] [Text:"hi"]
            StringValue: PetName
          Frame: Pet3 [Pos:{0, 0}, {0, 0}] [Size:{0, 100}, {0, 100}] [Visible:true]
            UIAspectRatioConstraint: UIAspectRatioConstraint
            UICorner: UICorner
            TextLabel: Percentage [Pos:{0.5, 0}, {0.725000024, 0}] [Size:{0.699999988, 0}, {0.300000012, 0}] [Visible:true] [Text:"50%"]
              UIStroke: UIStroke
            TextLabel: Rarity [Pos:{0.5, 0}, {0, 0}] [Size:{0.899999976, 0}, {0.25, 0}] [Visible:true] [Text:"Common"]
              UIStroke: UIStroke
            ViewportFrame: Pet [Pos:{0.449999988, 0}, {0.5, 0}] [Size:{0.899999976, 0}, {0.899999976, 0}] [Visible:true]
            ImageLabel: Delete [Pos:{0.5, 0}, {0.5, 0}] [Size:{0.5, 0}, {0.5, 0}] [Visible:true] [Image]
              UICorner: UICorner
            TextButton: Button [Pos:{0, 0}, {0, 0}] [Size:{1, 0}, {1, 0}] [Visible:true] [Text:"hi"]
            StringValue: PetName
          Frame: Pet5 [Pos:{0, 0}, {0, 0}] [Size:{0, 100}, {0, 100}] [Visible:true]
            UIAspectRatioConstraint: UIAspectRatioConstraint
            UICorner: UICorner
            TextLabel: Percentage [Pos:{0.5, 0}, {0.725000024, 0}] [Size:{0.699999988, 0}, {0.300000012, 0}] [Visible:true] [Text:"50%"]
              UIStroke: UIStroke
            TextLabel: Rarity [Pos:{0.5, 0}, {0, 0}] [Size:{0.899999976, 0}, {0.25, 0}] [Visible:true] [Text:"Common"]
              UIStroke: UIStroke
            ViewportFrame: Pet [Pos:{0.449999988, 0}, {0.5, 0}] [Size:{0.899999976, 0}, {0.899999976, 0}] [Visible:true]
            ImageLabel: Delete [Pos:{0.5, 0}, {0.5, 0}] [Size:{0.5, 0}, {0.5, 0}] [Visible:true] [Image]
              UICorner: UICorner
            TextButton: Button [Pos:{0, 0}, {0, 0}] [Size:{1, 0}, {1, 0}] [Visible:true] [Text:"hi"]
            StringValue: PetName
          Frame: Pet6 [Pos:{0, 0}, {0, 0}] [Size:{0, 100}, {0, 100}] [Visible:true]
            UIAspectRatioConstraint: UIAspectRatioConstraint
            UICorner: UICorner
            TextLabel: Percentage [Pos:{0.5, 0}, {0.725000024, 0}] [Size:{0.699999988, 0}, {0.300000012, 0}] [Visible:true] [Text:"50%"]
              UIStroke: UIStroke
            TextLabel: Rarity [Pos:{0.5, 0}, {0, 0}] [Size:{0.899999976, 0}, {0.25, 0}] [Visible:true] [Text:"Common"]
              UIStroke: UIStroke
            ViewportFrame: Pet [Pos:{0.449999988, 0}, {0.5, 0}] [Size:{0.899999976, 0}, {0.899999976, 0}] [Visible:true]
            ImageLabel: Delete [Pos:{0.5, 0}, {0.5, 0}] [Size:{0.5, 0}, {0.5, 0}] [Visible:true] [Image]
              UICorner: UICorner
            TextButton: Button [Pos:{0, 0}, {0, 0}] [Size:{1, 0}, {1, 0}] [Visible:true] [Text:"hi"]
            StringValue: PetName
          Frame: Pet8 [Pos:{0, 0}, {0, 0}] [Size:{0, 100}, {0, 100}] [Visible:true]
            UIAspectRatioConstraint: UIAspectRatioConstraint
            UICorner: UICorner
            TextLabel: Percentage [Pos:{0.5, 0}, {0.725000024, 0}] [Size:{0.699999988, 0}, {0.300000012, 0}] [Visible:true] [Text:"50%"]
              UIStroke: UIStroke
            TextLabel: Rarity [Pos:{0.5, 0}, {0, 0}] [Size:{0.899999976, 0}, {0.25, 0}] [Visible:true] [Text:"Common"]
              UIStroke: UIStroke
            ViewportFrame: Pet [Pos:{0.449999988, 0}, {0.5, 0}] [Size:{0.899999976, 0}, {0.899999976, 0}] [Visible:true]
            ImageLabel: Delete [Pos:{0.5, 0}, {0.5, 0}] [Size:{0.5, 0}, {0.5, 0}] [Visible:true] [Image]
              UICorner: UICorner
            TextButton: Button [Pos:{0, 0}, {0, 0}] [Size:{1, 0}, {1, 0}] [Visible:true] [Text:"hi"]
            StringValue: PetName
          Frame: Pet9 [Pos:{0, 0}, {0, 0}] [Size:{0, 100}, {0, 100}] [Visible:true]
            UIAspectRatioConstraint: UIAspectRatioConstraint
            UICorner: UICorner
            TextLabel: Percentage [Pos:{0.5, 0}, {0.725000024, 0}] [Size:{0.699999988, 0}, {0.300000012, 0}] [Visible:true] [Text:"50%"]
              UIStroke: UIStroke
            TextLabel: Rarity [Pos:{0.5, 0}, {0, 0}] [Size:{0.899999976, 0}, {0.25, 0}] [Visible:true] [Text:"Common"]
              UIStroke: UIStroke
            ViewportFrame: Pet [Pos:{0.449999988, 0}, {0.5, 0}] [Size:{0.899999976, 0}, {0.899999976, 0}] [Visible:true]
            ImageLabel: Delete [Pos:{0.5, 0}, {0.5, 0}] [Size:{0.5, 0}, {0.5, 0}] [Visible:true] [Image]
              UICorner: UICorner
            TextButton: Button [Pos:{0, 0}, {0, 0}] [Size:{1, 0}, {1, 0}] [Visible:true] [Text:"hi"]
            StringValue: PetName
  ScreenGui: StatsGui
    Frame: StatsBackground [Pos:{0.499616832, 0}, {0.525375724, 0}] [Size:{0.286091745, 0}, {0.594975471, 0}] [Visible:false]
      UIStroke: UIStroke
      UICorner: UICorner
      TextLabel: StatsTitleLabel [Pos:{0.498494714, 0}, {-0.0629809499, 0}] [Size:{0.58563894, 0}, {0.239956304, 0}] [Visible:true] [Text:"Stats"]
        UIStroke: UIStroke
        UIAspectRatioConstraint: UIAspectRatioConstraint
        UIGradient: UIGradient
      UIAspectRatioConstraint: UIAspectRatioConstraint
      UIGradient: UIGradient
      ImageButton: ExitButton [Pos:{1.01101053, 0}, {-0.0313907303, 0}] [Size:{0.321959466, 0}, {0.229186639, 0}] [Visible:true] [Image]
        TextLabel: ExitLabel [Pos:{0.383868814, 0}, {0.383056104, 0}] [Size:{0.262367457, 0}, {0.33584553, 0}] [Visible:true] [Text:"X"]
          UIStroke: UIStroke
      Frame: Background [Pos:{0.486452788, 0}, {0.556387544, 0}] [Size:{0.972905576, 0}, {0.896098793, 0}] [Visible:true]
        UIListLayout: UIListLayout
        Frame: PooBucksStatsBackground [Pos:{0.501551986, 0}, {0.106162898, 0}] [Size:{0.837958932, 0}, {0.212325796, 0}] [Visible:true]
          UIStroke: UIStroke
          UICorner: UICorner
          UIGradient: UIGradient
          ImageLabel: CosmeticIcon [Pos:{0.140532136, 0}, {0.49230507, 0}] [Size:{0, 80}, {0, 80}] [Visible:true] [Image]
            UICorner: UICorner
          TextLabel: PooBucksLabel [Pos:{0.626893878, 0}, {0.503879964, 0}] [Size:{0.684419572, 0}, {0.527566373, 0}] [Visible:true] [Text:"12345678"]
            UIStroke: UIStroke
            UIGradient: UIGradient
        Frame: PoopsStatsBackground [Pos:{0.501551986, 0}, {0.424030095, 0}] [Size:{0.837958932, 0}, {0.212325886, 0}] [Visible:true]
          UIStroke: UIStroke
          UICorner: UICorner
          UIGradient: UIGradient
          ImageLabel: CosmeticIcon [Pos:{0.140532136, 0}, {0.49230507, 0}] [Size:{0, 80}, {0, 80}] [Visible:true] [Image]
            UICorner: UICorner
          TextLabel: PoopsStatsLabel [Pos:{0.626893878, 0}, {0.503879964, 0}] [Size:{0.684419572, 0}, {0.527566373, 0}] [Visible:true] [Text:"5030"]
            UIStroke: UIStroke
            UIGradient: UIGradient
        Frame: RebirthsStatsBackground [Pos:{0.501551986, 0}, {0.741897285, 0}] [Size:{0.837958932, 0}, {0.212325796, 0}] [Visible:true]
          UIStroke: UIStroke
          UICorner: UICorner
          UIGradient: UIGradient
          ImageLabel: CosmeticIcon [Pos:{0.140532136, 0}, {0.49230507, 0}] [Size:{0, 60}, {0, 60}] [Visible:true] [Image]
            UICorner: UICorner
          TextLabel: RebirthStatsLabel [Pos:{0.626893878, 0}, {0.503879964, 0}] [Size:{0.684419572, 0}, {0.527566373, 0}] [Visible:true] [Text:"120"]
            UIStroke: UIStroke
            UIGradient: UIGradient
    UIAspectRatioConstraint: UIAspectRatioConstraint
  ScreenGui: ScreenButtonsGui
    Frame: Background [Pos:{0.126270831, 0}, {0.598542809, 0}] [Size:{0.234881684, 0}, {0.258179158, 0}] [Visible:true]
      ImageButton: RebirthButtonOpen/Close [Pos:{0.462686568, 0}, {0.230061352, 0}] [Size:{0.261194021, 0}, {0.435582817, 0}] [Visible:true] [Image]
        UICorner: UICorner
        ImageLabel: CosmeticIcon [Pos:{0.494262576, 0}, {0.532516062, 0}] [Size:{0.885714293, 0}, {0.887323916, 0}] [Visible:true] [Image]
          UIAspectRatioConstraint: UIAspectRatioConstraint
        UIGradient: UIGradient
        UIAspectRatioConstraint: UIAspectRatioConstraint
      ImageButton: PetsOpen/CloseButton [Pos:{0.136194035, 0}, {0.217791408, 0}] [Size:{0.264925361, 0}, {0.411042958, 0}] [Visible:true]
        UICorner: UICorner
        ImageLabel: CosmeticIcon [Pos:{0.500551581, 0}, {0.533356965, 0}] [Size:{0.873239458, 0}, {0.940298498, 0}] [Visible:true] [Image]
          UIAspectRatioConstraint: UIAspectRatioConstraint
        UIGradient: UIGradient
        UIAspectRatioConstraint: UIAspectRatioConstraint
      ImageButton: StatsButtonOpen/Close [Pos:{0.787313461, 0}, {0.230061352, 0}] [Size:{0.261194021, 0}, {0.435582817, 0}] [Visible:true]
        UICorner: UICorner
        ImageLabel: CosmeticIcon [Pos:{0.501230717, 0}, {0.532516062, 0}] [Size:{0.885714293, 0}, {0.887323916, 0}] [Visible:true] [Image]
          UIAspectRatioConstraint: UIAspectRatioConstraint
        UIGradient: UIGradient
        UIAspectRatioConstraint: UIAspectRatioConstraint
      UIListLayout: UIListLayout
      ImageButton: SettingButtonOpen/Close [Pos:{0.134328365, 0}, {0.769938648, 0}] [Size:{0.261194021, 0}, {0.435582817, 0}] [Visible:true]
        UICorner: UICorner
        ImageLabel: CosmeticIcon [Pos:{0.500650823, 0}, {0.540166974, 0}] [Size:{0.885714293, 0}, {0.887323916, 0}] [Visible:true] [Image]
          UIAspectRatioConstraint: UIAspectRatioConstraint
        UIGradient: UIGradient
        UIAspectRatioConstraint: UIAspectRatioConstraint
      ImageButton: ShopGuiOpen/Close [Pos:{0.458955228, 0}, {0.769938648, 0}] [Size:{0.261194021, 0}, {0.435582817, 0}] [Visible:true]
        UICorner: UICorner
        ImageLabel: CosmeticIcon [Pos:{0.501019955, 0}, {0.540166974, 0}] [Size:{0.885714293, 0}, {0.887323916, 0}] [Visible:true] [Image]
          UIAspectRatioConstraint: UIAspectRatioConstraint
        UIGradient: UIGradient
        UIAspectRatioConstraint: UIAspectRatioConstraint
      ImageButton: GroupRewardsIcon [Pos:{0.783582091, 0}, {0.769938648, 0}] [Size:{0.261194021, 0}, {0.435582817, 0}] [Visible:true]
        UICorner: UICorner
        ImageLabel: CosmeticIcon [Pos:{0.501388788, 0}, {0.51368928, 0}] [Size:{0.885714293, 0}, {0.887323916, 0}] [Visible:true] [Image]
          UIAspectRatioConstraint: UIAspectRatioConstraint
        UIGradient: UIGradient
        UIAspectRatioConstraint: UIAspectRatioConstraint
      UIAspectRatioConstraint: UIAspectRatioConstraint
    UIAspectRatioConstraint: UIAspectRatioConstraint
  ScreenGui: SettingsGui
    Frame: SettingsBackground [Pos:{0.499616832, 0}, {0.525375724, 0}] [Size:{0.286091745, 0}, {0.594975471, 0}] [Visible:false]
      UIStroke: UIStroke
      UICorner: UICorner
      TextLabel: StatsTitleLabel [Pos:{0.499679953, 0}, {-0.045172181, 0}] [Size:{0.565436125, 0}, {0.259360909, 0}] [Visible:true] [Text:"Settings"]  -  Edit
  03:10:25.124  STARTERGUI_CHUNK_4_END  -  Edit
  03:10:25.178  STARTERGUI_CHUNK_5_START  -  Edit
  03:10:25.178          UIStroke: UIStroke
        UIAspectRatioConstraint: UIAspectRatioConstraint
        UIGradient: UIGradient
      UIAspectRatioConstraint: UIAspectRatioConstraint
      UIGradient: UIGradient
      ImageButton: ExitButton [Pos:{1.01101053, 0}, {-0.0313907303, 0}] [Size:{0.321959466, 0}, {0.229186639, 0}] [Visible:true] [Image]
        TextLabel: ExitLabel [Pos:{0.383868814, 0}, {0.383056104, 0}] [Size:{0.262367457, 0}, {0.33584553, 0}] [Visible:true] [Text:"X"]
          UIStroke: UIStroke
          UIAspectRatioConstraint: UIAspectRatioConstraint
        UIAspectRatioConstraint: UIAspectRatioConstraint
      Frame: Background [Pos:{0.486452788, 0}, {0.556387544, 0}] [Size:{0.972905576, 0}, {0.896098793, 0}] [Visible:true]
        UIListLayout: UIListLayout
        Frame: ChangeMusicBackground [Pos:{0.501551986, 0}, {0.106162898, 0}] [Size:{0.837958932, 0}, {0.212325796, 0}] [Visible:true]
          UIStroke: UIStroke
          UICorner: UICorner
          UIGradient: UIGradient
          ImageLabel: CosmeticIcon [Pos:{0.160910264, 0}, {0.494019777, 0}] [Size:{0, 67}, {0, 60}] [Visible:true] [Image]
            UICorner: UICorner
            UIAspectRatioConstraint: UIAspectRatioConstraint
          TextButton: On/Off Settings [Pos:{0.627759218, 0}, {0.489971697, 0}] [Size:{0, 126}, {0, 37}] [Visible:true] [Text:"ON"]
            UIStroke: UIStroke
            UIStroke: UIStroke
            UICorner: UICorner
            UIAspectRatioConstraint: UIAspectRatioConstraint
          UIAspectRatioConstraint: UIAspectRatioConstraint
        Frame: ChangeQualityBackground [Pos:{0.501551986, 0}, {0.424030095, 0}] [Size:{0.837958932, 0}, {0.212325886, 0}] [Visible:true]
          UIStroke: UIStroke
          UICorner: UICorner
          UIGradient: UIGradient
          ImageLabel: CosmeticIcon [Pos:{0.166381031, 0}, {0.492304981, 0}] [Size:{0, 80}, {0, 80}] [Visible:true] [Image]
            UICorner: UICorner
            UIAspectRatioConstraint: UIAspectRatioConstraint
          TextButton: On/Off Settings [Pos:{0.627759218, 0}, {0.489971697, 0}] [Size:{0, 126}, {0, 37}] [Visible:true] [Text:"ON"]
            UIStroke: UIStroke
            UIStroke: UIStroke
            UICorner: UICorner
            UIAspectRatioConstraint: UIAspectRatioConstraint
          UIAspectRatioConstraint: UIAspectRatioConstraint
        Frame: DisablePopups(MoneyGainPopups) [Pos:{0.501551986, 0}, {0.741897285, 0}] [Size:{0.837958932, 0}, {0.212325796, 0}] [Visible:true]
          UIStroke: UIStroke
          UICorner: UICorner
          UIGradient: UIGradient
          ImageLabel: CosmeticIcon [Pos:{0.18853724, 0}, {0.460639596, 0}] [Size:{0, 92}, {0, 79}] [Visible:true] [Image]
            UICorner: UICorner
            UIAspectRatioConstraint: UIAspectRatioConstraint
          TextButton: On/Off Settings [Pos:{0.627759218, 0}, {0.489971697, 0}] [Size:{0, 126}, {0, 37}] [Visible:true] [Text:"ON"]
            UIStroke: UIStroke
            UIStroke: UIStroke
            UICorner: UICorner
            UIAspectRatioConstraint: UIAspectRatioConstraint
          UIAspectRatioConstraint: UIAspectRatioConstraint
        UIAspectRatioConstraint: UIAspectRatioConstraint
    UIAspectRatioConstraint: UIAspectRatioConstraint
  ScreenGui: GroupRewardsGui
    Frame: StatsBackground [Pos:{0.51367265, 0}, {0.544654846, 0}] [Size:{0.604957879, 0}, {0.637921989, 0}] [Visible:false]
      UIStroke: UIStroke
      UICorner: UICorner
      TextLabel: StatsTitleLabel [Pos:{0.498632163, 0}, {0.0926653147, 0}] [Size:{0.422649771, 0}, {0.165674329, 0}] [Visible:true] [Text:"Group Rewards"]
        UIStroke: UIStroke
        UIGradient: UIGradient
      UIGradient: UIGradient
      ImageButton: ExitButton [Pos:{0.991197884, 0}, {-0.0316184312, 0}] [Size:{0.179134652, 0}, {0.238028288, 0}] [Visible:true] [Image]
        TextLabel: ExitLabel [Pos:{0.380673796, 0}, {0.384984642, 0}] [Size:{0.260812402, 0}, {0.337431073, 0}] [Visible:true] [Text:"X"]
          UIStroke: UIStroke
      ImageLabel: CosmeticIcon [Pos:{0.227674097, 0}, {0.0933336765, 0}] [Size:{0, 59}, {0, 58}] [Visible:true] [Image]
        UICorner: UICorner
      TextLabel: DescriptionOfGroupRewards [Pos:{0.469276458, 0}, {0.319778025, 0}] [Size:{0.639224291, 0}, {0.311017841, 0}] [Visible:true] [Text:"If you join my group "FloGen" you can get:"]
        UIStroke: UIStroke
        UIGradient: UIGradient
      ImageLabel: Image [Pos:{0.347826302, 0}, {0.547903776, 0}] [Size:{0.104986079, 0}, {0.158187866, 0}] [Visible:true] [Image]
        UIAspectRatioConstraint: UIAspectRatioConstraint
      TextLabel: +2,000 PooBucks [Pos:{0.507386029, 0}, {0.546456039, 0}] [Size:{0.216649771, 0}, {0.110024519, 0}] [Visible:true] [Text:"+2,000"]
        UIStroke: UIStroke
        UIGradient: UIGradient
      ImageLabel: Image [Pos:{0.349275082, 0}, {0.699230075, 0}] [Size:{0.0729895607, 0}, {0.129003271, 0}] [Visible:true] [Image]
        UIAspectRatioConstraint: UIAspectRatioConstraint
      TextLabel: +2,000 PooBucks [Pos:{0.529399991, 0}, {0.691175759, 0}] [Size:{0.216649771, 0}, {0.110024519, 0}] [Visible:true] [Text:"5 Minutes!"]
        UIStroke: UIStroke
        UIGradient: UIGradient
      TextButton: VerifyButton [Pos:{0.470584095, 0}, {0.899997175, 0}] [Size:{0.335954875, 0}, {0.125775322, 0}] [Visible:true] [Text:"Verify"]
        UIStroke: UIStroke
        UIStroke: UIStroke
        UICorner: UICorner  -  Edit
  03:10:25.178  STARTERGUI_CHUNK_5_END  -  Edit
  03:10:25.178  STARTERGUI_ANALYSIS_COMPLETE  -  Edit
  03:10:25.178  Total chunks: 5  -  Edit